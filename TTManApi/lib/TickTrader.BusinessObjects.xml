<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TickTrader.BusinessObjects</name>
    </assembly>
    <members>
        <member name="T:TickTrader.BusinessObjects.AccountingTypes">
            <summary>
            Accounting types
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.PositionSnapshot.Price">
            <summary>
            It is open price, used only for Gross positions
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.PositionSnapshot.Rebate">
            <summary>
            Rebate, used only for Gross positions
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.AuthTokenType.Basic">
            <summary>
            Basic access token is a simple unique string generally is a GUID.
            It does not carry any payload. RefreshToken is null by default.
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.AuthToken">
            <summary>
            Authentication Token
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.AuthToken.Username">
            <summary>
            User name. Cannot be null or empty.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.AuthToken.Type">
            <summary>
            The Type of token
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.AuthToken.AccessToken">
            <summary>
            Access Token that would pass to a client application to be used for authentication purposes.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.AuthToken.AccessExpiration">
            <summary>
            Access Token expiration.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.AuthToken.RefreshToken">
            <summary>
            Refresh Token is used to regenerate Access Token. For the future use. Now it is null.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.AuthToken.RefreshExpiration">
            <summary>
            Refresh Token expiration. For the future use. Now it is null.
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.Configuration.Ports">
            <summary>
            List of default ports or internal port that are used in TTS.
            Some of ports are in the range [23000..23999]
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.DealerResponse.DealerIpAddress">
            <summary>
            Dealer Ip Address is automatically filled by TradeHost
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.DomainInfo.SwapChargesPerDay">
            <summary>
            Number of Swap charges per day. The default value is 1. Generally it must be a divisor of 24.
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.AccessListModifyRequest.Create(System.Int32,System.String,TickTrader.BusinessObjects.Security.AccessListRecord)">
            <summary>
            Create modify access list record request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="Name">Modifyied access list name</param>
            <param name="Record">Access list record</param>
            <returns>Modify access list record request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.AccessListNewRequest.Create(System.Int32,TickTrader.BusinessObjects.Security.AccessListRecord)">
            <summary>
            Create new access list record request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="Record">Access list record</param>
            <returns>New access list record request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.AccountBalanceRequest.Create(System.Int64,System.Decimal,System.String)">
            <summary>
            Create modify account balance request with required parameters.
            </summary>
            <param name="accountId">Account login</param>
            <param name="Amount">Balance amount (positive in case of deposit, negative in case of withdrawal)</param>
            <param name="Comment">Balance operation comment</param>
            <returns>Modify account balance request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.AccountCreditRequest.Create(System.Int32,System.Decimal,System.DateTime,System.String)">
            <summary>
            Create modify account credit request with required parameters.
            </summary>
            <param name="AccountLogin">Account login</param>
            <param name="Credit">Credit amount (positive in case of credit in, negative in case of credit out)</param>
            <param name="Expiration">Expiration date/time value</param>
            <param name="Comment">Credit operation comment</param>
            <returns>Modify account credit request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.AccountDeleteRequest.Create(System.Int64,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Delete account request with required parameters.
            </summary>
            <param name="AccountId">Account Id</param>
            <param name="CloseOrders">Close market orders and cancel pending orders (otherwise orders will be deleted)</param>
            <param name="archivation">Archivation flag</param>
            <returns>Delete account request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.AccountLoadRequest.Create(System.Int64)">
            <summary>
            Create load account request with required parameters.
            </summary>
            <param name="AccountLogin">Loaded account login</param>
            <returns>Load account request</returns>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.AccountModifyRequest.SetTwoFactorAuthKey">
            <summary>
            This property is used to create/delete 2FA key by calling CreateAccountTwoFactorAuthKey/DeleteAccountTwoFactorAuthKey.
            It will be ignored in ModifyAccount
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.AccountModifyRequest.Create(System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Create modify account request with required parameters.
            </summary>
            <param name="AccountId">Account login</param>
            <param name="AccountPassword">New account password (empty if you want Trading Platform to generate one, null if you want to keep previous value)</param>
            <param name="AccountInvestorPassword">New account investor password (empty if you want Trading Platform to generate one, null if you want to keep previous value)</param>
            <param name="Group">New account group (null if you want to keep previous value)</param>
            <param name="Comment">New account comment (null if you want to keep previous value)</param>
            <param name="Name">New account name (null if you want to keep previous value)</param>
            <param name="Email">New account email (null if you want to keep previous value)</param>
            <param name="Blocked">New account block flag (null if you want to keep previous value)</param>
            <param name="Readonly">New account readonly flag (null if you want to keep previous value)</param>
            <param name="Leverage">Account leverage (null if you want to keep previous value)</param>
            <returns>Modify account request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.AccountNewRequest.Create(System.Int64,System.String,System.String,System.String,TickTrader.BusinessObjects.AccountingTypes,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Decimal,System.String)">
            <summary>
            Create new account request with required parameters.
            </summary>
            <param name="AccountLogin">Desired account login (-1 if you want Trading Platform to generate one)</param>
            <param name="AccountPassword">Desired account password (empty or null if you want Trading Platform to generate one)</param>
            <param name="AccountInvestorPassword">Desired account investor password (empty or null if you want Trading Platform to generate one)</param>
            <param name="Group">Account group</param>
            <param name="AccountingType">Account type (Gross, Net or Cash)</param>
            <param name="Comment">Account comment</param>
            <param name="Name">Account name</param>
            <param name="Email">Account email</param>
            <param name="Blocked">Account block flag</param>
            <param name="Readonly">Account readonly flag</param>
            <param name="Leverage">Account leverage</param>
            <param name="Balance">Account initial balance</param>
            <param name="BalanceCurrency">Balance currency</param>
            <returns>New account request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ActivateOrderRequest.Create(System.Int64,TickTrader.BusinessObjects.ActivationTypes)">
            <summary>
            Create activate order request with required parameters.
            </summary>
            <param name="OrderId">Order Id to activate</param>
            <param name="Activation">Order activation type</param>
            <returns>Activate order request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ActivateOrderRequest.Create(System.Int64,TickTrader.BusinessObjects.ActivationTypes,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Create activate order request with required parameters.
            </summary>
            <param name="OrderId">Order Id to activate</param>
            <param name="Activation">Order activation type</param>
            <param name="Price">Order activation price (can be null)</param>
            <param name="Amount">Order activation amount (can be null)</param>
            <returns>Activate order request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ActivateOrderRequest.Create(System.Int64,TickTrader.BusinessObjects.Requests.IOrderFillData,System.Nullable{System.Int16})">
            <summary>
            Create activate order request with required parameters.
            </summary>
            <param name="orderId">Order Id to activate</param>
            <param name="fillData">Order fill data</param>
            <param name="managerId">Manager Id</param>
            <returns></returns>
        </member>
        <member name="T:TickTrader.BusinessObjects.Requests.AuthTokenRequest">
            <summary>
            Request to create Authentication Token
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.AuthTokenRequest.Username">
            <summary>
            User name. Should not be null or empty
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.AuthTokenRequest.RefreshToken">
            <summary>
            Refresh token to regenerate Access token or null. For the future use, now it will be skipped.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.AuthTokenRequest.Expiration">
            <summary>
            Access token expiration time in milliseconds. Must be in the rage [1..60000].
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.Requests.AuthTokenReport">
            <summary>
            Request to create Authentication Token
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CaddyFileGenerateRequest.AllDomains">
            <summary>
            True - generate for all domains, otherwise - only for domain Default
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CaddyFileGenerateRequest.Write">
            <summary>
            True - write caddyfile, otherwise - output only
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CaddyWebsitesGenerateRequest.Domain">
            <summary>
            The name of Domain
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CaddyWebsitesGenerateRequest.CaddyOptions">
            <summary>
            Usage options
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CaddyFileWriteRequest.Config">
            <summary>
            Caddyfile content.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CaddyFileWriteRequest.Merge">
            <summary>
            True - caddyfile will be merged with new content.
            In this case new content might have a part of caddy file but it must be full blocks #GLOBAL and/or #SNIPPETS and/or #WEBSITES.
            Old blocks will be replaced with new ones, the rest will remain unchanged.
            False - caddyfile will be fully replaced with new content.
            NOTE: Merge=false and Write=false do not affect anything except the output report.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CaddyFileWriteRequest.Write">
            <summary>
            True - write caddyfile, otherwise - output only
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.CancelOrderRequest.Create(System.Int64,System.Boolean)">
            <summary>
            Create cancel order request with required parameters.
            </summary>
            <param name="orderId">Order Id</param>
            <param name="stopoutFlag">Stop out flag</param>
            <returns>Cancel order request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.CancelOrderRequest.CreateClient(System.Int64)">
            <summary>
            Create cancel order request with required parameters (client emulation).
            </summary>
            <param name="OrderId">Order Id</param>
            <returns>Cancel order request</returns>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateNewRequest.Storage">
            <summary>
            Storage type "System", "Internal" or "Caddy". See <see cref="T:TickTrader.BusinessObjects.CertificateStorageType"/>
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateNewRequest.Name">
            <summary>
            Name of certificate.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateNewRequest.Thumbprint">
            <summary>
            Thumbprint is used for storage "System".
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateNewRequest.CertFile">
            <summary>
            Certificate file path. It used for storages "Internal" or "Caddy".
            Certificate formats: PEM, PFX
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateNewRequest.KeyFile">
            <summary>
            Private key file path (optional, ignored for PFX). It used for storage "Internal".
            If it is null or empty the key file is considered as CertFile with extension is replaced by '.key'
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateNewRequest.Password">
            <summary>
            Password for PFX certificate (optional, ignored for PEM)
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateNewRequest.Issuer">
            <summary>
            The issuer.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateNewRequest.Renewal">
            <summary>
            Whether this is a renewal.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateFailReport.Storage">
            <summary>
            Storage type "System", "Internal" or "Caddy". See <see cref="T:TickTrader.BusinessObjects.CertificateStorageType"/>
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateFailReport.Name">
            <summary>
            The name on the certificate.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateFailReport.Issuer">
            <summary>
            The issuer(s) tried.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateFailReport.Renewal">
            <summary>
            Whether this is a renewal.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CertificateFailReport.Error">
            <summary>
            The (final) error message.
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ChargeSwapsRequest.CreateForAccount(System.Int64)">
            <summary>
            Create SwapCharges request for the given Account.
            </summary>
            <param name="accountLogin">Desired account login</param>
            <returns>New request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ChargeSwapsRequest.CreateForGroup(System.String)">
            <summary>
            Create SwapCharges request for the given Group.
            </summary>
            <param name="group">Desired group name</param>
            <returns>New request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ChargeSwapsRequest.CreateForDomain(System.String)">
            <summary>
            Create SwapCharges request for the given Domain.
            </summary>
            <param name="domain">Desired group name</param>
            <returns>New request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ChargeSwapsRequest.CreateForAll">
            <summary>
            Create SwapCharges request for all accounts.
            </summary>
            <returns>New request</returns>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.CheckBalanceRequest.Currency">
            <summary>
            Currency is used for Cash accounts. Ignored for Gross and Net accounts
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ClosePositionRequest.CreateClosePositionById(System.Int64,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Boolean,TickTrader.BusinessObjects.Requests.TradeRequestOptions)">
            <summary>
            Create close position request for 'Close position by Id' operation.
            </summary>
            <param name="PositionId">Order Id to close</param>
            <param name="Amount">Close amount (null if you want to close the full volume)</param>
            <param name="Price">Close price (null if you want to close by market price)</param>
            <param name="StopoutFlag">Stopout flag</param>
            <param name="ManOptions">Manager Options</param>
            <returns>Close position request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ClosePositionRequest.CreateClientClosePositionById(System.Int64,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Create close position request for 'Close position by Id' operation (client emulation).
            </summary>
            <param name="PositionId">Order Id to close</param>
            <param name="Amount">Close amount (null if you want to close the full volume)</param>
            <param name="Price">Close price (null if you want to close by market price)</param>
            <returns>Close position request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ClosePositionRequest.CreateCloseByPositions(System.Int64,System.Int64,TickTrader.BusinessObjects.Requests.CloseByTypes,System.Boolean)">
            <summary>
            Create close position request for 'Close position by another position' operation.
            </summary>
            <param name="PositionId">Order first Id to close by</param>
            <param name="ByPositionId">Order second Id to close by</param>
            <param name="closeByType">Close by type</param>
            <param name="StopoutFlag">Stop out flag</param>
            <returns>Close position request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ClosePositionRequest.CreateClientCloseByPositions(System.Int64,System.Int64,TickTrader.BusinessObjects.Requests.CloseByTypes)">
            <summary>
            Create close position request for 'Close position by another position' operation (client emulation).
            </summary>
            <param name="PositionId">Order first Id to close by</param>
            <param name="ByPositionId">Order second Id to close by</param>
            <param name="closeByType">Close by type</param>
            <returns>Close position request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ClosePositionRequest.CreateCloseAllPositionsForAccount(System.Int64,System.Boolean)">
            <summary>
            Create close position request for 'Close all positions for account with the given Account Login' operation.
            </summary>
            <param name="AccountLogin">Account login</param>
            <param name="StopoutFlag">Stop out flag</param>
            <returns>Close position request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ClosePositionRequest.CreateClientCloseAllPositionsForAccount(System.Int64)">
            <summary>
            Create close position request for 'Close all positions for account with the given Account Login' operation (client emulation).
            </summary>
            <param name="AccountLogin">Account login</param>
            <returns>Close position request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ClosePositionRequest.CreateCloseAllPositionsForSymbol(System.Int32,System.String,System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            Create close position request for 'Close all symbol positions for account with the given Account Login' operation.
            </summary>
            <param name="AccountLogin">Account login</param>
            <param name="Symbol">Symbol</param>
            <param name="Price">Close price (null if you want to close by market price)</param>
            <param name="StopoutFlag">Stop out flag</param>
            <returns>Close position request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ClosePositionRequest.CreateClientCloseAllPositionsForSymbol(System.Int32,System.String,System.Nullable{System.Decimal})">
            <summary>
            Create close position request for 'Close all symbol positions for account with the given Account Login' operation (client emulation).
            </summary>
            <param name="AccountLogin">Account login</param>
            <param name="Symbol">Symbol</param>
            <param name="Price">Close price (null if you want to close by market price)</param>
            <returns>Close position request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.CurrencyModifyRequest.Create(System.Int32,System.String,System.String,System.Int32,System.String,System.Nullable{TickTrader.BusinessObjects.CurrencyType},System.Nullable{System.Double})">
            <summary>
            Create modify currency request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="CurrencyName">Name of the modified currency</param>
            <param name="NewCurrencyName">New name of the modified currency (null if you want to keep previous value)</param>
            <param name="Precision">New precision (null if you want to keep previous value)</param>
            <param name="Description">New currency description (null if you want to keep previous value)</param>
            <param name="CurrencyType">New currency type (null if you want to keep previous value)</param>
            <param name="Tax">New tax value (null if you want to keep previous value)</param>
            <returns>Modify currency request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.CurrencyNewRequest.Create(System.Int32,System.String,System.Int32,System.String,TickTrader.BusinessObjects.CurrencyType,System.Double)">
            <summary>
            Create new currency request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="CurrencyName">Desired currency name</param>
            /// <param name="Precision">Desired currency precision</param>
            <param name="Description">Desired currency description</param>
            <param name="CurrencyType">Desired currency type</param>
            <param name="Tax">Desired tax value</param>
            <returns>New currency request</returns>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.DividendModifyRequest.Rates">
            <summary>
            Rates can be null or empty. In this case there will not be changes
            Old list of Rates are replaced with this list.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.DividendNewRequest.Rates">
            <summary>
            Rates cannot be null or empty
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.DomainModifyRequest.SwapChargesPerDay">
            <summary>
            Number of Swap charges per day. Generally it must be a divisor of 24 or null.
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.DomainModifyRequest.Create(System.Int32,System.String,System.String)">
            <summary>
            Create modify domain request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="DomainName">Name of the modified domain</param>
            <param name="NewDomainName">New name of the modified domain (null if you want to keep previous value)</param>
            <returns>Modify domain request</returns>
        </member>
        <member name="P:TickTrader.BusinessObjects.Requests.DomainNewRequest.SwapChargesPerDay">
            <summary>
            Number of Swap charges per day. Generally it must be a divisor of 24 or null.
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.DomainNewRequest.Create(System.Int32,System.String)">
            <summary>
            Create new domain request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="DomainName">Desired domain name</param>
            <returns>New domain request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.DropSessionsRequest.CreateForAccount(System.Int64,TickTrader.BusinessObjects.Requests.DropSessionsTargets)">
            <summary>
            Create drop sessions request for the given account.
            </summary>
            <param name="accountId">Desired account login</param>
            <param name="targets">Drop session targets</param>
            <returns>New drop sessions request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.DropSessionsRequest.CreateForLogin(System.String,TickTrader.BusinessObjects.Requests.DropSessionsTargets)">
            <summary>
            Create drop sessions request for the given login.
            </summary>
            <param name="login">Desired login</param>
            <param name="targets">Drop session targets</param>
            <returns>New drop sessions request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.DropSessionsRequest.CreateForGroup(System.Int16,TickTrader.BusinessObjects.Requests.DropSessionsTargets)">
            <summary>
            Create drop sessions request for the given group.
            </summary>
            <param name="group">Desired group name</param>
            <param name="targets">Drop session targets</param>
            <returns>New drop sessions request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.DropSessionsRequest.CreateFull(TickTrader.BusinessObjects.Requests.DropSessionsTargets)">
            <summary>
            Create drop sessions request for the whole Trading Platform.
            </summary>
            <param name="targets">Drop session targets</param>
            <returns>New drop sessions request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.FeedSourceModifyRequest.Create(System.Int32,System.String,System.Nullable{TickTrader.BusinessObjects.FeedSourceType},System.String,System.Nullable{System.Boolean},System.String,System.Boolean)">
            <summary>
            Create modify feed source request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="FeedSourceName">Modified feed source name</param>
            <param name="NewType">New type of the modified feed source (null if you want to keep previous value)</param>
            <param name="NewName">New name of the modified feed source (null if you want to keep previous value)</param>
            <param name="IsEnabled">New enabled flag of the modified feed source (null if you want to keep previous value)</param>
            <param name="Configuration">New configuratoin string of the modified feed source (null if you want to keep previous value)</param>
            <param name="debug"></param>
            <returns>Modified feed source request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.FeedSourceNewRequest.Create(System.Int32,TickTrader.BusinessObjects.FeedSourceType,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Create new feed source request with required parameters.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="type">Desired feed source name</param>
            <param name="name">Desired feed source name</param>
            <param name="isEnabled">Desired feed source enable flag</param>
            <param name="configuration">Desired feed source configuration string</param>
            <returns>New feed source request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.GroupModifyRequest.Create(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Create modify group request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="GroupName">Name of the modified group</param>
            <param name="NewGroupName">New name of the modified group (null if you want to keep previous value)</param>
            <param name="MarginCallLevel">New margin call level (null if you want to keep previous value)</param>
            <param name="StopOutLevel">New stop out level (null if you want to keep previous value)</param>
            <param name="MarginLevelType">New margin level type (null if you want to keep previous value)</param>
            <returns>Modify group request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.GroupNewRequest.Create(System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create new group request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="GroupName">Desired group name</param>
            <param name="MarginCallLevel">Desired margin call level</param>
            <param name="StopOutLevel">Desired stop out level</param>
            <param name="MarginLevelType">Desired margin level type</param>
            <returns>New group request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.GroupSecurityModifyRequest.Create(System.Int32,System.String,System.String,System.String,System.Nullable{TickTrader.BusinessObjects.ExecutionModes},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean})">
            <summary>
            Create modify group security request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="GroupSecurityId">Modified group security Id</param>
            <param name="NewGroup">New name of the modified group (null if you want to keep previous value)</param>
            <param name="NewSecurity">New name of the modified security (null if you want to keep previous value)</param>
            <param name="Execution">New execution mode (null if you want to keep previous value)</param>
            <param name="Enabled">New group security enabled flag (null if you want to keep previous value)</param>
            <param name="AllowTrade">New allow trade flag (null if you want to keep previous value)</param>
            <param name="MinTradeAmount">New min trade amount (null if you want to keep previous value)</param>
            <param name="MaxTradeAmount">New max trade amount (null if you want to keep previous value)</param>
            <param name="TradeAmountStep">New trade amount step (null if you want to keep previous value)</param>
            <param name="NormalizeSymbolNames">New normalize symbol names flag (null if you want to keep previous value)</param>
            <param name="IsCloseOnly">New close-only mode flag's value </param>
            <returns>Modify group security request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.GroupSecurityNewRequest.Create(System.Int32,System.String,System.String,TickTrader.BusinessObjects.ExecutionModes,System.Boolean,System.Boolean,System.Decimal,System.Decimal,System.Decimal,System.Boolean)">
            <summary>
            Create new group security request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="Group">Desired group name</param>
            <param name="Security">Desired security name</param>
            <param name="Execution">Desired execution mode</param>
            <param name="Enabled">Desired group security enabled flag</param>
            <param name="AllowTrade">Desired allow trade flag</param>
            <param name="MinTradeAmount">Desired min trade amount</param>
            <param name="MaxTradeAmount">Desired max trade amount</param>
            <param name="TradeAmountStep">Desired trade amount step</param>
            <param name="IsCloseOnly">Desired close-only mode flag</param>
            <returns>New group security request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.LoginModifyRequest.Create(System.String,System.String,System.Nullable{TickTrader.BusinessObjects.LoginRights})">
            <summary>
            Create modify login request with required parameters.
            </summary>
            <param name="userName">Login user name to modify</param>
            <param name="password">New password of the modified login (null if you want to keep previous value)</param>
            <param name="rights">New rights of the modified login (null if you want to keep previous value)</param>
            <returns>Modify login request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.LoginNewRequest.Create(System.Int64,System.String,System.String,TickTrader.BusinessObjects.LoginRights)">
            <summary>
            Create new login request with required parameters.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="userName">Desired user name</param>
            <param name="password">Desired password</param>
            <param name="rights">Desired login rights</param>
            <returns>New login request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.MachineModifyRequest.Create(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Create modify machine request with required parameters.
            </summary>
            <param name="name">Modified machine name</param>
            <param name="newName">New name of the modified machine (null if you want to keep previous value)</param>
            <param name="newIsOnline">New online flag of the modified machine (null if you want to keep previous value)</param>
            <param name="newDescription">New comment of the modified description (null if you want to keep previous value)</param>
            <param name="newAddress">New address of the modified description (null if you want to keep previous value)</param>
            <returns>Modified machine request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.MachineNewRequest.Create(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create new machine request with required parameters.
            </summary>
            <param name="name">Desired name</param>
            <param name="isOnline">Desired online flag</param>
            <param name="description">Desired description</param>
            <param name="address">Desired address</param>
            <returns>New machine request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ManagerDomainsModifyRequest.Create(System.Int32,System.String,System.String,TickTrader.BusinessObjects.ManagerRightsDomain)">
            <summary>
            Create modify manager domains request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="ManagerDomainsId">Manager domains Id</param>
            <param name="Domains">Manager domains pattern (null if you want to keep previous value)</param>
            <param name="Rights">Manager domains rights (null if you want to keep previous value)</param>
            <returns>New manager domains request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ManagerDomainsNewRequest.Create(System.Int32,System.Int16,System.String,TickTrader.BusinessObjects.ManagerRightsDomain)">
            <summary>
            Create new manager domains request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="ManagerId">Manager Id</param>
            <param name="Domains">Manager domains pattern</param>
            <param name="Rights">Manager groups rights</param>
            <returns>New manager domains request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ManagerGroupsModifyRequest.Create(System.Int32,System.String,System.String,TickTrader.BusinessObjects.ManagerRightsGroup)">
            <summary>
            Create modify manager groups request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="ManagerGroupsId">Manager groups Id</param>
            <param name="Groups">Manager groups pattern (null if you want to keep previous value)</param>
            <param name="Rights">Manager groups rights (null if you want to keep previous value)</param>
            <returns>New manager groups request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ManagerGroupsNewRequest.Create(System.Int32,System.Int16,System.String,TickTrader.BusinessObjects.ManagerRightsGroup)">
            <summary>
            Create new manager groups request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="ManagerId">Manager Id</param>
            <param name="Groups">Manager groups pattern</param>
            <param name="Rights">Manager groups rights</param>
            <returns>New manager groups request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ManagerModifyRequest.Create(System.Int32,System.Int16,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,TickTrader.BusinessObjects.ManagerRights)">
            <summary>
            Create modify manager info request with required parameters.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="modifiedManagerId">Id the modified manager</param>
            <param name="managerPassword">New manager password (empty if you want Trading Platform to generate one, null if you want to keep previous value)</param>
            <param name="group">New manager group (null if you want to keep previous value)</param>
            <param name="comment">New manager comment (null if you want to keep previous value)</param>
            <param name="name">New manager name (null if you want to keep previous value)</param>
            <param name="email">New manager email (null if you want to keep previous value)</param>
            <param name="blocked">New manager block flag (null if you want to keep previous value)</param>
            <param name="readOnly">New manager readonly flag (null if you want to keep previous value)</param>
            <param name="mailbox">New manager mailbox (null if you want to keep previous value)</param>
            <param name="rights">New manager rights (null if you want to keep previous value)</param>
            <returns>Modify manager info request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ManagerNewRequest.Create(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,TickTrader.BusinessObjects.ManagerRights)">
            <summary>
            Create new manager request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="ManagerLogin">Desired manager login (-1 if you want Trading Platform to generate one)</param>
            <param name="ManagerPassword">Desired manager password (empty or null if you want Trading Platform to generate one)</param>
            <param name="Group">Manager group</param>
            <param name="Comment">Manager comment</param>
            <param name="Name">Manager name</param>
            <param name="Email">Manager email</param>
            <param name="Blocked">Manager block flag</param>
            <param name="Mailbox">Manager mailbox</param>
            <param name="Rights">Manager rights</param>
            <returns>New manager request</returns>
        </member>
        <member name="T:TickTrader.BusinessObjects.Requests.IManagerConfigRequest">
            <summary>
            It should be 
            public class ManagerConfigRequest : ManagerRequest
            The base class for every request that create/modify/delete a config entity
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ManagerSecuritiesModifyRequest.Create(System.Int32,System.String,System.String,TickTrader.BusinessObjects.ManagerRightsSecurity)">
            <summary>
            Create new manager symbol securities request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="ManagerSecuritiesId">Manager securities Id</param>
            <param name="Securities">Manager securities pattern (null if you want to keep previous value)</param>
            <param name="Rights">Manager securities rights (null if you want to keep previous value)</param>
            <returns>New manager securities request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ManagerSecuritiesNewRequest.Create(System.Int32,System.Int16,System.String,TickTrader.BusinessObjects.ManagerRightsSecurity)">
            <summary>
            Create new manager symbol securities request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="ManagerId">Manager Id</param>
            <param name="Securities">Manager securities pattern</param>
            <param name="Rights">Manager securities rights</param>
            <returns>New manager securities request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ModuleModifyRequest.Create(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},TickTrader.BusinessObjects.Configuration.ServerModuleConfig,System.String,System.String)">
            <summary>
            Create modify module request with required parameters.
            </summary>
            <param name="machineName">Modified machine name</param>
            <param name="moduleName">Modified module name</param>
            <param name="newModuleName">New name of the modified module (null if you want to keep previous value)</param>
            <param name="newType">New type of the modified module (null if you want to keep previous value)</param>
            <param name="newIsOnline">New online flag is deprecated</param>
            <param name="newMachineName">New machine of the modified description (null if you want to keep previous value)</param>
            <param name="newServiceName">New service name of the modified description (null if you want to keep previous value)</param>
            <param name="newPath">New path of the modified description (null if you want to keep previous value)</param>
            <param name="newVersion">New version of the modified description (null if you want to keep previous value)</param>
            <param name="newLogSeverity">New log severity of the modified module (null if you want to keep previous value)</param>
            <param name="moduleConfig">New configuration of the modified module (null if you want to keep previous value)</param>
            <param name="logFolderPath">New log folder path (null if you want to keep previos value)</param>
            <param name="journalFolderPath">New journal folder path (null if you want to keep previos value)</param>
            /// <returns>Modified module request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ModuleNewRequest.Create(System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.Int32,TickTrader.BusinessObjects.Configuration.ServerModuleConfig,System.String,System.String)">
            <summary>
            Create new module request with required parameters.
            </summary>
            <param name="name">Desired name</param>
            <param name="type">Desired module type</param>
            <param name="isOnline">isOnline is deprecated</param>
            <param name="machineName">Desired machine name</param>
            <param name="serviceName">Desired service name</param>
            <param name="path">Desired path</param>
            <param name="version">Desired version</param>
            <param name="logSeverity"></param>
            <param name="moduleConfig">Desired configuration of the modified module (null by default)</param>
            <param name="logFolderPath">New log folder path (null if you want to keep previos value)</param>
            <param name="journalFolderPath">New journal folder path (null if you want to keep previos value)</param>
            <returns>New module request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.OpenOCOOrdersRequest.CreateFromContingent(TickTrader.BusinessObjects.IOrder,TickTrader.BusinessObjects.IOrder,System.Nullable{System.Decimal})">
            <summary>
            Create a request to open OCO orders from contingent orders
            </summary>
            <param name="firstOrder">The first order</param>
            <param name="secondOrder">The second order</param>
            <param name="amount">Amount or null to use amounts from orders</param>
            <returns>Request to open OCO orders</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.OpenOrderRequest.Create(System.Int64,TickTrader.BusinessObjects.OrderTypes,TickTrader.BusinessObjects.OrderSides,System.String,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Create open order request with required parameters.
            </summary>
            <param name="login">Account login of the target account</param>
            <param name="OrderType">Order type (market, limit, stop)</param>
            <param name="OrderSide">Order side (buy, sell)</param>
            <param name="Symbol">Symbol name</param>
            <param name="Amount">Amount</param>
            <param name="StopPrice"> Stop price</param>
            <param name="Price">Price</param>
            <param name="SL">Stop limit (can be null)</param>
            <param name="TP">Take profit (can be null)</param>
            <param name="UserComment">User Comment</param>
            <param name="ManagerComment">Manager Comment</param>
            <param name="UserTag">User Tag</param>
            <param name="ManagerTag">Manager Tag</param>///
            <param name="Magic">Magic number (default is 0)</param>
            <param name="Expiration">Expiration date/time (default is null)</param>
            <returns>Open order request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.OpenOrderRequest.CreateClient(System.Int64,TickTrader.BusinessObjects.OrderTypes,TickTrader.BusinessObjects.OrderSides,System.String,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Create open order request with required parameters (client emulation).
            </summary>
            <param name="login">Account login of the target account</param>
            <param name="OrderType">Order type (market, limit, stop)</param>
            <param name="OrderSide">Order side (buy, sell)</param>
            <param name="Symbol">Symbol name</param>
            <param name="Amount">Amount</param>
            <param name="StopPrice">Stop price</param>
            <param name="Price">Price</param>
            <param name="SL">Stop limit (can be null)</param>
            <param name="TP">Take profit (can be null)</param>
            <param name="UserComment">User Comment</param>
            <param name="ManagerComment">Manager Comment</param>
            <param name="UserTag">User Tag</param>
            <param name="ManagerTag">Manager Tag</param>///
            <param name="Magic">Magic number (default is 0)</param>
            <param name="Expiration">Expiration date/time (default is null)</param>
            <returns>Open order request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.OpenOrderRequest.CreateFromContingent(TickTrader.BusinessObjects.IOrder,System.Nullable{System.Decimal})">
            <summary>
            Create request to open order from contingent order
            </summary>
            <param name="order">The contingent order</param>
            <param name="amount">Amount or null to use value from order</param>
            <returns>Request to open order or null if order is not contingent</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.OpenOrderRequest.CreateFromStopLimit(TickTrader.BusinessObjects.IOrder)">
            <summary>
            Create request to open Limit order from StopLimit order
            </summary>
            <param name="order">The StopLimit order</param>
            <returns>Request to open order or null if order is not StopLimit</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.OrderReplaceRequest.Create(System.Int64,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
            Create order replace request with required parameters.
            </summary>
            <param name="orderId">Order Id to activate</param>
            <param name="symbol">Order symbol</param>
            <param name="stopPrice">Order stop price (null if you want to keep previous value)</param>
            <param name="price">Order price (null if you want to keep previous value)</param>
            <param name="sl">Order stop loss value (null if you want to keep previous value)</param>
            <param name="tp">Order take profit value (null if you want to keep previous value)</param>
            <param name="userComment">Order user comment (null if you want to keep previous value)</param>
            <returns>Order replace request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.OrderReplaceRequest.CreateClient(System.Int64,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
            Create order replace request with required parameters (client emulation).
            </summary>
            <param name="orderId">Order Id to activate</param>
            <param name="symbol">Order symbol</param>
            <param name="stopPrice">Order stop price (null if you want to keep previous value)</param>
            <param name="price">Order price (null if you want to keep previous value)</param>
            <param name="sl">Order stop loss value (null if you want to keep previous value)</param>
            <param name="tp">Order take profit value (null if you want to keep previous value)</param>
            <param name="userComment">Order user comment (null if you want to keep previous value)</param>
            <returns>Order replace request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.OrderReplaceRequest.Create(System.Int64,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime})">
            <summary>
            Create order replace request with required parameters.
            </summary>
            <param name="orderId">Order Id to activate</param>
            <param name="stopPrice">Order stop price (null if you want to keep previous value)</param>
            <param name="price">Order price (null if you want to keep previous value)</param>
            <param name="sl">Order stop loss value (null if you want to keep previous value)</param>
            <param name="tp">Order take profit value (null if you want to keep previous value)</param>
            <param name="userComment">Order user comment (null if you want to keep previous value)</param>
            <param name="managerComment">Order manager comment (null if you want to keep previous value)</param>
            <param name="userTag">Order user tag (null if you want to keep previous value)</param>
            <param name="managerTag">Order manager tag (null if you want to keep previous value)</param>
            <param name="magic">Order magic number (null if you want to keep previous value)</param>
            <param name="amount">Order amount (null if you want to keep previous value)</param>
            <param name="remainingAmount">Order remaining amount (null if you want to keep previous value)</param>
            <param name="commision">Order commission (null if you want to keep previous value)</param>
            <param name="expiration">Order expiration date (null if you want to keep previous value)</param>
            <returns>Order replace request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.OrderReplaceRequest.Create(System.Int64,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.DateTime})">
            <summary>
            Create order replace request with required parameters.
            </summary>
            <param name="orderId">Order Id to activate</param>
            <param name="stopPrice">Order stop price (null if you want to keep previous value)</param>
            <param name="price">Order price (null if you want to keep previous value)</param>
            <param name="sl">Order stop loss value (null if you want to keep previous value)</param>
            <param name="tp">Order take profit value (null if you want to keep previous value)</param>
            <param name="userComment">Order user comment (null if you want to keep previous value)</param>
            <param name="managerComment">Order manager comment (null if you want to keep previous value)</param>
            <param name="userTag">Order user tag (null if you want to keep previous value)</param>
            <param name="managerTag">Order manager tag (null if you want to keep previous value)</param>
            <param name="magic">Order magic number (null if you want to keep previous value)</param>
            <param name="amountChange">A value by which Order amount will be changed (0 if you want to keep previous value)</param>
            <param name="commision">Order commission (null if you want to keep previous value)</param>
            <param name="expiration">Order expiration date (null if you want to keep previous value)</param>
            <returns>Order replace request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.OrderReplaceRequest.CreateClient(System.Int64,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime})">
            <summary>
            Create order replace request with required parameters (client emulation).
            </summary>
            <param name="orderId">Order Id to activate</param>
            <param name="stopPrice">Order stop price (null if you want to keep previous value)</param>
            <param name="price">Order price (null if you want to keep previous value)</param>
            <param name="sl">Order stop loss value (null if you want to keep previous value)</param>
            <param name="tp">Order take profit value (null if you want to keep previous value)</param>
            <param name="userComment">Order user comment (null if you want to keep previous value)</param>
            <param name="managerComment">Order manager comment (null if you want to keep previous value)</param>
            <param name="userTag">Order user tag (null if you want to keep previous value)</param>
            <param name="managerTag">Order manager tag (null if you want to keep previous value)</param>
            <param name="magic">Order magic number (null if you want to keep previous value)</param>
            <param name="amount">Order amount (null if you want to keep previous value)</param>
            <param name="remainingAmount">Order remaining amount (null if you want to keep previous value)</param>
            <param name="commision">Order commission (null if you want to keep previous value)</param>
            <param name="expiration">Order expiration date (null if you want to keep previous value)</param>
            <returns>Order replace request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.OrderReplaceRequest.CreateClient(System.Int64,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.DateTime})">
            <summary>
            Create order replace request with required parameters (client emulation).
            </summary>
            <param name="orderId">Order Id to activate</param>
            <param name="stopPrice">Order stop price (null if you want to keep previous value)</param>
            <param name="price">Order price (null if you want to keep previous value)</param>
            <param name="sl">Order stop loss value (null if you want to keep previous value)</param>
            <param name="tp">Order take profit value (null if you want to keep previous value)</param>
            <param name="userComment">Order user comment (null if you want to keep previous value)</param>
            <param name="managerComment">Order manager comment (null if you want to keep previous value)</param>
            <param name="userTag">Order user tag (null if you want to keep previous value)</param>
            <param name="managerTag">Order manager tag (null if you want to keep previous value)</param>
            <param name="magic">Order magic number (null if you want to keep previous value)</param>
            <param name="amountChange">A value by which Order amount will be changed (0 if you want to keep previous value)</param>
            <param name="commision">Order commission (null if you want to keep previous value)</param>
            <param name="expiration">Order expiration date (null if you want to keep previous value)</param>
            <returns>Order replace request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.RolloverRequest.CreateForAccount(System.Int64)">
            <summary>
            Create rollover request for the given account.
            </summary>
            <param name="accountLogin">Desired account login</param>
            <returns>New rollover request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.RolloverRequest.CreateForGroup(System.String)">
            <summary>
            Create rollover request for the given group.
            </summary>
            <param name="group">Desired group name</param>
            <returns>New rollover request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.RolloverRequest.CreateFull">
            <summary>
            Create rollover request for the whole Trading Platform.
            </summary>
            <returns>New rollover request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.SecurityModifyRequest.Create(System.Int32,System.String,System.String,System.String)">
            <summary>
            Create modify symbol security request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="SecurityName">Name of the modified symbol security</param>
            <param name="NewSecurityName">New name of the modified symbol security (null if you want to keep previous value)</param>
            <param name="Description">New symbol security description (null if you want to keep previous value)</param>
            <returns>Modify symbol security request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.SecurityNewRequest.Create(System.Int32,System.String,System.String)">
            <summary>
            Create new symbol security request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="SecurityName">Desired symbol security name</param>
            <param name="Description">Desired symbol security description</param>
            <returns>New symbol security request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ServiceSoftModifyRequest.Create(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Create set server time request with required parameters.
            </summary>
            <param name="id">Modified service soft Id</param>
            <param name="isActive">New active flag (null if we keep the previous value)</param>
            <param name="isForced">New forced flag (null if we keep the previous value)</param>
            <param name="comment">New service soft comment (null if we keep the previous value)</param>        
            <returns>Modify service soft request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ServiceTypeModifyRequest.Create(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Create modify service type request with required parameters.
            </summary>
            <param name="name">Modified service type name</param>
            <param name="newName">New name of the modified service type (null if you want to keep previous value)</param>
            <param name="newComment">New comment of the modified service type (null if you want to keep previous value)</param>
            <param name="newIsCritical">New is critical flag of the modified service type (null if you want to keep previous value)</param>
            <returns>Modified service type request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ServiceTypeNewRequest.Create(System.String,System.String,System.Boolean)">
            <summary>
            Create new service type request with required parameters.
            </summary>
            <param name="name">Desired name</param>
            <param name="comment">Desired comment</param>
            <param name="isCritical">Is critical flag</param>
            <returns>New service type request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.SetClusterConfigurationRequest.Create(System.Int32,TickTrader.BusinessObjects.ClusterConfiguration)">
            <summary>
            Create set server time request with required parameters.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="config">Server common configuration</param>        
            <returns>Set server time request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.SetTradeConfigurationRequest.Create(System.Int32,TickTrader.BusinessObjects.TradeConfiguration)">
            <summary>
            Create set server configuration request with required parameters.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="config">Server common configuration</param>        
            <returns>Set server time request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.SubscriptionModifyRequest.Create(System.Int32,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{TickTrader.BusinessObjects.StreamCompressionTypes})">
            <summary>
            Create modify subscription request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="SubscriptionName">Name of the modified subscription</param>
            <param name="NewSubscriptionName">New name of the modified subscription (null if you want to keep previous value)</param>
            <param name="FrequencyFilterMs">New frequency filter time inteval in ms(null if you want to keep previous value)</param>
            <param name="TotalDepthLimit">New depth filter depth(null if you want to keep previous value)</param>
            <param name="Compression">New compression type(null if you want to keep previous value)</param>
            <returns>Modify subscription request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.SubscriptionNewRequest.Create(System.Int32,System.String,System.Double,System.Int32,TickTrader.BusinessObjects.StreamCompressionTypes)">
            <summary>
            Create new subscription request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="SubscriptionName">Desired subscription name</param>
            <param name="FrequencyFilterMs">Desired frequency filter time inteval in ms</param>
            <param name="TotalDepthLimit">Desired depth filter p</param>
            <param name="compression"></param>
            <returns>New subscription request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.SymbolModifyRequest.Create(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            Create modify symbol request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="SymbolName">Name of the modified symbol</param>
            <param name="NewSymbolName">New name of the modified symbol (null if you want to keep previous value)</param>
            <param name="Security">New symbol security name (null if you want to keep previous value)</param>
            <param name="MarginCurrency">New symbol margin currency (null if you want to keep previous value)</param>
            <param name="ProfitCurrency">New symbol profit currency (null if you want to keep previous value)</param>
            <param name="Precision">New symbol precision (null if you want to keep previous value)</param>
            <param name="ContractSize">New symbol contract size (null if you want to keep previous value)</param>         
            <param name="Description">New symbol description (null if you want to keep previous value)</param>
            <param name="IsPrimary">New symbol primary flag (null if you want to keep previous value)</param>
            <returns>Modify symbol request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.SymbolNewRequest.Create(System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Create new symbol request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="SymbolName">Desired symbol name</param>
            <param name="Security">Desired symbol security name</param>
            <param name="MarginCurrency">Desired symbol margin currency</param>
            <param name="ProfitCurrency">Desired symbol profit currency</param>
            <param name="Precision">Desired symbol precision</param>
            <param name="ContractSize">Desired symbol contract size</param>
            <param name="Description">Desired symbol description</param>
            <param name="IsPrimary">Desired symbol primary flag</param>
            <param name="ISIN">Desired symbol ISIN</param>
            <returns>New symbol request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ThrottlingChangeRequest.Create(System.Int32,TickTrader.BusinessObjects.ThrottlingProtocol,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Create modify throttling request with required parameters.
            </summary>
            <param name="ConfigVersion">Configuration version</param>
            <param name="protocol">Protocol</param>
            <param name="spa">Sessions per account</param>
            <param name="rps">Requests per session</param>
            <returns>New throttling request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ValidateMarginActivateRequest.Create(System.Int64,System.Int64,System.Nullable{System.Decimal},System.Nullable{System.Decimal},TickTrader.BusinessObjects.Requests.TradeRequestOptions)">
            <summary>
            Create validate margin activate request with required parameters.
            </summary>
            <param name="login">Account login of the target account</param>
            <param name="orderId">Order Id</param>
            <param name="amount">Amount</param>
            <param name="price">Price</param>
            <param name="options">Manager options</param>
            <returns>Validate margin activate request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ValidateMarginActivateRequest.CreateClient(System.Int64,System.Int64,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Create validate margin activate request with required parameters (client emulation).
            </summary>
            <param name="login">Account login of the target account</param>
            <param name="orderId">Order Id</param>
            <param name="amount">Amount</param>
            <param name="price">Price</param>
            <returns>Validate margin request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ValidateMarginRequest.Create(System.Int64,System.Nullable{System.Int64},TickTrader.BusinessObjects.OrderTypes,TickTrader.BusinessObjects.OrderSides,System.String,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},TickTrader.BusinessObjects.Requests.TradeRequestOptions)">
            <summary>
            Create validate margin request with required parameters.
            </summary>
            <param name="login">Account login of the target account</param>
            <param name="orderId">Order Id (optional)</param>
            <param name="type">Order type (market, limit, stop)</param>
            <param name="side">Order side (buy, sell)</param>
            <param name="symbol">Symbol name</param>
            <param name="amount">Amount</param>
            <param name="stopPrice">Stop price</param>
            <param name="price">Price</param>
            <param name="options">Manager options</param>
            <returns>Validate margin request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.ValidateMarginRequest.CreateClient(System.Int64,System.Nullable{System.Int64},TickTrader.BusinessObjects.OrderTypes,TickTrader.BusinessObjects.OrderSides,System.String,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Create validate margin request with required parameters (client emulation).
            </summary>
            <param name="login">Account login of the target account</param>
            <param name="orderId">Order Id (optional)</param>
            <param name="type">Order type (market, limit, stop)</param>
            <param name="side">Order side (buy, sell)</param>
            <param name="symbol">Symbol name</param>
            <param name="amount">Amount</param>
            <param name="stopPrice">Stop price</param>
            <param name="price">Price</param>
            <returns>Validate margin request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.WebApiTokenModifyRequest.Create(System.String,TickTrader.BusinessObjects.WebApiAuthenticationType,System.Nullable{TickTrader.BusinessObjects.WebApiRights})">
            <summary>
            Create modify Web API token request with required parameters.
            </summary>
            <param name="webApiId">Web API token Id to modify</param>
            <param name="authenticationType">New authentication type of the modified login (null if you want to keep previous value)</param>
            <param name="rights">New rights of the modified login (null if you want to keep previous value)</param>
            <returns>Modify Web API token request</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Requests.WebApiTokenNewRequest.Create(System.Int64,TickTrader.BusinessObjects.WebApiAuthenticationType,TickTrader.BusinessObjects.WebApiRights)">
            <summary>
            Create new Web API token request with required parameters.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="authenticationType">Authentication type</param>
            <param name="rights">Desired login rights</param>
            <returns>New Web API token request</returns>
        </member>
        <member name="P:TickTrader.BusinessObjects.EventArguments.PumpingUpdateOrderEventArgs.UpdateType">
            <summary>
            Update type can be the only PUMP_UPDATE_TRADE or PUMP_UPDATE_TRADE_LOCK or PUMP_UPDATE_TRADE_UNLOCK
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Level2Collection.#ctor(System.Collections.Generic.IEnumerable{TickTrader.BusinessObjects.Level2Value},System.Collections.Generic.IEnumerable{TickTrader.BusinessObjects.Level2Value})">
            <summary>
            Initialize level2 with a list of bids and asks
            </summary>
            <param name="bids">bids list</param>
            <param name="asks">asks list</param>
        </member>
        <member name="M:TickTrader.BusinessObjects.Level2Collection.#ctor(System.Collections.Generic.List{TickTrader.BusinessObjects.Level2Value},System.Int32,System.Int32,System.Int32)">
            <summary>
            Warning should be sorted in collection and proper offset set
            </summary>
            <param name="level2Container">asb/bid list sorted</param>
            <param name="offset">ask start</param>
            <param name="bidCount">bid count</param>
            <param name="askCount">ask count</param>
        </member>
        <member name="M:TickTrader.BusinessObjects.ManagerInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.ManagerRights.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.ManagerRightsDomain.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.ManagerRightsGroup.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.ManagerRightsSecurity.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:TickTrader.BusinessObjects.MatchingPatterns.Default">
            <summary>
            Default pattern for the Name of business objects
            Disallowed:
            1) White-spaces (leading, trailing or inside the string)
            2) All control characters including DEL(0x7F)
            3) Characters: ' ; = [ ]
            4) Suffix "_L"
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.MatchingPatterns.SymbolNameAndAlias">
            <summary>
            Match pattern for Symbol Name and Alias
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.MatchingPatterns.CurrencyTypeName">
            <summary>
            Match pattern for Currency Type Name
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.MatchingPatterns.CurrencyName">
            <summary>
            Match pattern for Currency Name
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.MatchingPatterns.SecurityName">
            <summary>
            Match pattern for Security Name
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.MatchingPatterns.GroupName">
            <summary>
            Match pattern for Group Name
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.MatchingPatterns.DomainName">
            <summary>
            Match pattern for Domain Name
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.MatchingPatterns.DomainLastTradesPrefix">
            <summary>
            Match pattern for Domain lasts prefix
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.SessionTypes">
            <summary>
            Session types
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.OrderTypes">
            <summary>
            Order types
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.OrderSides">
            <summary>
            Order sides
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.OrderStatuses">
            <summary>
            Order statuses
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.OrderExecutionOptions">
            <summary>
            Order execution options
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.Order">
            <summary>
            TODO Order
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.Order.IdLogFormat">
            <summary>
            Order Id format for logging
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Order.#ctor">
            <summary>
            Create new instance of the class
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Order.#ctor(TickTrader.BusinessObjects.IOrder)">
            <summary>
            Create a copy of existing IOrder.
            DO NOT use it directly. USE method Clone() instead.
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.RangeId">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.AccountId">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Symbol">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.SymbolAlias">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.SymbolAliasOrName">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.OrderId">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.ClientOrderId">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.ParentOrderId">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Price">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.StopPrice">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Side">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Type">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.InitialType">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Status">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Amount">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.RemainingAmount">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.HiddenAmount">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.AggrFillPrice">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.AverageFillPrice">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Created">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Modified">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Filled">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.PositionCreated">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.StopLoss">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.TakeProfit">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Profit">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Margin">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.UserComment">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.ManagerComment">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.UserTag">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.ManagerTag">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Magic">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Commission">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.AgentCommision">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Expired">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.ClosePrice">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.MarginRateInitial">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.MarginRateCurrent">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.OpenConversionRate">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.CloseConversionRate">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Version">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Options">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Properties">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Taxes">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.ReqOpenPrice">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.ReqOpenAmount">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.ClientApp">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.IsReducedOpenCommission">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.IsReducedCloseCommission">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.MaxVisibleAmount">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.CurrentPrice">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.TransferringCoefficient">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.SymbolPrecision">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.MarketBid">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.MarketAsk">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.MarketTime">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.FilledAmount">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.VisibleAmount">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.IsHidden">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.IsIceberg">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.TotalCommission">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.Activation">
            <summary>
            Pumping activation flag. Used only in client manager model.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Order.IsPending">
             <summary>
            
             </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Order.IsOptionSet(TickTrader.BusinessObjects.OrderExecutionOptions)">
             <summary>
            
             </summary>
             <param name="option"></param>
             <returns></returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Order.IsSameOrder(TickTrader.BusinessObjects.IOrder)">
            <summary>
            Check if there are major changes of the order
            </summary>
            <param name="order">New order with the same OrderId</param>
            <returns>Returns true if it has any major changes</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Order.Clone">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:TickTrader.BusinessObjects.OrderExtension">
             <summary>
            
             </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.MarketDataUpdateType.FullSnapshot">
            <summary>
            Each update has full snapshot of market data.
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.MarketDataUpdateType.Incremental">
            <summary>
            The first update has full data snaphot. All subsequent updates 
            contains only changed rows.
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.QuoteHistory.Engine.IHistoryEdit.Append(TickTrader.Common.Business.FeedTick)">
            <summary>
            Append Tick
            </summary>
            <param name="tick"></param>
        </member>
        <member name="M:TickTrader.BusinessObjects.QuoteHistory.Engine.IHistoryEdit.ImportTicks(TickTrader.BusinessObjects.QuoteHistory.Engine.IHistorySource,System.String,System.DateTime,System.DateTime,System.Boolean,System.Boolean,TickTrader.BusinessObjects.QuoteHistory.Engine.ImportMode,TickTrader.BusinessObjects.QuoteHistory.Engine.HistoryOperationProgressCallback,System.Threading.CancellationToken)">
            <summary>
            Import Ticks
            </summary>
            <param name="source"></param>
            <param name="symbol"></param>
            <param name="startImportTime"></param>
            <param name="finishImportTime"></param>
            <param name="isLevel2"></param>
            <param name="loadMetaData"></param>
            <param name="importRules"></param>
            <param name="progressCallBack"></param>
            <param name="token"></param>
        </member>
        <member name="M:TickTrader.BusinessObjects.QuoteHistory.Engine.IHistoryEdit.ImportBars(TickTrader.BusinessObjects.QuoteHistory.Engine.IHistorySource,System.String,System.DateTime,System.DateTime,TickTrader.BusinessObjects.Periodicity,TickTrader.Common.Business.FxPriceType,System.Boolean,TickTrader.BusinessObjects.QuoteHistory.Engine.ImportMode,TickTrader.BusinessObjects.QuoteHistory.Engine.HistoryOperationProgressCallback,System.Threading.CancellationToken)">
            <summary>
            Import Bars
            </summary>
            <param name="source"></param>
            <param name="symbol"></param>
            <param name="startImportTime"></param>
            <param name="finishImportTime"></param>
            <param name="barPeriodicity"></param>
            <param name="barsPriceType"></param>
            <param name="loadMetaData"></param>
            <param name="importRules"></param>
            <param name="progressCallBack"></param>
            <param name="token"></param>
        </member>
        <member name="M:TickTrader.BusinessObjects.QuoteHistory.Engine.IHistoryEdit.ImportBarsFromDiffBars(TickTrader.BusinessObjects.QuoteHistory.Engine.IHistorySource,System.String,System.DateTime,System.DateTime,TickTrader.BusinessObjects.Periodicity,TickTrader.Common.Business.FxPriceType,TickTrader.BusinessObjects.Periodicity,TickTrader.Common.Business.FxPriceType,System.Boolean,TickTrader.BusinessObjects.QuoteHistory.Engine.ImportMode,TickTrader.BusinessObjects.QuoteHistory.Engine.HistoryOperationProgressCallback)">
            <summary>
            Import Bars
            </summary>
            <param name="source"></param>
            <param name="symbol"></param>
            <param name="startImportTime"></param>
            <param name="finishImportTime"></param>
            <param name="sourceBarPeriodicity"></param>
            <param name="sourceBarsPriceType"></param>
            <param name="barPeriodicity"></param>
            <param name="barsPriceType"></param>
            <param name="loadMetaData"></param>
            <param name="importRules"></param>
            <param name="progressCallBack"></param>
        </member>
        <member name="M:TickTrader.BusinessObjects.QuoteHistory.Engine.IHistoryEdit.ClearSymbol(System.String,TickTrader.BusinessObjects.Periodicity[])">
            <summary>
            Clear history for particular periodicity for selected symbol
            </summary>
            <param name="symbol">selected symbol</param>
            <param name="periodicities">selected periodicity</param>
        </member>
        <member name="M:TickTrader.BusinessObjects.QuoteHistory.Engine.IHistoryEdit.Clear(TickTrader.BusinessObjects.Periodicity[])">
            <summary>
            Clear history for particular periodicity for all sknown symbols
            </summary>
            <param name="periodicities">selected periodicity</param>
        </member>
        <member name="M:TickTrader.BusinessObjects.QuoteHistory.Engine.IHistoryEdit.ClearSymbolCache(System.String)">
            <summary>
            Clear bar's history cache for particular symbol
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:TickTrader.BusinessObjects.QuoteHistory.Engine.IHistoryEdit.ClearCache">
            <summary>
            Clear bar's cache for all known symbols
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.UpstreamTypes">
            <summary>
            QuoteHistory upstream modes
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.QuoteHistory.MarketHistoryFile.ExtensionData">
            <summary>
            Gets or sets the structure that contains extra data.
            </summary>
            <returns>
            An <see cref="T:System.Runtime.Serialization.ExtensionDataObject"/> that contains data that is not recognized as belonging to the data contract.
            </returns>
        </member>
        <member name="T:TickTrader.BusinessObjects.OffTimeDisabledFeatures">
            <summary>
            Modes that determine what will be disabled on active off-time rule
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.TradingSessionStatus">
            <summary>
            Trading session status
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.TradingSessionStatus.Closed">
            <summary>Trading session is closed</summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.TradingSessionStatus.Opened">
            <summary>Trading session is opened</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.StreamingDirections">
            <summary>
            Streaming directions
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.MarginCalculationModes">
            <summary>
            Margin calculation modes
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.ProfitCalculationModes">
            <summary>
            Profit calculation modes
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.QuotesWriteModes">
            <summary>
            Quotes write modes
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.SymbolInfo">
            <summary>
            Represents a symbol
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.Id">
            <summary>
            Gets or sets a unique numeric ID of Symbol.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.Symbol">
            <summary>
            Gets or sets the unique string ID of Symbol - SymbolId (it is unchangeable in DB).
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.Security">
            <summary>
            Gets or sets the name of security of the symbol.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.Precision">
            <summary>
            Gets or sets the precision of the symbol.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.TradeIsAllowed">
            <summary>
            Gets or sets whether trade is allowed for the symbol or not.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.MarginMode">
            <summary>
            Gets or sets the mode of margin calculation.
            Supported values:
              Forex
              CFD
              Futures
              CFD_Index
              CFD_Leverage
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.ProfitMode">
            <summary>
            Gets or sets the mode of profit calculation.
            Supported values:
              Forex
              CFD
              Futures
              CFD_Index
              CFD_Leverage
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.QuotesWriteMode">
            <summary>
            Gets or sets the mode of writing quotes.
            Supported values:
              None = 0x00
              Bars = 0x01
              Ticks = 0x02
              TicksLevel2 = 0x04
              TicksVWAP = 0x08
              BarsAndTicks = Bars|Ticks
              All = TicksLevel2|BarsAndTicks
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.ContractSizeFractional">
            <summary>
            Gets or sets the size of contract fractional.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.MarginHedged">
            <summary>
            Gets or sets the margin ratio, which is taken for hedged positions.
            Supported values: [0.0, 1.0].
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.MarginFactorFractional">
            <summary>
            Gets or sets the margin ratio fractional.
            Supported values: [0.0, 1.0].
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.MarginStrongMode">
            <summary>
            Gets or sets whether margin is calculated in static mode or in dynamic mode.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.MarginCurrency">
            <summary>
            Gets or sets the margin currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.MarginCurrencyId">
            <summary>
            Gets or sets the margin currency ID.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.MarginCurrencyPrecision">
            <summary>
            Gets or sets the precision of margin currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.MarginCurrencySortOrder">
            <summary>
            Gets or sets the priority of margin currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.ProfitCurrency">
            <summary>
            Gets or sets the profit currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.ProfitCurrencyId">
            <summary>
            Gets or sets the profit currency ID.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.ProfitCurrencyPrecision">
            <summary>
            Gets or sets the precision of profit currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.ProfitCurrencySortOrder">
            <summary>
            Gets or sets the priority of profit currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.ColorRef">
            <summary>
            Gets or sets the color of the symbol.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.Description">
            <summary>
            Gets or sets the description of the symbol.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.SwapEnabled">
            <summary>
            Gets or sets whether swaps is enabled for the symbol.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.SwapSizeShort">
            <summary>
            Gets or sets the size of swap for short positions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.SwapSizeLong">
            <summary>
            Gets or sets the size of swap for long positions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.IsPrimary">
            <summary>
            Gets or sets whether the symbol is primary or not.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.SortOrder">
            <summary>
            Gets or sets the priority of the symbol.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.IsQuotesFilteringDisabled">
            <summary>
            Gets or sets whether quotes filtering is disabled for the symbol or not.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.Schedule">
            <summary>
            Gets or sets schedule
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.DefaultSlippage">
            <summary>
            Default Slippage
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.StopOrderMarginReduction">
            <summary>
            Margin reduction for Stop orders
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.HiddenLimitOrderMarginReduction">
            <summary>
            Margin reduction for Stop orders
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.SwapType">
            <summary>
            Gets or sets swap type
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.TripleSwapDay">
            <summary>
            Gets or sets a day of week (from Monday to Friday) when 3-days swaps are charged.
            If value is 0 3-days swaps are disabled.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.QuotesBackupMode">
            <summary>
            Gets or sets the mode of backuped quotes.
            Supported values:
              None = 0x00
              Bars = 0x01
              Ticks = 0x02
              TicksLevel2 = 0x04
              TicksVWAP = 0x08
              BarsAndTicks = Bars|Ticks
              All = TicksLevel2|BarsAndTicks
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolInfo.Name">
            <summary>
            Gets or sets the unique Name of symbol - SymbolName (it can be changed in DB).
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.SymbolInfo.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:TickTrader.BusinessObjects.SymbolInfo.LastSymbolPostfix">
            <summary>
             Postfix used to make Last symbols
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.SymbolInfo.IsLast">
            <summary>
             return true if this Symbol is Last symbol
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.SymbolInfo.IsLast(System.String)">
            <summary>
             return true if symbolName is Last symbol
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.SymbolInfo.MakeLast(System.String)">
            <summary>
             return Last symbol name for symbolName
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.SymbolInfo.MakeLast(System.String,System.String)">
            <summary>
             return Last symbol name for symbolName with prefix
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.GroupSymbolInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.GroupSymbolInfo.#ctor">
            <summary>
            Initializes a new instance of GroupSymbolInfo class.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.MaxTradeAmount">
            <summary>
            Gets or sets the maximum trade amount in lots.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.MinTradeAmount">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.TradeAmountStep">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.IsTradeAllowed">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.CommissionType">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.CommissionChargeType">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.LimitsCommission">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.Commission">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.GroupSortOrder">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.SecurityDescription">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.SecurityName">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.MinCommission">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.MinCommissionCurrency">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.GroupSymbolInfo.Rebate">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.ServerSymbolInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.ServerSymbolInfo.SymbolOriginal">
            <summary>
            Gets or sets the TODO
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.SymbolSecurity">
            <summary>
            Represents a security of a symbol
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolSecurity.Id">
            <summary>
            Gets or sets the Id of security.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolSecurity.Name">
            <summary>
            Gets or sets the name of security.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolSecurity.Description">
            <summary>
            Gets or sets the description of security.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolSecurity.SortOrder">
            <summary>
            Gets or sets the priority of security.
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.SymbolSecurity.Clone">
            <summary>
            Creates new reference of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TickTrader.BusinessObjects.SymbolTick">
            <summary>
            Represents a tick of a symbol
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolTick.Symbol">
            <summary>
            Gets or sets the name of symbol.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolTick.Time">
            <summary>
            Gets or sets the time of tick.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolTick.Bid">
            <summary>
            Gets or sets the bid price.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolTick.Ask">
            <summary>
            Gets or sets the ask price.
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.SymbolTick.Level2">
            <summary>
            Level 2 records
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.SymbolTick.LastProcessedTime">
            <summary>
            The last time at which a tick has been processed.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolTick.IndicativeTick">
            <summary>
            Indicative tick flag
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolTick.TickType">
            <summary>
            Tick type info
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.SymbolTick.Index">
            <summary>
            Tick index
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.SymbolTick.Clone">
            <summary>
            Creates a new reference of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.SymbolTick.Convert(TickTrader.Common.Business.FeedTick)">
            <summary>
            Converts a feed tick to a symbol tick
            </summary>
            <param name="tick">Feed tick</param>
            <returns>Symbol tick</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.SymbolTick.Convert(TickTrader.Common.Business.FeedTick,System.Int32)">
            <summary>
            Converts feed tick to a symbol tick with specified depth of Level2.
            </summary>
            <param name="tick">Feed tick</param>
            <param name="depth">Depth of Level2</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.SymbolTick.Convert(TickTrader.BusinessObjects.SymbolTick)">
            <summary>
            Converts a symbol tick to a feed tick
            </summary>
            <param name="tick">Symbol tick</param>
            <returns>Feed tick</returns>
        </member>
        <member name="P:TickTrader.BusinessObjects.Tasks.AutomaticArchiveAccountsTaskInfo.Domains">
            <summary>
            Domains wildcard
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Tasks.AutomaticArchiveAccountsTaskInfo.Groups">
            <summary>
            Groups wildcard
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Tasks.AutomaticArchiveAccountsTaskInfo.LoginInactivityPeriod">
            <summary>
            Login inactivity period in days after which an account is archived. Default 90 days.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Tasks.AutomaticArchiveAccountsTaskInfo.IsEmptyBalance">
            <summary>
            Archive an account if it has zero balance or assets
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Tasks.AutomaticArchiveAccountsTaskInfo.IsEmptyTrades">
            <summary>
            Archive an account if it does not have orders and positions
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Tasks.RemoveOutdatedUpdatesTaskInfo.ServiceTypes">
            <summary>
            List of service (module) types for which outdated updates are removed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.Tasks.RemoveOutdatedUpdatesTaskInfo.KeepLatestUpdates">
            <summary>
            Number of the latest updates to keep
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.Tasks.FileNotLockedTrigger">
            <summary>
            This trigger allows task start if file not locked
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Tasks.FileNotLockedTrigger.OnSchedule(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Checking trigger to fire. "now" used ONLY for test purpose!
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.Tasks.ModuleStartTrigger">
            <summary>
            This trigger allows Scheduled task start on module start
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.Tasks.ScheduleTrigger">
            <summary>
            This trigger allows task start by schedule
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Tasks.ScheduleTrigger.OnSchedule(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Checking scheduled trigger to fire. "now" used ONLY for test purpose!
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.Tasks.TaskCanceledTrigger">
            <summary>
            This trigger allows task to start after another task canceled.
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.Tasks.TaskEndedTrigger">
            <summary>
            This trigger allows task to start after another task ended with any result.
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.Tasks.TaskFaultedTrigger">
            <summary>
            This trigger allows task to start after another task faulted.
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.Tasks.TaskSucceededTrigger">
            <summary>
            This trigger allows task to start after another task succeeded.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.QHRestoreTaskInfo.DateTimeFrom">
            <summary>
            Start import period 
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.QHRestoreTaskInfo.DateTimeTo">
            <summary>
            End import period 
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.QHRestoreTaskInfo.BarsDatabasePath">
            <summary>
            Path to leveldb database with Bars history (not null)
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.QHRestoreTaskInfo.TicksDatabasePath">
            <summary>
            Path to leveldb database with Ticks history (may be null)
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.QHRestoreTaskInfo.TicksLevel2DatabasePath">
            <summary>
            Path to leveldb database with TicksLeve2 history (may be null)
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.QHRestoreTaskInfo.TicksVWAPDatabasePath">
            <summary>
            Path to leveldb database with TicksVWAP history (may be null)
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.QHRestoreTaskInfo.Symbols">
            <summary>
            Symbols to import (empty for all symbols)
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.QHRestoreTaskInfo.ImportMode">
            <summary>
            History import mode
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.QHRestoreTaskInfo.OnlyLastSymbols">
            <summary>
            Import only lasts symbols; Only affects tick history
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.QHRestoreTaskInfo.SymbolMapping">
            <summary>
            Symbols mapping (Key: TTS name; Value: source name )
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.QHRestoreTaskInfo.RestoreMode">
            <summary>
            Periodicities needed to restore
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.TickTypes">
            <summary>
            Options for indicative tick.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeConfiguration.RolloverTime">
            <summary>
            Rollover Time. The date will be ignored.
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.TradeReport">
            <summary>
            Represents a trade report
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.TradeReport.#cctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.TradeReport.#ctor">
            <summary>
            Initializes a new instance of the TradeReport class
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.TradeReport.#ctor(TickTrader.BusinessObjects.ITradeReport)">
            <summary>
            Initializes a new instance of the TradeReport class to the specified trade report.
            </summary>
            <param name="original"></param>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Id">
            <summary>
            Unique identifier for this report entity.
            Not user-friendly, must not be shown in user interface. Use combination of OrderId + OrderActionNo
            to show user-friendly unique identifier.
            Format of this identifier is subject to change. Must not be parsed.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Domain">
            <summary>
            Account Domain.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Group">
            <summary>
            Account Group.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderId">
            <summary>
            Unique identifier of corresponding order. Every trade report matches an order.
            A single order can match multiple trade reports.
            User-friendly, can be shown in user interface.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderActionNo">
            <summary>
            Sequential number of trade reports within given order. Together with OrderId can form
            user-friendly unique identifier of the report entity.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ClientOrderId">
            <summary>
            Unique (but not guaranteed) identifier of an order supplied by client on order opening.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.TrType">
            <summary>
            Type of the transaction described by this report entity.
            Supported:
              OrderCanceled (all account types)
              OrderExpired (all account types)
              OrderFilled (Net and Cash)
              PositionClosed (Gross only)
              Balance (all account types)
              Credit (all account types)
              OrderActivated (all account types)
             Not supported by now:
              OrderOpened
              PositionOpened
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.TrReason">
            <summary>
            This field describes the initiator or cause to start described transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.TrTime">
            <summary>
            Time of described transaction. It means time of report creation.
            E.g.: In case of OrderCanceled transaction it is time of order cancelation.
            In case of OrderFilled transaction it is time of order fill. And so on...
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Side">
            <summary>
            Side of described order. Buy or Sell.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderType">
             <summary>
             Type of described order on the moment of report creation.
             Null in case of Balance and Credit transactions.
            
             Example for Gross account: limit order is fully filled and was transformed into order of type Position.
             When such order is closed (PositionClosed) value of this field will be set to Position (not Limit).
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ParentOrderType">
            <summary>
            Type of described order on the moment of order creation.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderCreated">
            <summary>
            Time of order creation.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderModified">
            <summary>
            Time of last modification of described order.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Symbol">
            <summary>
            Name Id of instrument of described order.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SymbolAlias">
            <summary>
            Alias of instrument which was used to create described order.
            Null in case of no alias was used.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SymbolAliasOrName">
            <summary>
            Gets SymbolAlias if it is not null, otherwise Symbol
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SymbolFk">
            <summary>
            Db Id of instrument
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderAmount">
            <summary>
            The amount of described order specified (requested) on order opening.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderRemainingAmount">
            <summary>
            The amount remaining to fill after described transaction.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderHiddenAmount">
            <summary>
            Hidden amount of the order.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderLastFillAmount">
            <summary>
            The amount which was filled during described transaction.
            Null in case of OrderCanceled, OrderExpired, Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderPrice">
             <summary>
             The price of order on the moment of the order fill.
             Mandatory for Limit/StopLimit orders.
             Can be null for Market order if price was not specified in order request.
             Null in case of Balance and Credit transactions.
            
             Example:
             1) Open order #101 with amount 1L and price 1.45
             2) Modify order #101: set price 1.44
             3) Partially fill order #101 for 0.5L. Report #101/1 is created with OrderPrice=1.44
             4) Modify order #101: set price 1.46
             5) Fill order #101 for 0.5L. Report #101/2 is created woth OrderPrice=1.46
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderStopPrice">
            <summary>
            The price of order on the moment of the order fill.
            Mandatory for Stop/StopLimit orders.
            Null in case of Market and Limit orders.
            Null in case of Balance and Credit transactions.
            <see cref="P:TickTrader.BusinessObjects.TradeReport.OrderPrice"/> for example.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderFillPrice">
            <summary>
            Price of the order fill described by this report.
            Null in case of OrderCanceled, OrderExpired, Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReqOpenPrice">
            <summary>
            The price specified on order opening.
            Not affected by consequent order modifications.
            Can be null for Market order if price was not specified in order request.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReqOpenAmount">
            <summary>
            The amount specified on order opening.
            Not affected by consequent order modifications.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReqClosePrice">
            <summary>
            The price specified on order closing.
            Not affected by consequent order modifications.
            Can be null for Market order if price was not specified in order request.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReqCloseAmount">
            <summary>
            The amount specified on order closing.
            Not affected by consequent order modifications.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ClientApp">
            <summary>
            Client application specific identifier
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.RequestTime">
            <summary>
            Time of initial order request.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PosId">
             <summary>
             Unique identifier of corresponding position.
             Valid only for PositionClosed (Gross) reports. Null in all other cases.
             Can be equal OrderId in case of full order fill.
            
             Example for Gross account:
             1) Open limit order #101 with amount 1L
             2) Partially fill order #101 for 0.5L. Position #102 with amount 0.5L is created.
             3) Fill order #101 for 0.5L. Order #101 transforms into position #101 with amount 0.5L.
             4) Close position #102. Report #102/1 is created with OrderId=#101 and PosId=#102
             5) Close position #101. Report #101/1 is created with OrderId=#101 and PosId=#101
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PosById">
            <summary>
            Unique identifier of a position was used to close by.
            Valid only for PositionClosed (Gross) reports. Null in all other cases
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PosAmount">
            <summary>
            Amount of created position.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PosRemainingAmount">
            <summary>
            In case of PositionClosed (Gross account): amount remaining to close after described transaction.
            In case of OrderFilled (Net account): amount of remaining position after described transaction.
            Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PosRemainingSide">
            <summary>
            Side of remaining position after described transaction.
            Valid only for OrderFilled (Net account) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PosRemainingPrice">
            <summary>
            Price of remaining position after described transaction.
            Valid only for OrderFilled (Net) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PosLastAmount">
            <summary>
            Amount which was closed during described PositionClosed transaction.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PosOpenPrice">
            <summary>
            Price of created position.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PosOpened">
            <summary>
            Time of position creation.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PosClosePrice">
            <summary>
            Price which was used to close position during described PositionClosed transaction.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PosClosed">
             <summary>
             Time of position closing.
             Valid only for PositionClosed (Gross) reports. Null in all other cases.
            
             AH: This field seems superfluous because it is equal to TrTime in all cases.
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Commission">
            <summary>
            Amount of commission which was charged during described transaction. It means commision charged from account balance. Not the commision
            assigned to order entity.
            Valid only for PositionClosed (Gross) and OrderFilled (Net, Cash) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.AgentCommission">
            <summary>
            Amount of Agent Commission which was charged during described transaction. It means commision charged from account balance. Not the commision
            assigned to order entity.
            Valid only for PositionClosed (Gross) and OrderFilled (Net, Cash) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Swap">
            <summary>
            Amount of Swap which was charged during described transaction. It means Swap charged from account balance. Not the Swap
            assigned to order entity.
            Valid only for PositionClosed (Gross) and OrderFilled (Net) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ProfitLoss">
            <summary>
            Amount of profit/loss as a result of position closing. Does not include commission, swap and other charges.
            Valid only for PositionClosed (Gross) and OrderFilled (Net, Cash) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Balance">
            <summary>
            Value of account balance after described transaction.
            Null in case of Cash accounts.
            Can be Null in case of OrderCanceled and OrderExpired transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.BalanceMovement">
            <summary>
            Amount on which balance was changed during described transaction.
            Equals ProfitLoss + charges in case of position closing.
            Equals amount of deposit/withdrawal in case of Balance/Credit transactions.
            Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.BalanceCurrency">
            <summary>
            Currency of account balance.
            Valid only if Balance and/or BalanceMovement fields are not empty.
            Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PlatformComment">
            <summary>
            Comment generated by Platform.
            Can be null.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.UserComment">
            <summary>
            Comment assigned by user to the order/position as it was at the moment of described transaction.
            Note: Comment can be changed by user during order lifetime.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ManagerComment">
            <summary>
            Comment assigned by manager to the order/position as it was at the moment of described transaction.
            Note: Comment can be changed by manager during order lifetime.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.UserTag">
            <summary>
            Tag (literal token) assigned by user to the order/position as it was at the moment of described transaction.
            Note: tag can be changed by user during order lifetime.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ManagerTag">
            <summary>
            Tag (literal token) assigned by manager to the order/position as it was at the moment of described transaction.
            Note: tag can be changed by manager during order lifetime.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Magic">
            <summary>
            Magic number (numeric token) assigned by user to the order/position as it was at the moment of described transaction.
            Note: magic number can be changed by user during order lifetime.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.MarginRateInitial">
             <summary>
             Value of margin as it was on order opening.
             Null in case of Cash accounts.
             Null in case of Balance and Credit transactions.
            
             AH: 'Rate' in name is misleading. Do not consider it as a conversion rate.
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.StopLoss">
            <summary>
            StopLoss parameter of the order as it was at the moment of described transaction.
            Valid only for Gross accounts. Null in case of other account types.
            Null in case of Balance and Credit transactions.
            Null if no StopLoss parameter was specified.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.TakeProfit">
            <summary>
            TakeProfit parameter of the order as it was at the moment of described transaction.
            Valid only for Gross accounts. Null in case of other account types.
            Null in case of Balance and Credit transactions.
            Null if no TakeProfit parameter was specified.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OpenConversionRate">
            <summary>
            Rate which was used to convert from margin currency to balance currency during order opening.
            Null in case of Cash accounts.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.CloseConversionRate">
            <summary>
            Rate which was used to convert from profit currency to balance currency during position closing.
            Valid only for PositionClosed (Gross) and OrderFilled (Net) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Expired">
            <summary>
            Time of order expiration as it was at the moment of described transaction.
            Note: Expiration time can be changed during order lifetime.
            Null if no expiration was set for described order.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.PosModified">
            <summary>
            Time of described position modification.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ProfitToUsdConversionRate">
            <summary>
            Conversion rate to convert profit to USD
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.UsdToProfitConversionRate">
            <summary>
            Conversion rate to convert USD to profit
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.BalanceToUsdConversionRate">
            <summary>
            Conversion rate to convert balance currency to USD
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.UsdToBalanceConversionRate">
            <summary>
            Conversion rate to convert USD to balance currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.MarginCurrencyToUsdConversionRate">
            <summary>
            Conversion rate to convert margin currency to USD
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.UsdToMarginCurrencyConversionRate">
            <summary>
            Conversion rate to convert USD to margin currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.MarginCurrency">
            <summary>
            Margin currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ProfitCurrencyToUsdConversionRate">
            <summary>
            Conversion rate to convert profit currency to USD
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.UsdToProfitCurrencyConversionRate">
            <summary>
            Conversion rate to convert USD to profit currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ProfitCurrency">
            <summary>
            Profit currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SrcAssetToUsdConversionRate">
            <summary>
            Conversion rate to convert source asset currency to USD
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.UsdToSrcAssetConversionRate">
            <summary>
            Conversion rate to convert USD to source asset currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.DstAssetToUsdConversionRate">
            <summary>
            Conversion rate to convert destination asset currency to USD
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.UsdToDstAssetConversionRate">
            <summary>
            Conversion rate to convert USD to destination asset currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SrcAssetCurrency">
            <summary>
            Source asset currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SrcAssetAmount">
            <summary>
            Source asset final amount.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SrcAssetMovement">
            <summary>
            Amount on which source asset was changed during described transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.DstAssetCurrency">
            <summary>
            Destination asset currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.DstAssetAmount">
            <summary>
            Destination asset final amount.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.DstAssetMovement">
            <summary>
            Amount on which destinaction asset was changed during described transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Options">
            <summary>
            Order execution options
            Indicates whether IoC
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.OrderMaxVisibleAmount">
            <summary>
            Max visible amount of the order.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReducedOpenCommissionFlag">
            <summary>
            True if Open Commission was reduced
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReducedCloseCommissionFlag">
            <summary>
            True if Close Commission was reduced
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SymbolPrecision">
            <summary>
            Symbol percision.
            Null in case of no symbol was used.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.MinCommissionCurrency">
            <summary>
            Minimal Commission Currency
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.MinCommissionConversionRate">
            <summary>
            Minimal Commission Conversion Rate
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.TransferringCoefficient">
            <summary>
            Transfering Coefficient
            Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.TransferMoneyAccount">
            <summary>
            Source or destination Account for TransferMoney
            Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Slippage">
            <summary>
            Slippage
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ProfitToReportConversionRate">
            <summary>
            Conversion rate to convert profit to report currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReportToProfitConversionRate">
            <summary>
            Conversion rate to convert report currency to profit
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.BalanceToReportConversionRate">
            <summary>
            Conversion rate to convert balance currency to report currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReportToBalanceConversionRate">
            <summary>
            Conversion rate to convert report currency to balance currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SrcAssetToReportConversionRate">
            <summary>
            Conversion rate to convert source asset currency to report currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReportToSrcAssetConversionRate">
            <summary>
            Conversion rate to convert report currency to source asset currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.DstAssetToReportConversionRate">
            <summary>
            Conversion rate to convert destination asset currency to report currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReportToDstAssetConversionRate">
            <summary>
            Conversion rate to convert report currency to destination asset currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.MarginCurrencyToReportConversionRate">
            <summary>
            Conversion rate to convert margin currency to report currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReportToMarginCurrencyConversionRate">
            <summary>
            Conversion rate to convert report currency to margin currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ProfitCurrencyToReportConversionRate">
            <summary>
            Conversion rate to convert profit currency to report currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReportToProfitCurrencyConversionRate">
            <summary>
            Conversion rate to convert report currency to profit currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ReportCurrency">
            <summary>
            Report Currency
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.TokenCommissionCurrency">
            <summary>
            Token Commission Currency
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.TokenCommissionCurrencyDiscount">
            <summary>
            Token Commission Currency Discount
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.TokenCommissionConversionRate">
            <summary>
            Token Commission Conversion Rate
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.CommissionCurrency">
            <summary>
            Commission Currency
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SplitRatio">
            <summary>
            Split Ratio
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.DividendGrossRate">
            <summary>
            Dividend Gross Rate
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.DividendToBalanceConversionRate">
            <summary>
            Dividend To Balance Conversion Rate
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Taxes">
            <summary>
            Taxes
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SymbolNormalized">
            <summary>
            Normalized name of Symbol used only on FIX protocol
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.TaxValue">
            <summary>
            Tax value at the time of dividend payment
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.Rebate">
            <summary>
            Rebate is an amount of money in RebateCurrency that is paid back
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.RebateCurrency">
            <summary>
            The currency of Rebate
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.RelatedOrderId">
            <summary>
            Related order
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.ParentOrderId">
            <summary>
            Related order
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.MarginCurrencyToBalanceConversionRate">
            <summary>
            Conversion rate to convert margin currency to balance currency
            Null if conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SymbolName">
            <summary>
            Name of instrument which was used to create described order.
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SymbolFkInt">
            <summary>
            Db Id of instrument
            Null in case of Balance and Credit transactions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.IsIoC">
            <summary>
            Is IoC flag
            Determines whether order has IoC option
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.IsMarketWithSlippage">
            <summary>
            Is Market with slippage flag
            Determines whether order has "MarketWithSlippage" option
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.IsFillOrKill">
            <summary>
            Is Fill Or Kill flag
            Determines whether order has "FillOrKill" option
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.IsOneCancelsTheOther">
            <summary>
            Is One Cancels The Other flag
            Determines whether order has "OneCancelsTheOther" option
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.IsHiddenIceberg">
            <summary>
            Is HiddenIceberg flag
            Determines whether order has HiddenIceberg option
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.TradeReport.SideString">
            <summary>
            Gets value of Side as string. It is used only by Web site.
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.TradeTransTypes">
            <summary>
            Trade transaction types
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.TradeTransReasons">
            <summary>
            Trade transaction reasons
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Versioning.BaseSpec.SupportsProperty(System.Type,System.String)">
            <summary>
            Check that property supports in current cluster model version
            </summary>
            <param name="type">Type</param>
            <param name="propName">Property name</param>
            <returns>true if supports, otherwise false</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Versioning.BaseSpec.SupportsProperty``1(System.String)">
            <summary>
            Check that property supports in current cluster model version
            </summary>
            <param name="propName">Property name</param>
            <returns>true if supports, otherwise false</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Versioning.BaseSpec.SupportsField(System.Type,System.String)">
            <summary>
            Check that field supports in current cluster model version
            </summary>
            <param name="type">Type</param>
            <param name="fieldName">Field name</param>
            <returns>true if supports, otherwise false</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Versioning.BaseSpec.SupportsField``1(System.String)">
            <summary>
            Check that field supports in current cluster model version
            </summary>
            <param name="fieldName">Field name</param>
            <returns>true if supports, otherwise false</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Versioning.BaseSpec.SupportsMethod(System.Type,System.String)">
            <summary>
            Check that method supports in current cluster model version
            </summary>
            <param name="type">Type</param>
            <param name="methodName">Method name</param>
            <returns>true if supports, otherwise false</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Versioning.BaseSpec.SupportsMethod``1(System.String)">
            <summary>
            Check that method supports in current cluster model version
            </summary>
            <param name="methodName">Method name</param>
            <returns>true if supports, otherwise false</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Versioning.BaseSpec.GetSupportSet``1">
            <summary>
            Get Enum SupportSet in current manager model version
            </summary>
            <returns>Enum SupportSet</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Versioning.BaseSpec.Supports``1">
            <summary>
            Check that class supports in current manager model version
            </summary>
            <returns>true if supports, otherwise false</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Versioning.BaseSpec.Supports(System.Object)">
            <summary>
            Check that object supports in current manager model version
            </summary>
            <param name="obj">object to check</param>
            <returns>true if supports, otherwise false</returns>
        </member>
        <member name="M:TickTrader.BusinessObjects.Versioning.BaseSpec.SupportsType(System.Type)">
            <summary>
            Check that type supports in current manager model version
            </summary>
            <returns>true if supports, otherwise false</returns>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount">
            <summary>
            Account information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Id">
            <summary>Account Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.AccountingType">
            <summary>Accounting type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Name">
            <summary>Name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.FirstName">
            <summary>FirstName</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.LastName">
            <summary>LastName</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Phone">
            <summary>Phone</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Country">
            <summary>Country</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.State">
            <summary>ModelState</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.City">
            <summary>City</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Address">
            <summary>Address</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.ZipCode">
            <summary>ZipCode</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.SocialSecurityNumber">
            <summary>Social Security Number</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Email">
            <summary>Email</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Comment">
            <summary>Comment</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Registered">
            <summary>Registered timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Modified">
            <summary>Modified timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.IsArchived">
            <summary>Is account archived?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.IsBlocked">
            <summary>Is account blocked?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.IsReadonly">
            <summary>Is account read only?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.IsValid">
            <summary>Is account in valid state?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.IsWebApiEnabled">
            <summary>Is Web API enabled for account?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Leverage">
            <summary>Leverage</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Balance">
            <summary>Balance amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.BalanceCurrency">
            <summary>Balance currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Profit">
            <summary>Profit</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Commission">
            <summary>Commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.AgentCommission">
            <summary>AgentCommission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Swap">
            <summary>Swap</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Rebate">
            <summary>Rebate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Equity">
            <summary>Equity</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Margin">
            <summary>Margin</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.MarginLevel">
            <summary>Margin level</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.MarginCallLevel">
            <summary>Margin call level</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.StopOutLevel">
            <summary>Stop out level</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.ReportCurrency">
            <summary>Report currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.TokenCommissionCurrency">
            <summary>Token commission currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.TokenCommissionCurrencyDiscount">
            <summary>Token commission currency discount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.IsTokenCommissionEnabled">
            <summary>Is token commission enabled?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.MaxOverdraftAmount">
            <summary>Max Overdraft Amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.OverdraftCurrency">
            <summary>Overdraft Currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.UsedOverdraftAmount">
            <summary>Used Overdraft Amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.Throttling">
            <summary>Throttling</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.IsLongOnly">
            <summary>Is Long Only</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccount.#ctor(TickTrader.BusinessObjects.AccountInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountNotification">
            <summary>
            Account notification
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountNotification.Account">
            <summary>Account</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountNotification.Code">
            <summary>Notification code</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountNotification.Severity">
            <summary>Notification severity</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountNotification.Message">
            <summary>Notification message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountNotification.BalanceFull">
            <summary>Account full balance</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountNotification.BalanceDeposit">
            <summary>Account balance deposit</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountNotification.BalanceCurrency">
            <summary>Account balance currency</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountNotification.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountNotification.#ctor(TickTrader.BusinessObjects.Requests.ClientNotification)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiAsset">
            <summary>
            Asset information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAsset.Currency">
            <summary>Asset currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAsset.Amount">
            <summary>Asset amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAsset.FreeAmount">
            <summary>Asset free amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAsset.LockedAmount">
            <summary>Asset locked amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAsset.CurrencyToUsdConversionRate">
            <summary>Asset currency to USD conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAsset.UsdToCurrencyConversionRate">
            <summary>Asset USD to currency conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAsset.CurrencyToReportConversionRate">
            <summary>Asset currency to report currency conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAsset.ReportToCurrencyConversionRate">
            <summary>Asset report currency to currency conversion rate</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiAsset.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiAsset.#ctor(TickTrader.BusinessObjects.AssetInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiAsset.#ctor(TickTrader.BusinessObjects.AssetSnapshot)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.CmcAsset">
            <summary>
            Detailed summary for each currency available on the exchange.
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.CoinGeckoPair">
            <summary>
            Detailed summary for each currency available on the exchange.
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrency">
            <summary>
            Currency information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrency.Name">
            <summary>Currency name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrency.Precision">
            <summary>Currency precision (digits after decimal point)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrency.Description">
            <summary>Currency description</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrency.Type">
            <summary>Currency type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrency.Tax">
            <summary>Currency tax</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrency.DefaultStockFee">
            <summary>Currency default stock fee</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrency.ExposureSwapSize">
            <summary>Currency exposure swap size</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrency.InterestRate">
            <summary>Currency interest rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrency.InterestMarkup">
            <summary>Currency interest markup</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrency.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrency.#ctor(TickTrader.BusinessObjects.CurrencyInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrencyType">
            <summary>
            Currency type information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrencyType.Name">
            <summary>Type name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrencyType.Description">
            <summary>Type description</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrencyType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiCurrencyType.#ctor(TickTrader.BusinessObjects.CurrencyTypeInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot">
            <summary>
            Daily account snapshot record
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.AccountId">
            <summary>Account snapshot Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Timestamp">
            <summary>Account snapshot timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Group">
            <summary>Account snapshot group</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.AccountingType">
            <summary>Account snapshot type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Leverage">
            <summary>Account snapshot leverage</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Balance">
            <summary>Account snapshot balance</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.BalanceCurrency">
            <summary>Account snapshot balance currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Profit">
            <summary>Account snapshot profit</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Commission">
            <summary>Account snapshot commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.AgentCommission">
            <summary>Account snapshot agent commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.TotalCommission">
            <summary>Account snapshot total commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Swap">
            <summary>Account snapshot swap</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Rebate">
            <summary>Account snapshot rebate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.TotalProfitLoss">
            <summary>Account snapshot total profit loss</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Equity">
            <summary>Account snapshot equity</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Margin">
            <summary>Account snapshot margin</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.MarginLevel">
            <summary>Account snapshot margin level</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.IsBlocked">
            <summary>Account snapshot blocked flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.IsReadonly">
            <summary>Account snapshot readonly flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.IsValid">
            <summary>Account snapshot valid flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Assets">
            <summary>Account snapshot assets</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Positions">
            <summary>Account snapshot positions</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.BalanceToUsdConversionRate">
            <summary>Account snapshot balance to USD conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.UsdToBalanceConversionRate">
            <summary>Account snapshot USD to balance conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.ProfitToUsdConversionRate">
            <summary>Account snapshot profit to USD conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.UsdToProfitConversionRate">
            <summary>Account snapshot USD to profit conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.BalanceToReportConversionRate">
            <summary>Account snapshot balance to report currency conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.ReportToBalanceConversionRate">
            <summary>Account snapshot report currency to balance conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.ProfitToReportConversionRate">
            <summary>Account snapshot profit to report currency conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.ReportToProfitConversionRate">
            <summary>Account snapshot report currency to profit conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.Orders">
            <summary>Account snapshot orders</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiAccountSnapshot.#ctor(TickTrader.BusinessObjects.AccountSnapshotEntity)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotReport">
            <summary>
            Daily account snapshot report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotReport.IsLastReport">
            <summary>Is report last for paging request?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotReport.TotalReports">
            <summary>Count of total reports</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotReport.Records">
            <summary>List of daily account snapshot records</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotReport.LastId">
            <summary>Last daily account snapshot record Id (used for paging)</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotReport.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotReport.#ctor(TickTrader.BusinessObjects.Requests.DailyAccountSnapshotReport)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotRequest">
            <summary>
            Daily account snapshot request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotRequest.TimestampFrom">
            <summary>Lower timestamp bound of the daily account snapshot request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotRequest.TimestampTo">
            <summary>Upper timestamp bound of the daily account snapshot request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotRequest.RequestDirection">
            <summary>Request paging direction ("Forward" or "Backward"). Default is "Forward" (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotRequest.RequestPageSize">
            <summary>Request paging size. Default is 100 (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotRequest.RequestLastId">
            <summary>Request paging last Id (optional)</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiDailyAccountSnapshotRequest.Convert(System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividend">
            <summary>
            Dividend brief information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividend.Id">
            <summary>
            Dividend Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividend.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividend.Time">
            <summary>
            Time of the dividend execution
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividend.GrossRate">
            <summary>
            Gross rate
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividend.Currency">
            <summary>
            Dividend payment currency
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividend.Fee">
            <summary>
            Fee value
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividend.IsApplied">
            <summary>
            True if the dividend has been executed
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividend.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividend.#ctor(TickTrader.BusinessObjects.DividendInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividendEx">
            <summary>
            Dividend extended information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividendEx.SymbolExtendedName">
            <summary>
            Symbol extended name
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividendEx.SymbolDescription">
            <summary>
            Symbol description
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividendEx.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividendEx.#ctor(TickTrader.BusinessObjects.DividendInfo,TickTrader.BusinessObjects.AccountSymbol)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividendRequest">
            <summary>
            Dividends request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividendRequest.Symbols">
            <summary>List of symbols (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividendRequest.TimestampFrom">
            <summary>Lower timestamp bound of dividends request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiDividendRequest.TimestampTo">
            <summary>Upper timestamp bound of dividends request (optional)</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiAssetChange">
            <summary>
            Asset change report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAssetChange.ChangeAmount">
            <summary>Change amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAssetChange.LockedAmount">
            <summary>Locked amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAssetChange.Balance">
            <summary>Balance</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiAssetChange.Currency">
            <summary>Currency</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiAssetChange.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiAssetChange.#ctor(TickTrader.BusinessObjects.Requests.AssetChangeReport)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecutionFillInfo">
            <summary>
            Execution fill info
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecutionFillInfo.Amount">
            <summary>Amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecutionFillInfo.Price">
            <summary>Price</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecutionFillInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecutionFillInfo.#ctor(TickTrader.BusinessObjects.Requests.ExecFillInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecutionProfitInfo">
            <summary>
            Execution profit info
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecutionProfitInfo.Value">
            <summary>Value</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecutionProfitInfo.Currency">
            <summary>Currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecutionProfitInfo.Balance">
            <summary>Balance</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecutionProfitInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecutionProfitInfo.#ctor(TickTrader.BusinessObjects.Requests.ExecProfitInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeRejectInfo">
            <summary>
            Execution trade reject info
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeRejectInfo.Reason">
            <summary>Reject reason</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeRejectInfo.Comment">
            <summary>Comment</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeRejectInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeRejectInfo.#ctor(TickTrader.BusinessObjects.Requests.TradeRejectInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecution">
            <summary>
            Execution report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecution.Event">
            <summary>Execution event</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecution.Trade">
            <summary>Trade information</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecution.Fill">
            <summary>Fill information</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecution.Profit">
            <summary>Profit information</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecution.Reject">
            <summary>Reject information</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecution.AssetMovement">
            <summary>Asset movement information</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecution.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiExecution.#ctor(TickTrader.BusinessObjects.Requests.ExecutionReport)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedBar">
            <summary>
            Feed bar
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedBar.Timestamp">
            <summary>Timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedBar.Open">
            <summary>Bar open price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedBar.High">
            <summary>Bar high price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedBar.Low">
            <summary>Bar low price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedBar.Close">
            <summary>Bar close price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedBar.Volume">
            <summary>Bar volume</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedBar.#ctor(TickTrader.Common.Business.HistoryBar)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedLevel2Record">
            <summary>
            Feed Level 2 record
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedLevel2Record.Type">
            <summary>Price type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedLevel2Record.Price">
            <summary>Price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedLevel2Record.Volume">
            <summary>Volume</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedLevel2Record.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedLevel2Record.#ctor(TickTrader.Common.Business.FeedLevel2Record)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTick">
            <summary>
            Feed tick 
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTick.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTick.Timestamp">
            <summary>Timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTick.BestBid">
            <summary>Best bid value</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTick.BestAsk">
            <summary>Best ask value</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTick.IndicativeTick">
            <summary>Indicative tick flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTick.TickType">
            <summary>Tick type info</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTick.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTick.#ctor(TickTrader.BusinessObjects.TickValue)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTick.#ctor(TickTrader.Common.Business.FeedTick,System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2">
            <summary>
            Feed tick 
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2.Timestamp">
            <summary>Timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2.BestBid">
            <summary>Best bid value</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2.BestAsk">
            <summary>Best ask value</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2.Bids">
            <summary>Bid book</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2.Asks">
            <summary>Ask book</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2.IndicativeTick">
            <summary>Indicative tick flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2.TickType">
            <summary>Tick type info</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2.#ctor(TickTrader.Common.Business.FeedTick,System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2.#ctor(TickTrader.Common.Business.FeedTick,System.String,System.Int32)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiFeedTickLevel2.#ctor(TickTrader.BusinessObjects.TickValue,System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRequest">
            <summary>
            Interest rate history request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRequest.Currency">
            <summary>Currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRequest.TimestampFrom">
            <summary>Lower timestamp bound of the interest history request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRequest.TimestampTo">
            <summary>Upper timestamp bound of the interest history request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRequest.RequestDirection">
            <summary>Request paging direction ("Forward" or "Backward"). Default is "Forward" (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRequest.RequestPageSize">
            <summary>Request paging size. Default is 100 (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRequest.RequestLastId">
            <summary>Request paging last Id (optional)</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRequest.Convert(System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRecord">
            <summary>
            Interest rate history record
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRecord.Id">
            <summary>Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRecord.Currency">
            <summary>Currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRecord.Rate">
            <summary>Rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRecord.Markup">
            <summary>Markup</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryRecord.Timestamp">
            <summary>Timestamp</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryReport">
            <summary>
            Interest rate history report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryReport.IsLastReport">
            <summary>Is report last for paging request?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryReport.Records">
            <summary>List of trade history records</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryReport.LastId">
            <summary>Last trade history record Id (used for paging)</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryReport.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiInterestRateHistoryReport.#ctor(TickTrader.BusinessObjects.Requests.InterestRateChangeHistoryReport)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount">
            <summary>
            Account brief information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.Id">
            <summary>Account Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.AccountingType">
            <summary>Accounting type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.Group">
            <summary>Group</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.Name">
            <summary>Name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.IsBlocked">
            <summary>Is account blocked?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.IsReadonly">
            <summary>Is account read only?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.IsValid">
            <summary>Is account in valid state?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.Leverage">
            <summary>Leverage</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.Balance">
            <summary>Balance amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.BalanceCurrency">
            <summary>Balance currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.Profit">
            <summary>Profit</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.Commission">
            <summary>Commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.Swap">
            <summary>Swap</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.Rebate">
            <summary>Rebate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.Equity">
            <summary>Equity</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.Margin">
            <summary>Margin</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.MarginLevel">
            <summary>Margin level</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.MarginLevelState">
            <summary> Margin Level State </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.MarginCallLevel">
            <summary>Margin call level</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.StopOutLevel">
            <summary>Stop out level</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.MaxOverdraftAmount">
            <summary>Max Overdraft Amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.OverdraftCurrency">
            <summary>Overdraft Currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.UsedOverdraftAmount">
            <summary>Used Overdraft Amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.IsLongOnly">
            <summary>Is Long Only</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccount.#ctor(TickTrader.BusinessObjects.AccountInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount">
            <summary>
            Account full information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Id">
            <summary>Account Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.AccountingType">
            <summary>Accounting type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Group">
            <summary>Group</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Name">
            <summary>Name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.FirstName">
            <summary>FirstName</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.LastName">
            <summary>LastName</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Phone">
            <summary>Phone</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Country">
            <summary>Country</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.State">
            <summary>ModelState</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.City">
            <summary>City</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Address">
            <summary>Address</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.ZipCode">
            <summary>ZipCode</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.SocialSecurityNumber">
            <summary>Social Security Number</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Email">
            <summary>Email</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Comment">
            <summary>Comment</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Registered">
            <summary>Registered timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Modified">
            <summary>Modified timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.IsBlocked">
            <summary>Is account blocked?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.IsReadonly">
            <summary>Is account read only?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.IsValid">
            <summary>Is account in valid state?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.IsWebApiEnabled">
            <summary>Is Web API enabled for account?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Leverage">
            <summary>Leverage</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Balance">
            <summary>Balance amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.BalanceCurrency">
            <summary>Balance currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Profit">
            <summary>Profit</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Commission">
            <summary>Commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Swap">
            <summary>Swap</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Rebate">
            <summary>Rebate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Equity">
            <summary>Equity</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Margin">
            <summary>Margin</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.MarginLevel">
            <summary>Margin level</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.MarginLevelState">
            <summary> Margin Level State </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.MarginCallLevel">
            <summary>Margin call level</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.StopOutLevel">
            <summary>Stop out level</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.ReportCurrency">
            <summary>Report currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.TokenCommissionCurrency">
            <summary>Token commission currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.TokenCommissionCurrencyDiscount">
            <summary>Token commission currency discount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.IsTokenCommissionEnabled">
            <summary>Is token commission enabled?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.MaxOverdraftAmount">
            <summary>Max Overdraft Amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.OverdraftCurrency">
            <summary>Overdraft Currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.UsedOverdraftAmount">
            <summary>Used Overdraft Amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Subscription">
            <summary>
            Subcribtion
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.IsTwoFactorAuthSet">
            <summary>
            Is 2fa enabled
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.SkipJournal">
            <summary>
            Skip journal
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.SkipTradeHistory">
            <summary>
            Skip trade history
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.SkipLogging">
            <summary>
            Skip logging
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.InternalComment">
            <summary>
            Internal comment
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.OrdersLimit">
            <summary>
            Orders limit
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Logins">
            <summary>Logins</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.WebApiTokens">
            <summary>WebApi tokens</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Throttling">
            <summary>Throttling</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.Properties">
            <summary>Custom properties</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.IsLongOnly">
            <summary>Is Long Only</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccount.#ctor(TickTrader.BusinessObjects.AccountInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountsSnapshotsReport">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountsSnapshotsReport.IsEndOfStream">
            <summary>Is end of paging stream</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountsSnapshotsReport.LastReportId">
            <summary>Last trade history record Id (used for paging)</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshotReport">
            <summary>
            Account snapshot base report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccountSnapshotReport">
            <summary>
            Account snapshot breif report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccountSnapshotReport.OrdersCount">
            <summary>
            Number of opened ordes
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefAccountSnapshotReport.PositionsCount">
            <summary>
            Number of opened positions
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccountSnapshot">
            <summary>
            Account snapshot full report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccountSnapshot.Orders">
            <summary>
            List of opened orders
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullAccountSnapshot.Positions">
            <summary>
            List of opened positions
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountTokenCommission">
            <summary>
            Account token commission configuration snapshot
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountTokenCommission.IsEnabled">
            <summary>
            Is token commission enabled for account
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountTokenCommission.Currency">
            <summary>
            Token commission currency
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountTokenCommission.Discount">
            <summary>
            Commission discount if the token commission is used
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountOverdraft">
            <summary>
            Account overdraft configuration snapshot
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountOverdraft.MaxAmount">
            <summary>
            Max overdraft amount
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountOverdraft.UsedAmount">
            <summary>
            Overdraft amount is used by account
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountOverdraft.Currency">
            <summary>
            Overdraft currency
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot">
            <summary>
            Account snapshot
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.Id">
            <summary>
            Account Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.Domain">
            <summary>
            The name of domain
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.Group">
            <summary>
            The name of group
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.ReportCurrency">
            <summary>
            Currency is used for reporting
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.Balance">
            <summary>
            Balance of account
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.AccountingType">
            <summary>
            The type of accounting
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.Leverage">
            <summary>
            The leverage value
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.Profit">
            <summary>
            Profit amount
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.Commission">
            <summary>
            Commission amount
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.Swap">
            <summary>
            Swap amount
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.Rebate">
            <summary>
            Rebate amount
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.Equity">
            <summary>
            Equity value
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.Margin">
            <summary>
            Margin value
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.MarginLevel">
            <summary>
            MarginLevel value
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.IsBlocked">
            <summary>
            Is account blocked
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.IsBlockedConnections">
            <summary>
            Is account blocked to establish any connections
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.IsReadonly">
            <summary>
            Is account readonly
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.IsValid">
            <summary>
            Is account valid
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAccountSnapshot.InternalComment">
            <summary>
            Internal comment
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrderSnapshot">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiPositionSnapshot">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiAssetSnapshot">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBalance">
            <summary>
            Account balance base
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBalance.Amount">
            <summary>Balance amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBalance.Currency">
            <summary>Balance currency</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBalanceSnapshot">
            <summary>
            Account balance snapshot
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBalanceSnapshot.BalanceToReportConversionRate">
            <summary>Conversion rate to conver from balance currency to report currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBalanceSnapshot.ReportToBalanceConversionRate">
            <summary>Conversion rate to convert from report currency to balance currency</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBalanceSnapshot.#ctor">
            <summary></summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBalanceSnapshot.#ctor(TickTrader.BusinessObjects.AccountSnapshotEntity)">
            <summary></summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportBalance">
            <summary>
            Account balance for trade report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportBalance.Movement">
            <summary>Balance movement</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportBalance.#ctor">
            <summary></summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportBalance.#ctor(TickTrader.BusinessObjects.TradeReport)">
            <summary></summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiConfiguration.ConfigurationVersion">
            <summary>
            Configuration version is used in operations that create/modify/delete configuration entities.
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiDeleteTradeResult">
            <summary>
            Trade delete result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiDeleteTradeResult.Type">
            <summary>Delete trade type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiDeleteTradeResult.Trade">
            <summary>Deleted trade</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiDeleteTradeResult.ByTrade">
            <summary>By trade (optional)</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiDeleteTradeResult.#ctor(TickTrader.BusinessObjects.Requests.CancelOrderReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiDeleteTradeResult.#ctor(TickTrader.BusinessObjects.Requests.ClosePositionReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefGroup.Name">
            <summary>
            The name of group.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefGroup.Domain">
            <summary>
            The name of domain.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefGroup.MarginCallLevel">
            <summary>
            Margin level at which a broker sends a request for additional funds to guarantee performance on open positions. Is applicable to Marginal accounts only (Gross/Net).
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefGroup.StopOutLevel">
            <summary>
            Margin level at which customer's open position(s) are closed in a case of insufficient funds required to maintain open positions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefGroup.StopOutType">
            <summary>
            Stop out type:
            **Disabled** – this option is used on indicative accounts only. Indicative accounts are technological accounts designed for internal use (for example, bot accounts used on TickTrader Aggregator).
            **Notification** – when the stop out procedure occurs, the user receives a notification in the trading terminal.
            **CloseAll** – close all positions cancel all pending orders.
            **OptimisticChronological (Soft)** – All trades are closed (cancelled) from newest to oldest. If possible Gross positions are closed by others. The StopOut execution stops when **MarginLevel** doesn’t exceed **StopOutLevel**.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefGroup.SwapChargingType">
            <summary>
            Swap charging type:
            **Disabled** – disables swap charging.
            **Automatic** – swaps are charged automatically by Symbol Swap options.
            **Manual** –swaps are charged manually by Symbol Swap options.
            **ByExposure** –swaps are charged automatically by Profit Currency options.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefGroup.TradingMode">
            <summary>
            Trading mode – select the trading mode:
            **Full** – all operations are allowed.
            **LongOnly** – short orders are not allowed except in the following case: on Net accounts, a Short order can be opened to close (fully or partially) an existing Long position if NewShortOrderAmount ≤ LongPositionAmount.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefGroup.NewOrderMarginLevelThreshold">
            <summary>
            New order margin level threshold – determines a minimum margin level on a new order opening, on pending order modifying and pending order activation. It must be ≥ **StopOutLevel**.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefGroup.PerformOvernight">
            <summary>
            Perform overnight – if 'True' and **SwapChargingType** = **ByExposure** the interest rate will be applied.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefGroup.MustChangePassword">
            <summary>
            Must Change Password – setting this flag causes the setting of a similar flag for the default/read-only login when creating an account.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefGroup.WebApiEnabled">
            <summary>
            Enable or disable Web API for accounts in the group. Web API tokens are needed for web trading.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefGroupList.Groups">
            <summary>
            List of brief information about groups.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.Name">
            <summary>
            The name of group.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.Domain">
            <summary>
            The name of domain.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.MarginCallLevel">
            <summary>
            Margin level at which a broker sends a request for additional funds to guarantee performance on open positions. Is applicable to Marginal accounts only (Gross/Net).
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.StopOutLevel">
            <summary>
            Margin level at which customer's open position(s) are closed in a case of insufficient funds required to maintain open positions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.StopOutType">
            <summary>
            Stop out type:
            **Disabled** – this option is used on indicative accounts only. Indicative accounts are technological accounts designed for internal use (for example, bot accounts used on TickTrader Aggregator).
            **Notification** – when the stop out procedure occurs, the user receives a notification in the trading terminal.
            **CloseAll** – close all positions cancel all pending orders.
            **OptimisticChronological (Soft)** – All trades are closed (cancelled) from newest to oldest. If possible Gross positions are closed by others. The StopOut execution stops when **MarginLevel** doesn’t exceed **StopOutLevel**.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.SwapChargingType">
            <summary>
            Swap charging type:
            **Disabled** – disables swap charging.
            **Automatic** – swaps are charged automatically by Symbol Swap options.
            **Manual** –swaps are charged manually by Symbol Swap options.
            **ByExposure** –swaps are charged automatically by Profit Currency options.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.TradingMode">
            <summary>
            Trading mode – select the trading mode:
            **Full** – all operations are allowed.
            **LongOnly** – short orders are not allowed except in the following case: on Net accounts, a Short order can be opened to close (fully or partially) an existing Long position if NewShortOrderAmount ≤ LongPositionAmount.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.NewOrderMarginLevelThreshold">
            <summary>
            New order margin level threshold – determines a minimum margin level on a new order opening, on pending order modifying and pending order activation. It must be ≥ **StopOutLevel**.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.PerformOvernight">
            <summary>
            Perform overnight – if 'True' and **SwapChargingType** = **ByExposure** the interest rate will be applied.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.MustChangePassword">
            <summary>
            Must Change Password – setting this flag causes the setting of a similar flag for the default/read-only login when creating an account.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.WebApiEnabled">
            <summary>
            Enable or disable Web API for accounts in the group. Web API tokens are needed for web trading.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.Securities">
            <summary>
            List of securities are included in the group.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.OverriddenSymbols">
            <summary>
            List of symbols that are available for the group and can define specific values. Overridden values will be applied only for accounts of the group.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullGroup.OverriddenCurrencies">
            <summary>
            List of currencies that are available for the group and can define specific values. Overridden values will be applied only for accounts of the group.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.Id">
            <summary>
            The Id of security in a group. It is used in modify/delete security operations.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.Group">
            <summary>
            The name of group.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.Security">
            <summary>
            The name of security.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.Priority">
            <summary>
            The priority of security in a group.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.Enabled">
            <summary>
            Enable or disable security in a group.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.AllowedTrade">
            <summary>
            Allow or disallow trade operations for symbols of security.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.ExecutionMode">
            <summary>
            Execution mode:
            **Automatic** execution without dealing.
            **External** execution with dealing (automatic or manual).
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.MinTradeAmount">
            <summary>
            The minimum allowed order amount in lots. Should be a multiple of **TradeAmountStep**.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.MaxTradeAmount">
            <summary>
            The maximum allowed order amount in lots. Should be a multiple of **TradeAmountStep**.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.TradeAmountStep">
            <summary>
            Trade step in lots. Any trade amount should be a multiple of this value.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.TakerCommissionValue">
            <summary>
            Fee charged for a Market, Stop, IOC Limit or Limit order with hidden volume.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.MakerCommissionValue">
            <summary>
            Fee applies only to Limit orders that appear in the order book (except IOC Limit and Limit orders with hidden volume).
            It also applies to Limit orders that were originally opened as StopLimit orders and appeared in the order book.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.CommissionType">
            <summary>
            Commission type: Money, Points or Percent.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.MinCommissionValue">
            <summary>
            Minimum fee (in money) charged for the execution of order. The minimum fee will be charged in the **MinCommissionCurrency**.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.MinCommissionCurrency">
            <summary>
            The currency of minimum fee.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.RebateValue">
            <summary>
            Percentage of trade amount that will be returned back.
            It applies only to Limit orders that appear in the order book (except IOC Limit and Limit orders with hidden volume).
            It also applies to Limit orders that were originally opened as StopLimit orders and appeared in the order book.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.BidMarkup">
            <summary>
            The difference between the bid price of a financial instrument and its actual value or market price.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.AskMarkup">
            <summary>
            The difference between the ask price of a financial instrument and its actual value or market price.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurity.MarkupType">
            <summary>
            Type of pricing securities.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurityPriority.SecurityId">
            <summary>
            The Id of security in a group.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupSecurityPriority.Priority">
            <summary>
            The priority of security in a group.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupOverriddenSymbol.SymbolName">
            <summary>
            The name of symbol.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupOverriddenSymbol.MarginFactor">
            <summary>
            The value overrides symbol’s **MarginFactor** – the margin coefficient for a symbol.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupOverriddenSymbol.SwapSizeLong">
            <summary>
            The value overrides symbol’s **SwapSizeLong** – swap for Buy positions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupOverriddenSymbol.SwapSizeShort">
            <summary>
            The value overrides symbol’s **SwapSizeShort** – swap for Sell positions.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupOverriddenCurrency.CurrencyName">
            <summary>
            The name of currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupOverriddenCurrency.TaxFactor">
            <summary>
            Factor is used as a multiplier (not as a replacement) for currency’s **Tax** (%) – tax amount applied to dividend amount.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupOverriddenCurrency.DefaultStockFee">
            <summary>
            The value overrides currency’s **DefaultStockFee** (%) – the default value for Dividend stock fee.
            It is applied to a related dividend if the other value of Stock Fee is not defined.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupOverriddenCurrency.InterestRate">
            <summary>
            The value overrides currency’s **InterestRate** (%) – a bank interest on a loan (annual).
            It is used only for **SwapChargingType** = **ByExposure**.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiGroupOverriddenCurrency.InterestMarkup">
            <summary>
            The value overrides currency’s **InterestMarkup** (%) – a loan service fee (annual).
            It is used only for **SwapChargingType** = **ByExposure**.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiNetPosition.Symbol">
            <summary>
            Symbol Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiNetPosition.SymbolName">
            <summary>
            Symbol Name
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.OrderId">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.AccountId">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Symbol">
            <summary>
            Symbol Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.SymbolName">
            <summary>
            Symbol Name
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.ClientOrderId">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.ParentOrderId">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Price">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.StopPrice">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Side">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Type">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.InitialType">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Status">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Amount">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.RemainingAmount">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.AggrFillPrice">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.AverageFillPrice">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Created">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Modified">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Filled">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.PositionCreated">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.StopLoss">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.TakeProfit">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Profit">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Margin">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.UserComment">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.ManagerComment">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.UserTag">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.ManagerTag">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Magic">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Commission">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Swap">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Expired">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.ClosePrice">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.MarginRateInitial">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.MarginRateCurrent">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.OpenConversionRate">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.CloseConversionRate">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Options">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Taxes">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.ReqOpenPrice">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.ReqOpenAmount">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.ClientApp">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.IsReducedOpenCommission">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.IsReducedCloseCommission">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.MaxVisibleAmount">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.CurrentPrice">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.TransferringCoefficient">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.SymbolPrecision">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.MarketBid">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.MarketAsk">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.MarketTime">
             <summary>
            
             </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Slippage">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.LastStockEventPerformedId">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Rebate">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.RelatedOrderId">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.ExecutionExpired">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.TriggerType">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.TriggerTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.OrderIdTriggeredBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.Properties">
             <summary>
            
             </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiOrder.#ctor(TickTrader.BusinessObjects.Order)">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeHistoryReport">
            <summary>
            Trade history report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeHistoryReport.IsEndOfStream">
            <summary>Is end of paging stream</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeHistoryReport.LastReportId">
            <summary>Last trade history record Id (used for paging)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeHistoryReport.Reports">
            <summary>List of trade history records</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport">
            <summary>
            Brief trade report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.Id">
            <summary>
            Unique identifier of the report.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.TrType">
            <summary>
            Type of the transaction described by this report.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.TrReason">
            <summary>
            Describes the initiator or cause to start a transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.TrTime">
            <summary>
            Time of described transaction. It means time of report creation.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.AccountId">
            <summary>
            Account Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.BalanceAmount">
            <summary>
            Value of account balance after described transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.BalanceMovement">
            <summary>
            Amount on which balance was changed during described transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.BalanceCurrency">
            <summary>
            Currency of account balance.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.OrderId">
            <summary>
            Unique identifier of corresponding order. Every trade report matches an order.
            A single order can match multiple trade reports.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.ActionNumber">
            <summary>
            Sequential number of trade reports within given order.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.Symbol">
            <summary>
            Id of instrument of described order.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.SymbolName">
            <summary>
            Name of instrument of described order.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.SymbolPrecision">
            <summary>
            Symbol percision. Null in case of no symbol was used.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.Side">
            <summary>
            Side of described order.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.Type">
            <summary>
            Type of described order on the moment of report creation.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.Amount">
            <summary>
            The amount of described order specified (requested) on order opening.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.RemainingAmount">
            <summary>
            The amount remaining to fill after described transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.Price">
            <summary>
            The price of order on the moment of the order fill. Mandatory for Limit/StopLimit orders.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.StopPrice">
            <summary>
            The price of order on the moment of the order fill. Mandatory for Stop/StopLimit orders.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.Slippage">
            <summary>
            Value of slippage
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.StopLoss">
            <summary>
            StopLoss parameter of the order as it was at the moment of described transaction.
            Valid only for Gross accounts. Null in case of other account types.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.TakeProfit">
            <summary>
            TakeProfit parameter of the order as it was at the moment of described transaction.
            Valid only for Gross accounts. Null in case of other account types.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.Created">
            <summary>
            Time of order creation.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.LastFillAmount">
            <summary>
            The amount which was filled during described transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.FillPrice">
            <summary>
            Price of the order fill described by this report.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.PosId">
            <summary>
            Unique identifier of corresponding position.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            Can be equal OrderId in case of full order fill.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.PosById">
            <summary>
            Unique identifier of a position was used to close by.
            Valid only for PositionClosed (Gross) reports. Null in all other cases
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.PosAmount">
            <summary>
            Amount of created position.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.PosRemainingAmount">
            <summary>
            In case of PositionClosed (Gross): amount remaining to close after described transaction.
            In case of OrderFilled (Net): amount of remaining position after described transaction.
            Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.PosRemainingSide">
            <summary>
            Side of remaining position after described transaction.
            Valid only for OrderFilled (Net account) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.PosRemainingPrice">
            <summary>
            Price of remaining position after described transaction.
            Valid only for OrderFilled (Net) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.PosLastAmount">
            <summary>
            Amount which was closed during described PositionClosed transaction.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.PosOpenPrice">
            <summary>
            Price of created position.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.PosOpened">
            <summary>
            Time of position creation.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.PosClosePrice">
            <summary>
            Price which was used to close position during described PositionClosed transaction.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.PosClosed">
            <summary>
            Time of position closing.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.ProfitLoss">
            <summary>
            Amount of profit/loss as a result of position closing. Does not include commission, swap and other charges.
            Valid only for PositionClosed (Gross) and OrderFilled (Net) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.Commission">
            <summary>
            Amount of commission which was charged during described transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.CommissionCurrency">
            <summary>
            Commission currency
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.Swap">
            <summary>
            Amount of Swap which was charged during described transaction.
            It means Swap charged from account balance. Not the Swap assigned to order entity.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.Rebate">
            <summary>
            Rebate is an amount of money in RebateCurrency that is paid back
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.RebateCurrency">
            <summary>
            The currency of Rebate
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.Taxes">
            <summary>
            Taxes
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.ManagerComment">
            <summary>
            Comment assigned by manager to the order/position as it was at the moment of described transaction.
            It can be changed by manager during order lifetime.
            Also it is applied for balance operations.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.UserComment">
            <summary>
            Comment assigned by user to the order/position as it was at the moment of described transaction.
            It can be changed by user during order lifetime.
            Also it is applied for balance operations.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.ParentOrderId">
            <summary>
            Parent Order Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.ParentOrderType">
            <summary>
            Parent Order Type
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.#ctor">
            <summary></summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiBriefTradeReport.#ctor(TickTrader.BusinessObjects.TradeReport)">
            <summary></summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullTradeReport">
            <summary>
            Full trade report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiFullTradeReport.Id">
            <summary>
            Unique identifier of the report.
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportTransaction">
            <summary>
            Trade report transaction info
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportTransaction.Type">
            <summary>
            Type of the transaction described by this report.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportTransaction.Reason">
            <summary>
            Describes the initiator or cause to start a transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportTransaction.Time">
            <summary>
            Time of described transaction. It means time of report creation.
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportTransaction.#ctor">
            <summary></summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportTransaction.#ctor(TickTrader.BusinessObjects.TradeReport)">
            <summary></summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportAccount">
            <summary>
            Trade report account info
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportAccount.Id">
            <summary>
            Account Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportAccount.Domain">
            <summary>
            Account domain
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportAccount.Group">
            <summary>
            Account group
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportAccount.TransferMoneyAccount">
            <summary>
            Source or destination Account for TransferMoney. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportAccount.ReportCurrency">
            <summary>
            Report currency
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportAccount.#ctor">
            <summary></summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportAccount.#ctor(TickTrader.BusinessObjects.TradeReport)">
            <summary></summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder">
            <summary>
            Trade report order info
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.OrderId">
            <summary>
            Unique identifier of corresponding order. Every trade report matches an order.
            A single order can match multiple trade reports.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.ParentOrderId">
            <summary>
            Parent order
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.RelatedOrderId">
            <summary>
            Related order Id is used for pair OCO orders.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.ActionNumber">
            <summary>
            Sequential number of trade reports within given order.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.ParentOrderType">
            <summary>
            Parent order type
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.Amount">
            <summary>
            The amount of described order specified (requested) on order opening.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.RemainingAmount">
            <summary>
            The amount remaining to fill after described transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.Price">
            <summary>
            The price of order on the moment of the order fill. Mandatory for Limit/StopLimit orders.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.StopPrice">
            <summary>
            The price of order on the moment of the order fill. Mandatory for Stop/StopLimit orders.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.Slippage">
            <summary>
            Value of slippage
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.StopLoss">
            <summary>
            StopLoss parameter of the order as it was at the moment of described transaction.
            Valid only for Gross accounts. Null in case of other account types.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.TakeProfit">
            <summary>
            TakeProfit parameter of the order as it was at the moment of described transaction.
            Valid only for Gross accounts. Null in case of other account types.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.Created">
            <summary>
            Time of order creation.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.Modified">
            <summary>
            Time of last modification of described order.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.Expired">
            <summary>
            Time of order expiration as it was at the moment of described transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.Options">
            <summary>
            Order execution options.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.LastFillAmount">
            <summary>
            The amount which was filled during described transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.FillPrice">
            <summary>
            Price of the order fill described by this report.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.ProfitLoss">
            <summary>
            Amount of profit/loss as a result of position closing. Does not include commission, swap and other charges.
            Valid only for PositionClosed (Gross) and OrderFilled (Net) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.MarginInitial">
            <summary>
            Value of margin as it was on order opening.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.OpenConversionRate">
            <summary>
            Rate which was used to convert from margin currency to balance currency during order opening.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.CloseConversionRate">
            <summary>
            Rate which was used to convert from profit currency to balance currency during position closing.
            Valid only for PositionClosed (Gross) and OrderFilled (Net) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.RequestedOpenAmount">
            <summary>
            The amount specified on order opening.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.RequestedOpenPrice">
            <summary>
            The price specified on order opening.
            Can be null for Market order if price was not specified in order request.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.ClientApp">
            <summary>
            Client application specific identifier
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.PlatformComment">
            <summary>
            Comment generated by Platform.
            Can be null.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.UserComment">
            <summary>
            Comment assigned by user to the order/position as it was at the moment of described transaction.
            It can be changed by user during order lifetime.
            Also it is applied for balance operations.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.ManagerComment">
            <summary>
            Comment assigned by manager to the order/position as it was at the moment of described transaction.
            It can be changed by manager during order lifetime.
            Also it is applied for balance operations.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.UserTag">
            <summary>
            Tag (literal token) assigned by user to the order/position as it was at the moment of described transaction.
            Can be changed by user during order lifetime.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.ManagerTag">
            <summary>
            Tag (literal token) assigned by manager to the order/position as it was at the moment of described transaction.
            Can be changed by manager during order lifetime.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.Magic">
            <summary>
            Magic number (numeric token) assigned by user to the order/position as it was at the moment of described transaction.
            Can be changed by user during order lifetime.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.MarginToBalanceConversionRate">
            <summary>
            Conversion rate to convert margin currency to balance currency
            Null if no conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.MarginToReportConversionRate">
            <summary>
            Conversion rate to convert margin currency to report currency
            Null if no conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.ReportToMarginConversionRate">
            <summary>
            Conversion rate to convert report currency to margin currency
            Null if no conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.ProfitToReportConversionRate">
            <summary>
            Conversion rate to convert profit currency to report currency
            Null if no conversion cannot be performed
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.ReportToProfitConversionRate">
            <summary>
            Conversion rate to convert report currency to profit currency
            Null if no conversion cannot be performed
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.#ctor">
            <summary></summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportOrder.#ctor(TickTrader.BusinessObjects.TradeReport)">
            <summary></summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition">
            <summary>
            Trade report position info
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.Id">
            <summary>
            Unique identifier of corresponding position.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            Can be equal OrderId in case of full order fill.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.ById">
            <summary>
            Unique identifier of a position was used to close by.
            Valid only for PositionClosed (Gross) reports. Null in all other cases
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.Amount">
            <summary>
            Amount of created position.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.RemainingAmount">
            <summary>
            In case of PositionClosed (Gross): amount remaining to close after described transaction.
            In case of OrderFilled (Net): amount of remaining position after described transaction.
            Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.LastAmount">
            <summary>
            Amount which was closed during described PositionClosed transaction.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.RemainingPrice">
            <summary>
            Price of remaining position after described transaction.
            Valid only for OrderFilled (Net) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.RemainingSide">
            <summary>
            Side of remaining position after described transaction.
            Valid only for OrderFilled (Net account) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.OpenPrice">
            <summary>
            Price of created position.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.ClosePrice">
            <summary>
            Price which was used to close position during described PositionClosed transaction.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.RequestedCloseAmount">
            <summary>
            The amount specified on order closing.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.RequestedClosePrice">
            <summary>
            The price specified on order closing.
            Can be null for Market order if price was not specified in order request.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.Opened">
            <summary>
            Time of position creation.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.Closed">
            <summary>
            Time of position closing.
            Valid only for PositionClosed (Gross) reports. Null in all other cases.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.Modified">
            <summary>
            Time of described position modification.
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.#ctor">
            <summary></summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportPosition.#ctor(TickTrader.BusinessObjects.TradeReport)">
            <summary></summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges">
            <summary>
            Charges
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.Commission">
            <summary>
            Amount of commission which was charged during described transaction.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.CommissionCurrency">
            <summary>
            Commission currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.IsCommissionReducedOnOpen">
            <summary>
            True if commission was reduced on open.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.IsCommissionReducedOnClose">
            <summary>
            True if commission was reduced on close.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.MinCommissionCurrency">
            <summary>
            Minimal commission currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.MinCommissionConversionRate">
            <summary>
            Conversion rate to convert minimal commission currency to balance currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.TokenCommissionCurrency">
            <summary>
            Token commission currency if commission was charged in token currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.TokenCommissionDiscount">
            <summary>
            Token commission discount  if commission was charged in token currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.TokenCommissionConversionRate">
            <summary>
            Conversion rate to convert token commission currency to balance currency.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.Swap">
            <summary>
            Amount of Swap which was charged during described transaction.
            It means Swap charged from account balance. Not the Swap assigned to order entity.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.Rebate">
            <summary>
            Rebate is an amount of money in RebateCurrency that is paid back
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.RebateCurrency">
            <summary>
            The currency of Rebate
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.Taxes">
            <summary>
            Taxes
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.TaxValue">
            <summary>
            Tax value at the time of dividend payment
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.#ctor">
            <summary></summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportCharges.#ctor(TickTrader.BusinessObjects.TradeReport)">
            <summary></summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportStockEvents">
            <summary>
            Stock events
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportStockEvents.SplitRatio">
            <summary>
            Split Ratio
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportStockEvents.DividendGrossRate">
            <summary>
            Dividend Gross Rate
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportStockEvents.DividendToBalanceConversionRate">
            <summary>
            Conversion rate to convert dividend currency to balance currency
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportStockEvents.#ctor">
            <summary></summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.ManagerApiTradeReportStockEvents.#ctor(TickTrader.BusinessObjects.TradeReport)">
            <summary></summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestAccountsSnapshots">
            <summary>
            Accounts snapshots request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestAccountsSnapshots.TimestampFrom">
            <summary>Lower timestamp bound of the trade history request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestAccountsSnapshots.TimestampTo">
            <summary>Upper timestamp bound of the trade history request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestAccountsSnapshots.Accounts">
            <summary>List of account Ids</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestAccountsSnapshots.Groups">
            <summary>List of group names</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestAccountsSnapshots.PagingDirection">
            <summary>Paging direction (optional). Possible values: "Forward", "Backward". Default is "Forward"</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestAccountsSnapshots.PagingSize">
            <summary>Paging size (optional) should be in range [1, 1000]. Default is 100</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestAccountsSnapshots.PagingReportId">
            <summary>Id of the last report (optional) is used for paging</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestDepositWithdrawal">
            <summary>
            Deposit or Withdrawal request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestDepositWithdrawal.AccountId">
            <summary>
            Account Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestDepositWithdrawal.Amount">
            <summary>
            Amount. Positive value is used for Deposit operation, negative value is used for Withdrawal operation
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestDepositWithdrawal.Currency">
            <summary>
            Currency
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestDepositWithdrawal.SkipCheckMargin">
            <summary>
            Skip check margin on withdrawal. WARNING! Skipping check margin may result in MarginCall or StopOut!
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestDepositWithdrawal.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestDepositWithdrawal.UserComment">
            <summary>
            Comment for user
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestConfiguration.ConfigurationVersion">
            <summary>
            Current configuration version.
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestModifyLogin.Login">
            <summary>
            Login
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestModifyLogin.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestModifyLogin.Rights">
            <summary>
            Login rights
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestModifyLogin.IsTfaEnabled">
            <summary>
            Is 2fa enabled
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerGrossTradeDeleteTypes">
            <summary>
            Delete gross trade request types
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerGrossTradeDeleteTypes.Cancel">
            <summary>Cancel pending trade</summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerGrossTradeDeleteTypes.Close">
            <summary>Close position</summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerGrossTradeDeleteTypes.CloseBy">
            <summary>Close one position by another position</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerNetTradeDeleteTypes">
            <summary>
            Delete trade request types
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerNetTradeDeleteTypes.Cancel">
            <summary>Cancel pending trade</summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerNetTradeDeleteTypes.Close">
            <summary>Close position</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeDelete">
            <summary>
            Delete trade request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeDelete.Id">
            <summary>Trade Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeDelete.Amount">
            <summary>Amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeDelete.ManagerOptions">
            <summary>Manager options</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeDelete.Convert">
            <summary>
            Converter
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestGrossTradeDelete">
            <summary>
            Delete gross order request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestGrossTradeDelete.ById">
            <summary>By trade Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestGrossTradeDelete.Type">
            <summary>Delete operation type (required)</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestNetTradeDelete">
            <summary>
            Delete gross order request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestNetTradeDelete.Type">
            <summary>Delete operation type (required)</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeHistory">
            <summary>
            Trade history request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeHistory.TimestampFrom">
            <summary>Lower timestamp bound of the trade history request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeHistory.TimestampTo">
            <summary>Upper timestamp bound of the trade history request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeHistory.Accounts">
            <summary>List of accounts (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeHistory.OrderId">
            <summary>Order Id (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeHistory.SkipCancelOrder">
            <summary>Skip history records of orders are canceled, expired or activated StopLimit (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeHistory.PagingDirection">
            <summary>Paging direction (optional). Possible values: "Forward", "Backward". Default is "Forward"</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeHistory.PagingSize">
            <summary>Paging size (optional) should be in range [1, 1000]. Default is 100</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeHistory.PagingReportId">
            <summary>Id of the last report (optional) is used for paging</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeHistory.Convert">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify">
            <summary>
            Modify order for account request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.AmountChange">
            <summary>
            Amount change
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.Amount">
            <summary>
            Amount. Skipped if AmountChange is set
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.RemainingAmount">
            <summary>
            Remaining amount. Skipped if AmountChange is set
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.MaxVisibleAmount">
            <summary>
            Max visible amount
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.StopPrice">
            <summary>
            StopPrice
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.ImmediateOrCancelFlag">
            <summary>
            Immediate or cancel flag
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.FillOrKillFlag">
            <summary>
            Fill or kill flag
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.Swap">
            <summary>
            Swap
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.Slippage">
            <summary>
            Slippage
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.Expiration">
            <summary>
            Expiration time
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.Created">
            <summary>
            Created time
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.UserComment">
            <summary>
            User comment
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.ManagerComment">
            <summary>
            Manager comment
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.UserTag">
            <summary>
            User tag
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.ManagerTag">
            <summary>
            Manager tag
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.Magic">
            <summary>
            Magic
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.CustomProperties">
            <summary>
            Custom properties
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeModify.ManagerOptions">
            <summary>
            Manager options
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestNetTradeModify">
            <summary>
            Modify order for Net account request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestNetTradeModify.TradeId">
            <summary>
            Trade Id
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestGrossTradeModify">
            <summary>
            Modify order for Gross account request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestGrossTradeModify.OrderId">
            <summary>
            Order Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestGrossTradeModify.StopLoss">
            <summary>
            StopLoss
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestGrossTradeModify.TakeProfit">
            <summary>
            TakeProfit
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestGrossTradeModify.Commission">
            <summary>
            Commission
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestGrossTradeModify.Rebate">
            <summary>
            Rebate
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen">
            <summary>
            Open order for base request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.AccountId">
            <summary>
            Account Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.ClientOrderId">
            <summary>
            Client order Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.StopPrice">
            <summary>
            StopPrice
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.Type">
            <summary>
            order type
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.UserComment">
            <summary>
            User comment
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.ManagerComment">
            <summary>
            Manager comment
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.UserTag">
            <summary>
            User tag
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.ManagerTag">
            <summary>
            Manager tag
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.Magic">
            <summary>
            Magic
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.Expiration">
            <summary>
            Order expiration
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.ImmediateOrCancel">
            <summary>
            Immediate or cancel execution option
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.CustomProperties">
            <summary>
            Custom properties
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.MaxVisibleAmount">
            <summary>
            Max visible amount
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.Slippage">
            <summary>
            Slippage
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.Created">
            <summary>
            Created time
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.AccountManagerTag">
            <summary>
            Account manager tag
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTradeOpen.ManagerOptions">
            <summary>
            Manager options
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestNetTradeOpen">
            <summary>
            Open order for Net account request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestGrossTradeOpen">
            <summary>
            Open order for Gross account request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestGrossTradeOpen.StopLoss">
            <summary>
            StopLoss
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestGrossTradeOpen.TakeProfit">
            <summary>
            TakeProfit
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTransferMoney">
            <summary>
            Transfer Money request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTransferMoney.SrcAccount">
            <summary>
            Source account Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTransferMoney.DstAccount">
            <summary>
            Destination account Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTransferMoney.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTransferMoney.Currency">
            <summary>
            Currency
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTransferMoney.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiRequestTransferMoney.UserComment">
            <summary>
            Comment for user
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiReportTransferMoney">
            <summary>
            Transfer Money report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiReportTransferMoney.WithdrawalOrderId">
            <summary>
            Withdrawal order Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Manager.Requests.ManagerApiReportTransferMoney.DepositOrderId">
            <summary>
            Deposit order Id
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiMergerAndAcquisitionRequest">
            <summary>
            MergerAndAcquisitions request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiMergerAndAcquisitionRequest.Symbols">
            <summary>List of symbols (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiMergerAndAcquisitionRequest.TimestampFrom">
            <summary>Lower timestamp bound of MergerAndAcquisition request (optional, skipped now, for the future use)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiMergerAndAcquisitionRequest.TimestampTo">
            <summary>Upper timestamp bound of MergerAndAcquisition request (optional, skipped now, for the future use)</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiPipsValue">
            <summary>
            Pips value 
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPipsValue.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPipsValue.Value">
            <summary>Value</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition">
            <summary>
            Position information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.Id">
            <summary>Position Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.Symbol">
            <summary>Position symbol</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.LongAmount">
            <summary>Position long (buy) amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.LongPrice">
            <summary>Position long (buy) price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.ShortAmount">
            <summary>Position short (sell) amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.ShortPrice">
            <summary>Position short (sell) price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.Commission">
            <summary>Commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.AgentCommission">
            <summary>Agent commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.Swap">
            <summary>Swap</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.Modified">
            <summary>Last modify time</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.Margin">
            <summary>Margin</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.Profit">
            <summary>Profit</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.CurrentBestAsk">
            <summary>Current Best Ask Price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.CurrentBestBid">
            <summary>Current Best Bid Price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.TransferringCoefficient">
            <summary>TransferringCoefficient</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.Created">
            <summary>Created time</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.#ctor(TickTrader.BusinessObjects.Requests.PositionInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.#ctor(TickTrader.BusinessObjects.NetPosition)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiPosition.#ctor(TickTrader.BusinessObjects.PositionSnapshot,TickTrader.BusinessObjects.AccountingTypes)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryBars">
            <summary>
            Quote history bars
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryBars.From">
            <summary>From timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryBars.To">
            <summary>To timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryBars.Bars">
            <summary>Quote hisory bars</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryBars.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryBars.#ctor(TickTrader.BusinessObjects.QuoteHistory.MarketHistoryItemsReport{TickTrader.Common.Business.HistoryBar},System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryBarsCache">
            <summary>
            Quote history bars cache
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryBarsCache.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryBarsCache.Bars">
            <summary>Quote hisory bars</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryBarsCache.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryBarsCache.#ctor(System.Collections.Generic.List{TickTrader.Common.Business.HistoryBar},System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryInfo">
            <summary>
            Quote history meta information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryInfo.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryInfo.AvailableFrom">
            <summary>Avliable from timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryInfo.AvailableTo">
            <summary>Avliable to timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryInfo.LastTickId">
            <summary>Last tick Id</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryInfo.#ctor(TickTrader.BusinessObjects.QuoteHistory.HistoryInfo,System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryPeriodicity">
            <summary>
            Quote history periodicity
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryPeriodicity.Periodicity">
            <summary>Periodicity name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryPeriodicity.TimeInterval">
            <summary>Time interval</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryPeriodicity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryPeriodicity.#ctor(TickTrader.BusinessObjects.Periodicity,TickTrader.Common.Time.TimeInterval)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryPeriodicities">
            <summary>
            Quote history periodicity list
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryPeriodicities.Periodicities">
            <summary>Periodicity name</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryPeriodicities.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryPeriodicities.#ctor(System.Collections.Generic.Dictionary{TickTrader.BusinessObjects.Periodicity,TickTrader.Common.Time.TimeInterval})">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryTicks">
            <summary>
            Quote history ticks
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryTicks.From">
            <summary>From timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryTicks.To">
            <summary>To timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryTicks.Ticks">
            <summary>Quote hisory ticks</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryTicks.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryTicks.#ctor(TickTrader.BusinessObjects.QuoteHistory.MarketHistoryItemsReport{TickTrader.BusinessObjects.TickValue},System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryLevel2">
            <summary>
            Quote history level2 ticks
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryLevel2.From">
            <summary>From timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryLevel2.To">
            <summary>To timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryLevel2.Ticks">
            <summary>Quote hisory ticks</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryLevel2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryLevel2.#ctor(TickTrader.BusinessObjects.QuoteHistory.MarketHistoryItemsReport{TickTrader.BusinessObjects.TickValue},System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryTicksCache">
            <summary>
            Quote history ticks cache
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryTicksCache.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryTicksCache.Ticks">
            <summary>Quote hisory ticks</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryTicksCache.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryTicksCache.#ctor(System.Collections.Generic.List{TickTrader.BusinessObjects.TickValue},System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryLevel2Cache">
            <summary>
            Quote history level2 ticks cache
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryLevel2Cache.Ticks">
            <summary>Quote hisory ticks</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryLevel2Cache.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiQuoteHistoryLevel2Cache.#ctor(System.Collections.Generic.List{TickTrader.BusinessObjects.TickValue},System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountNotification">
            <summary>
            Account notification
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountNotification.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountNotification.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountNotification.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountNotification.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountNotification.#ctor(TickTrader.BusinessObjects.Requests.ClientNotification)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountRequest">
            <summary>
            Account request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountResponse">
            <summary>
            Account response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.AccountResponse.#ctor(TickTrader.BusinessObjects.Requests.AccountInfoReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsParams">
            <summary>
            Assets list request params (Cash accounts only!)
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsParams.Currency">
            <summary>Currency name</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsRequest">
            <summary>
            Assets list request (Cash accounts only!)
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsResult">
            <summary>
            Assets list result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsResult.Assets">
            <summary>List of assets</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsResponse">
            <summary>
            Assets list response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.AssetsResponse.#ctor(TickTrader.BusinessObjects.Requests.AssetsReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeParam">
            <summary>
            Feed subscribe/unsubscribe request param
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeParam.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeParam.BarParams">
            <summary>Bar params</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeParams">
            <summary>
            Feed subscribe/unsubscribe request params
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeParams.Subscribe">
            <summary>Subscription list</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeParams.Unsubscribe">
            <summary>Unsubscription list</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeRequest">
            <summary>
            Feed subscribe/unsubscribe request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeRequest.ToTickTraderRequest">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeResponse">
            <summary>
            Feed subscribe/unsubscribe response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.BarFeedSubscribeResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyParams">
            <summary>
            Currencies list request params
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyParams.Currency">
            <summary>Currency name or names separated by whitespace</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyParams.Type">
            <summary>Currency type name or names separated by whitespace</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesRequest">
            <summary>
            Currencies list request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesRequest.ToTickTraderRequest">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesResult">
            <summary>
            Currencies list result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesResult.Currencies">
            <summary>List of currencies</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesResponse">
            <summary>
            Currencies list response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrenciesResponse.#ctor(TickTrader.BusinessObjects.Requests.CurrenciesListReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyTypesRequest">
            <summary>
            Currency types list request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyTypesRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyTypesRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyTypesResult">
            <summary>
            Currency type list result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyTypesResult.CurrencyTypes">
            <summary>List of currency types</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyTypesResponse">
            <summary>
            CurrencyTypesResponse
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyTypesResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyTypesResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyTypesResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyTypesResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyTypesResponse.#ctor(TickTrader.BusinessObjects.Requests.CurrencyTypeListReport)">
            <summary>
            Convert from TickTrader report
            </summary>
            <param name="report"></param>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.CurrencyTypesResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
            <param name="requestId"></param>
            <param name="fault"></param>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotReport">
            <summary>
            Daily account snapshot report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotReport.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotReport.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotReport.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotReport.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotReport.#ctor(System.String,TickTrader.BusinessObjects.Requests.DailyAccountSnapshotReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotRequest">
            <summary>
            Daily account snapshot request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotResponse">
            <summary>
            Daily account snapshot response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.DailyAccountSnapshotResponse.#ctor(TickTrader.BusinessObjects.Requests.DailyAccountSnapshotReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendParams">
            <summary>
            Dividend list request params
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendRequest">
            <summary>
            Dividend list request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendResult">
            <summary>
            Dividend list result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendResult.Dividends">
            <summary>List of dividends</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendResponse">
            <summary>
            Dividend list response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.DividendResponse.#ctor(TickTrader.BusinessObjects.Requests.DividendListReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.DownloadBarsRequest">
            <summary>
            Trade history request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DownloadBarsRequest.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DownloadBarsRequest.From">
            <summary>Lower timestamp bound of the trade history request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DownloadBarsRequest.To">
            <summary>Upper timestamp bound of the trade history request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DownloadBarsRequest.Periodicity">
            <summary>
            Bars periodicity
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.DownloadBarsRequest.PriceType">
            <summary>
            Bars price type
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.ExecutionReport">
            <summary>
            Execution report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.ExecutionReport.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.ExecutionReport.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.ExecutionReport.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.ExecutionReport.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.ExecutionReport.#ctor(TickTrader.BusinessObjects.Requests.ExecutionReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedBarUpdate.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedBarUpdate.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedBarUpdate.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedBarUpdate.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedBarUpdate.#ctor(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TickTrader.BusinessObjects.BarParams,TickTrader.BusinessObjects.BarUpdate}})">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeParam">
            <summary>
            Feed subscribe/unsubscribe request param
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeParam.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeParam.BookDepth">
            <summary>Book depth</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeParam.FrequencyPriority">
            <summary>Frequency priority</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeParams">
            <summary>
            Feed subscribe/unsubscribe request params
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeParams.Subscribe">
            <summary>Subscription list</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeParams.Unsubscribe">
            <summary>Unsubscription list</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeRequest">
            <summary>
            Feed subscribe/unsubscribe request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeRequest.ToTickTraderRequest">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeResult">
            <summary>
            Feed subscribe/unsubscribe result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeResult.Snapshot">
            <summary>Feed ticks snapshot</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeResponse">
            <summary>
            Feed subscribe/unsubscribe response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedSubscribeResponse.#ctor(TickTrader.BusinessObjects.Requests.TickSubscriptionUpdateRequest,TickTrader.BusinessObjects.Requests.TickSubscriptionUpdateReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedTickUpdate">
            <summary>
            Feed tick update
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedTickUpdate.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedTickUpdate.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedTickUpdate.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedTickUpdate.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.FeedTickUpdate.#ctor(TickTrader.Common.Business.FeedTick,System.String,System.Int32)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryRequest">
            <summary>
            Interest Rate History request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryResponse">
            <summary>
            Interest Rate History response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.InterestRateHistoryResponse.#ctor(TickTrader.BusinessObjects.Requests.InterestRateChangeHistoryReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonError">
            <summary>
            JSON error
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonError.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonError.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonError.Error">
            <summary>Error message</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonError.#ctor(System.String)">
            <summary>
            Create JSON error with the given message
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonError.#ctor(System.String,System.String)">
            <summary>
            Create JSON error with the given message and Id
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonRequest">
            <summary>
            JSON request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonResponse">
            <summary>
            JSON response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.JsonResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginParams">
            <summary>
            Login request params
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginParams.AuthType">
            <summary>Authentication type (Basic, HMAC)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginParams.WebApiId">
            <summary>Web API token Id (Basic, HMAC)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginParams.WebApiKey">
            <summary>Web API token key (Basic, HMAC)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginParams.WebApiSecret">
            <summary>Web API token secret (Basic)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginParams.Timestamp">
            <summary>Client timestamp (HMAC)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginParams.Signature">
            <summary>Request signature (HMAC)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginParams.DeviceId">
            <summary>Device Id (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginParams.AppSessionId">
            <summary>Application Session Id (optional)</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginRequest">
            <summary>
            Login request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginResponseResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginResponseResult.Info">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginResponseResult.TwoFactorFlag">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginResponse">
            <summary>
            Login response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.LoginResponse.#ctor(System.String,System.Boolean)">
            <summary>
            Convert from TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.LogoffResponse">
            <summary>
            Logoff response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LogoffResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LogoffResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LogoffResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.LogoffResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.LogoffResponse.#ctor(System.String)">
            <summary>
            Create logoff response with the given message
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorParams">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorParams.OneTimePassword">
            <summary>
            One-time password
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorRequest.Params">
            <summary>Web API token Id</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorRequest.ToTickTraderTfaRequest">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorResponseResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorResponseResult.Info">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorResponseResult.ExpireTime">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorResponse.#ctor(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="result"></param>
            <param name="expireTime"></param>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TwoFactorResponse.#ctor(TickTrader.BusinessObjects.Requests.TwoFactorAuthReport)">
            <summary>
            
            </summary>
            <param name="report"></param>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionParams">
            <summary>
            MergerAndAcquisition list request params
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionRequest">
            <summary>
            MergerAndAcquisition list request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionRequest.ToTickTraderMergerAndAcquisitionRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionResult">
            <summary>
            MergerAndAcquisition list result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionResult.MergersAndAcquisitions">
            <summary>List of mergerAndAcquisitions</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionListResponse">
            <summary>
            MergerAndAcquisition list response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionListResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionListResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionListResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionListResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionListResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.MergerAndAcquisitionListResponse.#ctor(TickTrader.BusinessObjects.Requests.MergerAndAcquisitionListReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionParams">
            <summary>
            Positions list request params (Net accounts only!)
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionParams.Id">
            <summary>Position Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionParams.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsRequest">
            <summary>
            Positions list request (Net accounts only!)
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsRequest.ToTickTraderRequest(System.Int64,System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsRequest.ToTickTraderRequest(System.Int64,System.String)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsResult">
            <summary>
            Positions list result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsResult.Positions">
            <summary>List of positions</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsResponse">
            <summary>
            Positions list response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsResponse.#ctor(TickTrader.BusinessObjects.Requests.PositionInfoReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.PositionsResponse.#ctor(TickTrader.BusinessObjects.Requests.PositionReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheRequestParams">
            <summary>
            Quote history bars cache request parameters
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheRequestParams.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheRequestParams.Periodicity">
            <summary>Periodicity</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheRequestParams.PriceType">
            <summary>Price type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheRequestParams.Timestamp">
            <summary>Timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheRequestParams.Count">
            <summary>Count</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheRequest">
            <summary>
            Quote history bars cache request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheResponse">
            <summary>
            Quote history bars cache response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsCacheResponse.#ctor(TickTrader.BusinessObjects.Requests.QuoteHistoryBarsCacheReport,System.String)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsRequestParams">
            <summary>
            Quote history bars request parameters
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsRequestParams.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsRequestParams.Periodicity">
            <summary>Periodicity</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsRequestParams.PriceType">
            <summary>Price type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsRequestParams.Timestamp">
            <summary>Timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsRequestParams.Count">
            <summary>Count</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsRequest">
            <summary>
            Quote history bars request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsResponse">
            <summary>
            Quote history bars response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsResponse.#ctor(TickTrader.BusinessObjects.Requests.QuoteHistoryBarsReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoRequestParams">
            <summary>
            Quote history bars meta information request parameters
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoRequestParams.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoRequestParams.Periodicity">
            <summary>Periodicity</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoRequestParams.PriceType">
            <summary>Price type</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoRequest">
            <summary>
            Quote history bars meta information request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoRequestParams">
            <summary>
            Quote history ticks meta information request parameters
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoRequestParams.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoRequestParams.Level2">
            <summary>Include ticks level2?</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoRequest">
            <summary>
            Quote history ticks meta information request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoRequest.ToTickTraderRequest(System.Int64,System.Boolean)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksInfoRequestParams">
            <summary>
            Quote history vwap ticks meta information request parameters
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksInfoRequestParams.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksInfoRequestParams.Degree">
            <summary>Include ticks level2?</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksInfoRequest">
            <summary>
            Quote history vwap ticks meta information request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksInfoRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksInfoRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksInfoRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksInfoRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksInfoRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoResponse">
            <summary>
            Quote history bars meta information response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryBarsInfoResponse.#ctor(TickTrader.BusinessObjects.Requests.QuoteHistoryInfoReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoResponse">
            <summary>
            Quote history ticks meta information response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksInfoResponse.#ctor(TickTrader.BusinessObjects.Requests.QuoteHistoryInfoReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesRequestParams">
            <summary>
            Quote history periodicities request parameters
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesRequestParams.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesRequest">
            <summary>
            Quote history supported periodicities request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesResponse">
            <summary>
            Quote history supported symobls response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryPeriodicitiesResponse.#ctor(TickTrader.BusinessObjects.Requests.QuoteHistoryPeriodicitiesReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistorySymbolsRequest">
            <summary>
            Quote history supported symbols request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistorySymbolsRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistorySymbolsRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistorySymbolsRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistorySymbolsRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistorySymbolsResponse">
            <summary>
            Quote history supported symobls response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistorySymbolsResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistorySymbolsResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistorySymbolsResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistorySymbolsResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistorySymbolsResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistorySymbolsResponse.#ctor(TickTrader.BusinessObjects.Requests.QuoteHistorySymbolsReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVersionRequest">
            <summary>
            Quote history version request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVersionRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVersionRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVersionRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVersionRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVersionResponse">
            <summary>
            Quote history version response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVersionResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVersionResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVersionResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVersionResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVersionResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVersionResponse.#ctor(TickTrader.BusinessObjects.Requests.QuoteHistoryVersionReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheRequestParams">
            <summary>
            Quote history ticks cache request parameters
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheRequestParams.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheRequestParams.Timestamp">
            <summary>Timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheRequestParams.Count">
            <summary>Count</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheRequest">
            <summary>
            Quote history ticks cache request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheRequest.ToTickTraderRequest(System.Int64,System.Boolean)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheResponse">
            <summary>
            Quote history tisks cache response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksCacheResponse.#ctor(TickTrader.BusinessObjects.Requests.QuoteHistoryTicksCacheReport,System.String)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2CacheResponse">
            <summary>
            Quote history level2 tisks cache response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2CacheResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2CacheResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2CacheResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2CacheResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2CacheResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2CacheResponse.#ctor(TickTrader.BusinessObjects.Requests.QuoteHistoryTicksCacheReport,System.String)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksRequestParams">
            <summary>
            Quote history ticks request parameters
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksRequestParams.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksRequestParams.Timestamp">
            <summary>Timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksRequestParams.Count">
            <summary>Count</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksRequest">
            <summary>
            Quote history ticks request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksRequest.ToTickTraderRequest(System.Int64,System.Boolean)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksResponse">
            <summary>
            Quote history tisks response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryTicksResponse.#ctor(TickTrader.BusinessObjects.Requests.QuoteHistoryTicksReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2Response">
            <summary>
            Quote history level2 tisks response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2Response.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2Response.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2Response.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2Response.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2Response.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryLevel2Response.#ctor(TickTrader.BusinessObjects.Requests.QuoteHistoryTicksReport,System.String)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksCacheRequestParams">
            <summary>
            Quote history ticks cache request parameters
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksCacheRequestParams.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksCacheRequestParams.Timestamp">
            <summary>Timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksCacheRequestParams.Count">
            <summary>Count</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksCacheRequestParams.Degree">
            <summary>VWAP Degree</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksCacheRequest">
            <summary>
            Quote history ticks cache request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksCacheRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksCacheRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksCacheRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksCacheRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksCacheRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksRequestParams">
            <summary>
            Quote history ticks request parameters
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksRequestParams.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksRequestParams.Timestamp">
            <summary>Timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksRequestParams.Count">
            <summary>Count</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksRequestParams.Degree">
            <summary>VWAP Degree</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksRequest">
            <summary>
            Quote history ticks request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.QuoteHistoryVWAPTicksRequest.ToTickTraderRequest(System.Int64,System.Boolean)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.SessionInfoRequest">
            <summary>
            Session info request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SessionInfoRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SessionInfoRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SessionInfoRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SessionInfoRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.SessionInfoResponse">
            <summary>
            Session info response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SessionInfoResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SessionInfoResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SessionInfoResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SessionInfoResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SessionInfoResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SessionInfoResponse.#ctor(TickTrader.BusinessObjects.Requests.SessionStatusReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitParams">
            <summary>
            Split list request params
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitRequest">
            <summary>
            Split list request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitRequest.ToTickTraderRequest">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitRequest.ToTickTraderSplitRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitResult">
            <summary>
            Split list result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitResult.Splits">
            <summary>List of splits</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitListResponse">
            <summary>
            Split list response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitListResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitListResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitListResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitListResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitListResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SplitListResponse.#ctor(TickTrader.BusinessObjects.Requests.SplitListReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolParams">
            <summary>
            Symbols list request params
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolParams.Symbol">
            <summary>Symbol name or names separated by whitespace</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolParams.Security">
            <summary>Security name or names separated by whitespace</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsRequest">
            <summary>
            Symbols list request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsRequest.ToTickTraderRequest">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsResult">
            <summary>
            Symbols list result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsResult.Symbols">
            <summary>List of symbols</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsResponse">
            <summary>
            Symbols list response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.SymbolsResponse.#ctor(TickTrader.BusinessObjects.Requests.SymbolsListReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoRequest.FirstRequest">
            <summary>Request parametes</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoRequest.SecondRequest">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoResult.FirstTrade">
            <summary>Created trade</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateOcoResponse.#ctor(TickTrader.BusinessObjects.Requests.OpenOCOOrdersReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateRequest">
            <summary>
            Trade create request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateResult">
            <summary>
            Trade create result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateResult.Trade">
            <summary>Created trade</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateResponse">
            <summary>
            Trade create response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeCreateResponse.#ctor(TickTrader.BusinessObjects.Requests.OpenOrderReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteRequest">
            <summary>
            Trade delete request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResult">
            <summary>
            Trade delete result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResult.Type">
            <summary>Delete trade type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResult.Trade">
            <summary>Deleted trade</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResult.ByTrade">
            <summary>By trade (optional)</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResult.#ctor(TickTrader.BusinessObjects.Requests.CancelOrderReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResult.#ctor(TickTrader.BusinessObjects.Requests.ClosePositionReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResponse">
            <summary>
            Trade delete response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResponse.#ctor(TickTrader.BusinessObjects.Requests.CancelOrderReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeDeleteResponse.#ctor(TickTrader.BusinessObjects.Requests.ClosePositionReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryReport">
            <summary>
            Trade history report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryReport.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryReport.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryReport.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryReport.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryReport.#ctor(System.String,TickTrader.BusinessObjects.TradeReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryRequest">
            <summary>
            Trade history request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryResponse">
            <summary>
            Trade history response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeHistoryResponse.#ctor(TickTrader.BusinessObjects.Requests.TradeHistoryReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyRequest">
            <summary>
            Trade modify request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyResult">
            <summary>
            Trade modify result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyResult.Trade">
            <summary>Modified trade</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyResponse">
            <summary>
            Trade modify response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeModifyResponse.#ctor(TickTrader.BusinessObjects.Requests.OrderReplaceReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeServerInfoRequest">
            <summary>
            Trade server info request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeServerInfoRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeServerInfoRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeServerInfoRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeServerInfoRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeServerInfoResponse">
            <summary>
            Trade server info response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeServerInfoResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeServerInfoResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeServerInfoResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeServerInfoResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeServerInfoResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeServerInfoResponse.#ctor(TickTrader.BusinessObjects.Requests.TradeServerInfoReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeSessionInfoRequest">
            <summary>
            Trade session info request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeSessionInfoRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeSessionInfoRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeSessionInfoRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeSessionInfoRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeSessionInfoResponse">
            <summary>
            Trade session info response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeSessionInfoResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeSessionInfoResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeSessionInfoResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeSessionInfoResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeSessionInfoResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradeSessionInfoResponse.#ctor(TickTrader.BusinessObjects.Requests.TradingSessionStatusReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesParams">
            <summary>
            Trades list request params
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesParams.Id">
            <summary>Trade Id</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesRequest">
            <summary>
            Trades list request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesRequest.Id">
            <summary>Request Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesRequest.Request">
            <summary>Request name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesRequest.Params">
            <summary>Request parametes</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesRequest.Validate(System.String@)">
            <summary>
            Validate client request
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesRequest.ToTickTraderRequest(System.Int64)">
            <summary>
            Convert to TickTrader request
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesResult">
            <summary>
            Trades list result
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesResult.Trades">
            <summary>List of trades</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesResponse">
            <summary>
            Trades list response
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesResponse.Id">
            <summary>Response Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesResponse.Response">
            <summary>Response name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesResponse.Error">
            <summary>Error message</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesResponse.Result">
            <summary>Result value</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesResponse.#ctor(System.String,TickTrader.BusinessObjects.Messaging.ServerFault)">
            <summary>
            Convert from TickTrader error
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.Requests.TradesResponse.#ctor(TickTrader.BusinessObjects.Requests.OrdersListReport)">
            <summary>
            Convert from TickTrader report
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiSplit">
            <summary>
            Account information
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiSplit.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiSplit.#ctor(TickTrader.BusinessObjects.SplitInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiSplitRequest">
            <summary>
            Splits request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSplitRequest.Currencies">
            <summary>List of currencies (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSplitRequest.TimestampFrom">
            <summary>Lower timestamp bound of splits request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSplitRequest.TimestampTo">
            <summary>Upper timestamp bound of splits request (optional)</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol">
            <summary>
            Symbol information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.Precision">
            <summary>Symbol precision (digits after decimal point)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.IsTradeAllowed">
            <summary>Is trade allowed for the symbol?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.MarginMode">
            <summary>Margin calculation mode</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.ProfitMode">
            <summary>Profit calculation mode</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.ContractSize">
            <summary>Contract size for the symbol</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.MarginHedged">
            <summary>The factor which is used to calculate margin for hedged orders/positions</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.MarginFactor">
            <summary>The factor of margin calculation</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.MarginCurrency">
            <summary>Margin currency name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.MarginCurrencyPrecision">
            <summary>Margin currency precision</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.ProfitCurrency">
            <summary>Profit currency name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.ProfitCurrencyPrecision">
            <summary>Profit currency precision</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.Description">
            <summary>Symbol description</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.Schedule">
            <summary>Symbol schedule name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.Color">
            <summary>Symbol color</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.SwapEnabled">
            <summary>Is swap enabled for the symbol?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.SwapType">
            <summary>Swap type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.SwapSizeShort">
            <summary>Short swap size</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.SwapSizeLong">
            <summary>Long swap size</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.TripleSwapDay">
            <summary>Long swap size</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.MinTradeAmount">
            <summary>Minimal trade amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.MaxTradeAmount">
            <summary>Maximal trade amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.TradeAmountStep">
            <summary>Trade amount step</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.CommissionType">
            <summary>Commission type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.CommissionChargeType">
            <summary>Commission charge type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.Commission">
            <summary>Commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.LimitsCommission">
            <summary>Limits commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.MinCommission">
            <summary>Commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.MinCommissionCurrency">
            <summary>Commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.DefaultSlippage">
            <summary>Default Slippage</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.StatusGroupId">
            <summary>Status group id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.SecurityName">
            <summary>Security name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.SecurityDescription">
            <summary>Security description</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.StopOrderMarginReduction">
            <summary>Margin reduction for Stop orders</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.HiddenLimitOrderMarginReduction">
            <summary>Margin reduction for Hidden Limit orders</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.IsCloseOnly">
            <summary>Close-only trade mode</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.IsLongOnly">
            <summary>Long-only trade mode</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.ISIN">
            <summary>International Securities Identification Number</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.SlippageType">
            <summary>Default Slippage Type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.ExtendedName">
            <summary>Extended name of symbol</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.TradingMode">
            <summary>Symbol's trading mode</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiSymbol.#ctor(TickTrader.BusinessObjects.GroupSymbolInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiThrottling">
            <summary>
            Throttling information
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiThrottling.#ctor(TickTrader.BusinessObjects.ThrottlingInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker">
            <summary>
            Symbol ticker information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.Symbol">
            <summary>Symbol name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.BestBid">
            <summary>Best bid</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.BestAsk">
            <summary>Best ask</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.LastBuyPrice">
            <summary>Last buy price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.LastBuyVolume">
            <summary>Last buy volume</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.LastBuyTimestamp">
            <summary>Last buy timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.LastSellPrice">
            <summary>Last sell price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.LastSellVolume">
            <summary>Last sell volume</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.LastSellTimestamp">
            <summary>Last sell timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.DailyBestBuyPrice">
            <summary>Daily best buy price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.DailyBestSellPrice">
            <summary>Daily best sell price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.DailyTradedBuyVolume">
            <summary>Daily traded buy volume</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.DailyTradedSellVolume">
            <summary>Daily traded sell volume</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.DailyTradedTotalVolume">
            <summary>Daily traded total volume</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTicker.#ctor(TickTrader.BusinessObjects.Ticker)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade">
            <summary>
            Trade information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Id">
            <summary>Trade Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.ClientId">
            <summary>Trade client Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.AccountId">
            <summary>Account Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Type">
            <summary>Trade type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.InitialType">
            <summary>Trade initial type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Side">
            <summary>Trade side</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Status">
            <summary>Trade status</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Symbol">
            <summary>Symbol</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.SymbolPrecision">
            <summary>Symbol Precision</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.StopPrice">
            <summary>Stop price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Price">
            <summary>Price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.CurrentPrice">
            <summary>Current price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.InitialAmount">
            <summary>Initial amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.RemainingAmount">
            <summary>Remaining amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.FilledAmount">
            <summary>Filled amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.MaxVisibleAmount">
            <summary>Max visible amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.StopLoss">
            <summary>Stop loss</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.TakeProfit">
            <summary>Take profit</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Margin">
            <summary>Margin</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Profit">
            <summary>Profit</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Commission">
            <summary>Commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.AgentCommission">
            <summary>Agent commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Swap">
            <summary>Swap</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.ImmediateOrCancel">
            <summary>Immediate-Or-Cancel flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.MarketWithSlippage">
            <summary>Market-With-Slippage flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.FillOrKill">
            <summary>Fill-Or-Kill flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.OneCancelsTheOther">
            <summary>One Cancels The Other flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Created">
            <summary>Created timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Expired">
            <summary>Expired timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Modified">
            <summary>Modified timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Filled">
            <summary>Filled timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.PositionCreated">
            <summary>Position created timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Comment">
            <summary>Comment</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.ClientApp">
            <summary>Client application (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Slippage">
            <summary>Slippage (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.Rebate">
            <summary>Commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.RelatedTradeId">
            <summary>Related Trade Id (may concerns to option OneCancelsTheOther)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.ContingentOrder">
            <summary>Contingent order flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.TriggerType">
            <summary>Trigger Type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.TriggerTime">
            <summary>Trigger Time</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.OrderIdTriggeredBy">
            <summary>Commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.ClosePrice">
            <summary>Close Price</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTrade.#ctor(TickTrader.BusinessObjects.Order)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate">
            <summary>
            Create new trade request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.ClientId">
            <summary>Trade client Id (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.Type">
            <summary>Trade type (required)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.Side">
            <summary>Trade side (required)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.Symbol">
            <summary>Symbol (required)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.Price">
            <summary>Price (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.StopPrice">
            <summary>Stop Price (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.Amount">
            <summary>Amount (required)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.MaxVisibleAmount">
            <summary>Hidden amount. Valid only for Limit orders (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.StopLoss">
            <summary>Stop loss (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.TakeProfit">
            <summary>Take profit (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.Expired">
            <summary>Expired timestamp (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.ImmediateOrCancel">
            <summary>Immediate or cancel execution option (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.MarketWithSlippage">
            <summary>Market with slippage execution option (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.FillOrKill">
            <summary>Fill or kill execution option (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.Comment">
            <summary>Comment (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.ClientIp">
            <summary>Client IP address (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.ClientApp">
            <summary>Client application (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.Slippage">
            <summary>Slippage (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.OneCancelsTheOther">
            <summary>One Cancels The Other execution option (optional, is using with param RelatedTradeId)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.OcoEqualAmount">
            <summary>True means taking the amount from the other order otherwise from the request</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.RelatedTradeId">
            <summary>Related Trade Id (optional, must be not null if option OneCancelsTheOther is true)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.ContingentOrder">
            <summary>Contingent Other execution option (optional, is using with param TriggerType)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.TriggerType">
            <summary>Trigger Type (optional, must be not null if order is contingent)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.TriggerTime">
            <summary>Trigger Time (optional, must be not null if order is contingent and Trigger Type is OnTime)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.OrderIdTriggeredBy">
            <summary>Order ID Triggered By (optional, must be not null if order is contingent and Trigger Type is OnPendingOrderExpired or OnPendingOrderPartiallyFilled)</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeCreate.Convert(System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiOcoTradeRequest">
            <summary>
            Create new oco trades request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiOcoTradeRequest.FirstRequest">
            <summary>Request parametes</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiOcoTradeRequest.SecondRequest">
            <summary>Request parametes</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.TradeDeleteTypes">
            <summary>
            Delete trade request types
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.WebApi.Domain.TradeDeleteTypes.Cancel">
            <summary>Cancel pending trade</summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.WebApi.Domain.TradeDeleteTypes.Close">
            <summary>Close position</summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.WebApi.Domain.TradeDeleteTypes.CloseBy">
            <summary>Close one position by another position</summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeDelete">
            <summary>
            Delete trade request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeDelete.Type">
            <summary>Delete operation type (required)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeDelete.Id">
            <summary>Trade Id (required)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeDelete.Amount">
            <summary>Amount (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeDelete.ById">
            <summary>By trade Id (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeDelete.ClientIp">
            <summary>Client IP address (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeDelete.ClientApp">
            <summary>Client application (optional)</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeDelete.Convert(System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory">
            <summary>
            Trade history record
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.Id">
            <summary>Trade history record Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TransactionType">
            <summary>Trade transaction type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TransactionReason">
            <summary>Trade transaction reason</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TransactionTimestamp">
            <summary>Trade transaction timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.Symbol">
            <summary>Symbol</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.SymbolPrecision">
            <summary>Symbol precision</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TradeId">
            <summary>Trade Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ClientTradeId">
            <summary>Client trade Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TradeSide">
            <summary>Trade side</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TradeType">
            <summary>Trade type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TradeCreated">
            <summary>Trade created timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TradeModified">
            <summary>Trade modified timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TradeAmount">
            <summary>Trade amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TradeMaxVisibleAmount">
            <summary>Trade max visible amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TradeHiddenAmount">
            <summary>Trade hidden amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TradeInitialAmount">
            <summary>Trade initial amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TradeLastFillAmount">
            <summary>Trade last fill amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TradePrice">
            <summary>Trade price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TradeFillPrice">
            <summary>Trade fill price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.RequestTimestamp">
            <summary>Request timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.RequestOpenPrice">
            <summary>Request open price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.RequestOpenAmount">
            <summary>Request open amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.RequestClosePrice">
            <summary>Request close price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.RequestCloseAmount">
            <summary>Request close amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.PositionId">
            <summary>Position Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.PositionById">
            <summary>Position by Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.PositionAmount">
            <summary>Position amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.PositionInitialAmount">
            <summary>Position initial amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.PositionLastAmount">
            <summary>Position last amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.PositionOpenPrice">
            <summary>Position open price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.PositionOpened">
            <summary>Position opened timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.PositionClosePrice">
            <summary>Position close price</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.PositionClosed">
            <summary>Position closed timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.Balance">
            <summary>Balance value</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.BalanceMovement">
            <summary>Balance movement value</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.BalanceCurrency">
            <summary>Balance currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.StopLoss">
            <summary>Stop loss</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TakeProfit">
            <summary>Take profit</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.Commission">
            <summary>Commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.CommissionCurrency">
            <summary>Commission Currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.AgentCommission">
            <summary>Agent commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ReducedOpenCommissionFlag">
            <summary>Reduced Open Commission Flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ReducedCloseCommissionFlag">
            <summary>Reduced Close Commission Flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.MinCommissionCurrency">
            <summary>Minimal Commission Currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.MinCommissionConversionRate">
            <summary>Minimal Commission Conversion Rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.Swap">
            <summary>Swap</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.Rebate">
            <summary>Commission</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.RebateCurrency">
            <summary>Commission Currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ImmediateOrCancel">
            <summary>Immediate-Or-Cancel flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.MarketWithSlippage">
            <summary>Market-With-Slippage flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.FillOrKill">
            <summary>Fill-Or-Kill flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.OneCancelsTheOther">
            <summary>One Cancels The Other flag</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.Expired">
            <summary>Expired timestamp</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.PosModified">
            <summary>Time of described position modification.</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.Comment">
            <summary>Comment</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.MarginRateInitial">
            <summary>Initial margin rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.OpenConversionRate">
            <summary>Open conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.CloseConversionRate">
            <summary>Close conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ProfitToUsdConversionRate">
            <summary>Conversion rate to convert profit to USD</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.UsdToProfitConversionRate">
            <summary>Conversion rate to convert USD to profit currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.BalanceToUsdConversionRate">
            <summary>Conversion rate to convert balance currency to USD</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.UsdToBalanceConversionRate">
            <summary>Conversion rate to convert USD to balance currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.MarginCurrencyToUsdConversionRate">
            <summary>Conversion rate to convert margin currency to USD</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.UsdToMarginCurrencyConversionRate">
            <summary>Conversion rate to convert USD to margin currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.MarginCurrency">
            <summary>Margin currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ProfitCurrencyToUsdConversionRate">
            <summary>Conversion rate to convert profit currency to USD</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.UsdToProfitCurrencyConversionRate">
            <summary>Conversion rate to convert USD to profit currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ProfitCurrency">
            <summary>Profit currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.SrcAssetToUsdConversionRate">
            <summary>Conversion rate to convert source asset currency to USD</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.UsdToSrcAssetConversionRate">
            <summary>Conversion rate to convert USD to source asset currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.DstAssetToUsdConversionRate">
            <summary>Conversion rate to convert destination asset currency to USD</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.UsdToDstAssetConversionRate">
            <summary>Conversion rate to convert USD to destination asset currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.SrcAssetCurrency">
            <summary>Source asset currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.SrcAssetAmount">
            <summary>Source asset final amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.SrcAssetMovement">
            <summary>Amount on which source asset was changed during described transaction</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.DstAssetCurrency">
            <summary>Destination asset currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.DstAssetAmount">
            <summary>Destination asset final amount</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.DstAssetMovement">
            <summary>Amount on which destinaction asset was changed during described transaction</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ClientApp">
            <summary>Client appliction</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.Slippage">
            <summary>Slippage</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ProfitToReportConversionRate">
            <summary>Conversion rate to convert profit to report currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ReportToProfitConversionRate">
            <summary>Conversion rate to convert report currency to profit</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.BalanceToReportConversionRate">
            <summary>Conversion rate to convert balance currency to report currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ReportToBalanceConversionRate">
            <summary>Conversion rate to convert report currency to balance currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.SrcAssetToReportConversionRate">
            <summary>Conversion rate to convert source asset currency to report currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ReportToSrcAssetConversionRate">
            <summary>Conversion rate to convert report currency to source asset currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.DstAssetToReportConversionRate">
            <summary>Conversion rate to convert destination asset currency to report currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ReportToDstAssetConversionRate">
            <summary>Conversion rate to convert report currency to destination asset currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.MarginCurrencyToBalanceConversionRate">
            <summary>Conversion rate to convert margin currency to balance currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.MarginCurrencyToReportConversionRate">
            <summary>Conversion rate to convert margin currency to report currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ReportToMarginCurrencyConversionRate">
            <summary>Conversion rate to convert report currency to margin currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ProfitCurrencyToReportConversionRate">
            <summary>Conversion rate to convert profit currency to report currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ReportToProfitCurrencyConversionRate">
            <summary>Conversion rate to convert report currency to profit currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ReportCurrency">
            <summary>Report currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TokenCommissionCurrency">
            <summary>Token commission currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TokenCommissionCurrencyDiscount">
            <summary>Token commission currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TokenCommissionConversionRate">
            <summary>Token commission conversion rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.SplitRatio">
            <summary>Split ratio</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.DividendGrossRate">
            <summary>Dividend gross rate</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.DividendToBalanceConversionRate">
            <summary>Conversion rate to convert dividend to balance currency</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.Taxes">
            <summary>Taxes</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.TaxValue">
            <summary>Tax value</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.RelatedTradeId">
            <summary>Related Trade Id (may concerns to option OneCancelsTheOther)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ParentOrderId">
            <summary>
            Parent Order Id
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.ParentOrderType">
            <summary>
            Parent Order Type
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistory.#ctor(TickTrader.BusinessObjects.TradeReport)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryReport">
            <summary>
            Trade history report
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryReport.IsLastReport">
            <summary>Is report last for paging request?</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryReport.TotalReports">
            <summary>Count of total reports</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryReport.Records">
            <summary>List of trade history records</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryReport.LastId">
            <summary>Last trade history record Id (used for paging)</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryReport.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryReport.#ctor(TickTrader.BusinessObjects.Requests.TradeHistoryReport)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryRequest">
            <summary>
            Trade history request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryRequest.TimestampFrom">
            <summary>Lower timestamp bound of the trade history request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryRequest.TimestampTo">
            <summary>Upper timestamp bound of the trade history request (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryRequest.OrderId">
            <summary>Order Id (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryRequest.SkipCancelOrder">
            <summary>Skip canel order history records (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryRequest.RequestDirection">
            <summary>Request paging direction ("Forward" or "Backward"). Default is "Forward" (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryRequest.RequestPageSize">
            <summary>Request paging size. Default is 100 (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryRequest.RequestLastId">
            <summary>Request paging last Id (optional)</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeHistoryRequest.Convert(System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify">
            <summary>
            Modify trade request
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.Id">
            <summary>Trade Id (required)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.Price">
            <summary>Price (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.StopPrice">
            <summary>Stop price (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.Amount">
            <summary>Amount (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.PrevAmount">
            <summary>Previous amount to check on server if threre was no amount modification during request. If PrevAmount is provided and server Amount is different modify operation will rejected (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.MaxVisibleAmount">
            <summary>Max visible amount. Valid only for Limit orders (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.StopLoss">
            <summary>Stop loss (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.TakeProfit">
            <summary>Take profit (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.Expired">
            <summary>Expired timestamp (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.Comment">
            <summary>Comment (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.ImmediateOrCancel">
            <summary>Immediate-Or-Cancel flag for stop-limit orders (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.FillOrKill">
            <summary>Fill-Or-Kill flag for pending orders (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.InFlightMitigation">
            <summary>In-Flight-Mitigation flag for limit orders (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.ClientIp">
            <summary>Client IP address (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.ClientApp">
            <summary>Client application (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.Slippage">
            <summary>New Slippage (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.AmountChange">
            <summary>A value by which the amount of pending order will be changed (replacement for Amount/PrevAmount/InFlightMitigation) (optional)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.OneCancelsTheOther">
            <summary>One Cancels The Other execution option (optional, is using with param RelatedTradeId)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.OcoEqualAmount">
            <summary>True means taking the amount from the other order otherwise from the request</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.RelatedTradeId">
            <summary>Related Trade Id (optional, must be not null if option OneCancelsTheOther is true)</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.TriggerType">
            <summary>Trigger Type</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.TriggerTime">
            <summary>Trigger Time</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.OrderIdTriggeredBy">
            <summary>Commission</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApi.Domain.WebApiTradeModify.Convert(System.String)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApiSessionStatus">
            <summary>
            Client session status
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiSessionStatus.ClientSessionId">
            <summary>Client session Id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiSessionStatus.ClientSessionCreated">
            <summary>Client session created time</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiSessionStatus.TradeAllowed">
            <summary>Trade allowed flag</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApiSessionStatus.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApiSessionStatus.#ctor(TickTrader.BusinessObjects.Requests.SessionStatusReport)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApiStatusGroup">
            <summary>
            Status group information
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiStatusGroup.StatusGroupId">
            <summary>Status group id</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiStatusGroup.SessionStatus">
            <summary>Trading session status</summary>
            <remarks>State of the trading session. Possible values: Closed, Opened</remarks>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiStatusGroup.SessionStartTime">
            <summary>Trading session start time</summary>
            <remarks>Start time of the current trading session</remarks>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiStatusGroup.SessionEndTime">
            <summary>Trading session end time</summary>
            <remarks>End time of the current trading session</remarks>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiStatusGroup.SessionOpenTime">
            <summary>Trading session open time</summary>
            <remarks>The time when the current trading session was opened</remarks>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiStatusGroup.SessionCloseTime">
            <summary>Trading session close time</summary>
            <remarks>The time when the current trading session will be closed</remarks>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiStatusGroup.DisabledFeatures">
            <summary>Trading session disabled features</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApiStatusGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApiStatusGroup.#ctor(TickTrader.BusinessObjects.StatusGroupInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApiTradeServerInfo">
            <summary>
            Trade server info
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.CompanyName">
            <summary>Company name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.CompanyFullName">
            <summary>Company full name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.CompanyDescription">
            <summary>Company description</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.CompanyAddress">
            <summary>Company address</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.CompanyEmail">
            <summary>Company email</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.CompanyPhone">
            <summary>Company phone</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.CompanyWebSite">
            <summary>Company web site</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerName">
            <summary>Server name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerFullName">
            <summary>Server full name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerDescription">
            <summary>Server descritpion</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerAddress">
            <summary>Server address</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerFixFeedSslPort">
            <summary>Server feed FIX SSSL port</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerFixTradeSslPort">
            <summary>Server trade FIX SSSL port</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerWebSocketFeedPort">
            <summary>Server feed web socket port</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerWebSocketTradePort">
            <summary>Server trade web socket port</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerRestPort">
            <summary>Server REST port</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerSfxQuoteFeedPort">
            <summary>Server Sfx quote feed port</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerSfxQuoteStorePort">
            <summary>Server Sfx quote store port</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerSfxOrderEntryPort">
            <summary>Server Sfx order entry port</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.ServerSfxTradeCapturePort">
            <summary>Server Sfx trade capture port</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.MobileHubApiAddress">
            <summary>Mobile Hub Api Address</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeServerInfo.SecondaryQuoteHistoryStorageAddress">
            <summary>Secondary Quote History Storage Address</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApiTradeServerInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApiTradeServerInfo.#ctor(TickTrader.BusinessObjects.TradeServerInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.BusinessObjects.WebApiTradeSessionStatus">
            <summary>
            Trading session status
            </summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeSessionStatus.PlatformName">
            <summary>Tick Trader Server name</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeSessionStatus.PlatformCompany">
            <summary>Tick Trader Server owner company</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeSessionStatus.PlatformAddress">
            <summary>Tick Trader Server address</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeSessionStatus.PlatformTimezoneOffset">
            <summary>Tick Trader Server time zone offset in hours</summary>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeSessionStatus.SessionId">
            <summary>Trading session Id</summary>
            <remarks>GUID for Trading Session (empty GUID for closed session)</remarks>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeSessionStatus.SessionStatus">
            <summary>Trading session status</summary>
            <remarks>State of the trading session. Possible values: Closed, Opened</remarks>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeSessionStatus.SessionStartTime">
            <summary>Trading session start time</summary>
            <remarks>Start time of the current trading session (the same meaning for opened and closed sessions)</remarks>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeSessionStatus.SessionEndTime">
            <summary>Trading session end time</summary>
            <remarks>End time of the current trading session (the same meaning for opened and closed sessions)</remarks>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeSessionStatus.SessionOpenTime">
            <summary>Trading session open time</summary>
            <remarks>
            Provides the open time of the current trading session in case of current session is opened. 
            Provides the open time of the next open trading session in case of current session is closed.
            </remarks>
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeSessionStatus.SessionCloseTime">
            <summary>Trading session close time</summary>
            <remarks>
            Provides the close time of the current trading session in case of current session is opened. 
            Provides the close time of the next open trading session in case of current session is closed.
            </remarks> 
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeSessionStatus.StatusGroups">
            <summary>Trading session status groups</summary>
            <remarks>
            List of trading session status groups.
            </remarks> 
        </member>
        <member name="P:TickTrader.BusinessObjects.WebApiTradeSessionStatus.DisabledFeatures">
            <summary>Trading session offTime disabled features</summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApiTradeSessionStatus.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.WebApiTradeSessionStatus.#ctor(TickTrader.BusinessObjects.Requests.TradingSessionStatusReport)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:TickTrader.Common.Business.FeedTick">
            <summary>
            Feed Tick
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.Symbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.Time">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.LastProcessedTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.BestAsk">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.BestBid">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.Level2">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.DisabledFiltration">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.IndicativeTick">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.AskPresent">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.BidPresent">
            <summary>
            
            </summary>
        </member>
        <member name="P:TickTrader.Common.Business.FeedTick.MetaData">
            <summary>
            
            </summary>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.#ctor">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Common.Business.FeedTick.#ctor(System.String,System.DateTime,System.Decimal,System.Double,System.Decimal,System.Double,System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Common.Business.FeedTick.#ctor(System.String,TickTrader.BusinessObjects.FeedTickId,TickTrader.Common.Business.FxPriceType,System.Decimal,System.Double,System.Int64)" -->
        <member name="M:TickTrader.Common.Business.FeedTick.#ctor(TickTrader.Common.Business.FeedTick,System.DateTime)">
            <summary>
            
            </summary>
            <param name="tick"></param>
            <param name="time"></param>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.#ctor(System.String,System.DateTime,System.Collections.Generic.IEnumerable{TickTrader.Common.Business.FeedLevel2Record},System.Int64)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="time"></param>
            <param name="level2"></param>
            <param name="orderId"></param>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.#ctor(System.String,System.DateTime,System.Byte,System.Collections.Generic.IEnumerable{TickTrader.Common.Business.FeedLevel2Record},System.Int64)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="time"></param>
            <param name="timeIndex"></param>
            <param name="level2"></param>
            <param name="orderId"></param>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.#ctor(System.String,TickTrader.BusinessObjects.FeedTickId,System.Collections.Generic.IEnumerable{TickTrader.Common.Business.FeedLevel2Record},System.Int64)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="id"></param>
            <param name="level2"></param>
            <param name="orderId"></param>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.#ctor(System.String,TickTrader.BusinessObjects.FeedTickId,System.Int64)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="id"></param>
            <param name="orderId"></param>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.ConstructFormPreparedData(System.String,TickTrader.BusinessObjects.FeedTickId,TickTrader.Common.Business.FeedLevel2Record[],System.Nullable{TickTrader.Common.Business.FeedLevel2Record},System.Nullable{TickTrader.Common.Business.FeedLevel2Record},System.Boolean,System.Boolean,System.Int64)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="id"></param>
            <param name="level2"></param>
            <param name="bestBid"></param>
            <param name="bestAsk"></param>
            <param name="disabledFiltration"></param>
            <param name="indicative"></param>
            <param name="orderId"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.ConstructFormPreparedData(System.String,TickTrader.BusinessObjects.FeedTickId,TickTrader.Common.Business.FeedLevel2Record[],System.Boolean,System.Nullable{TickTrader.Common.Business.FeedLevel2Record},System.Boolean,System.Nullable{TickTrader.Common.Business.FeedLevel2Record},System.Boolean,System.Boolean,System.Int64)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="id"></param>
            <param name="level2"></param>
            <param name="bidPresent"></param>
            <param name="bestBid"></param>
            <param name="askPresent"></param>
            <param name="bestAsk"></param>
            <param name="orderId"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.RoundPrice(System.Decimal,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="price"></param>
            <param name="precision"></param>
            <param name="ceiling"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.GetRecord(TickTrader.Common.Business.FxPriceType)">
            <summary>
            
            </summary>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.GetValue(System.Boolean,System.Boolean,System.Collections.Generic.List{TickTrader.BusinessObjects.Level2Value})">
            <summary>
            
            </summary>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.Equals(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.Equals(TickTrader.Common.Business.FeedTick)">
            <summary>
            
            </summary>
        </member>
        <member name="M:TickTrader.Common.Business.FeedTick.EqualsByContent(TickTrader.Common.Business.FeedTick)">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.Common.Business.FxPriceType">
            <summary>
            Price type
            </summary>
        </member>
        <member name="M:TickTrader.Common.Business.HistoryBar.#ctor(TickTrader.BusinessObjects.Periodicity,TickTrader.Common.Business.HistoryBar,System.Double)">
            <summary>
            Create Copy of source bar with custoim bar's period
            </summary>
            <param name="barPeriod">period for time justification</param>
            <param name="sourceBar">initial bar </param>
            <param name="volume">optional initial override volume </param>
        </member>
        <member name="M:TickTrader.Common.Business.HistoryBar.#ctor(TickTrader.BusinessObjects.Periodicity,TickTrader.Common.Business.HistoryBar)">
            <summary>
            Create Copy of source bar with custoim bar's period
            </summary>
            <param name="barPeriod">period for time justification</param>
            <param name="sourceBar">initial bar </param>
        </member>
        <member name="M:TickTrader.Common.Business.HistoryBar.#ctor(System.DateTime,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="time">DateTime time</param>
            <param name="hi"> decimal hi </param>
            <param name="low"> decimal low </param>
            <param name="open"> decimal open </param>
            <param name="close"> decimal close </param>
            <param name="volume"> double volume</param>
        </member>
    </members>
</doc>
