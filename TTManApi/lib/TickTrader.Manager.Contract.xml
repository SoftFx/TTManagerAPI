<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TickTrader.Manager.Contract</name>
    </assembly>
    <members>
        <member name="M:TickTrader.Manager.Model.ManagerVersionSpecExtensions.SupportsMethod(TickTrader.BusinessObjects.Versioning.ManagerVersionSpec,System.String)">
            <summary>
            Check that method supports in current manager model version
            </summary>
            <param name="methodName"></param>
            <returns>true if method supports, ovewise false</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.TickTraderManagerClient.QueryTickHistory(System.DateTime,System.Int32,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.TickTraderManagerClient.GetTicksFromHistory(System.DateTime,System.DateTime,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.TickTraderManagerClient.QueryTickHistoryCache(System.DateTime,System.Int32,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.TickTraderManagerClient.QueryVWAPTickHistory(System.DateTime,System.Int32,System.String,System.Int16)" -->
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.TickTraderManagerClient.QueryVWAPTickHistoryCache(System.DateTime,System.Int32,System.String,System.Int16)" -->
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.GetSupportedBarPeriodicities(System.String)">
            <summary>
            Get supportted bar's periodicity
            </summary>
            <param name="symbol">Symbol</param>
            <returns>Supported periodicity -> Storage Intervale</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.QueryBarHistory(System.DateTime,System.Int32,System.String,System.String,TickTrader.Common.Business.FxPriceType)">
            <summary>
            Query Bars history
            </summary>
            <param name="to">DateTime start point</param>
            <param name="maxBars">Maximum bars to get. Query direction from future to past if negative</param>
            <param name="symbol">Symbol</param>
            <param name="periodicity">Period</param>
            <param name="priceType">Price Type</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.QueryBarHistoryCache(System.DateTime,System.Int32,System.String,System.String,TickTrader.Common.Business.FxPriceType)">
            <summary>
            Query Bars history cache
            </summary>
            <param name="to">DateTime start point</param>
            <param name="maxBars">Maximum bars to get. Query direction from future to past if negative</param>
            <param name="symbol">Symbol</param>
            <param name="periodicity">Period</param>
            <param name="priceType">Price Type</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.QueryTickHistoryMetaFile(System.String,System.Boolean)">
            <summary>
            Query ticks meta files
            </summary>
            <param name="symbol">Symbol</param>
            <param name="includeLevel2">Is level2 meta file</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.QueryTickHistoryFile(System.DateTime,System.DateTime,System.String,System.Boolean)">
            <summary>
            Query one ticks History
            </summary>
            <param name="to">DateTime pointert for choosing file</param>
            <param name="symbol">Symvl</param>
            <param name="includeLevel2">Is Level 2 include</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.QueryVWAPTickHistoryMetaFile(System.String,System.Int16)">
            <summary>
            Query vwap ticks meta files
            </summary>
            <param name="symbol">Symbol</param>
            <param name="degree">VWAP volume decinal degree</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.QueryVWAPTickHistoryFile(System.DateTime,System.DateTime,System.String,System.Int16)">
            <summary>
            Query one vwap ticks History
            </summary>
            <param name="to">DateTime pointert for choosing file</param>
            <param name="symbol">Symvl</param>
            <param name="degree">VWAP volume decinal degree</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.QueryBarHistoryMetaFile(System.String,System.String,TickTrader.Common.Business.FxPriceType)">
            <summary>
            Query bar's history meta files
            </summary>
            <param name="symbol">Symbol</param>
            <param name="periodicity">Periodicuty</param>
            <param name="priceType">Bid/Ask</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.QueryBarHistoryFile(System.DateTime,System.DateTime,System.String,System.String,TickTrader.Common.Business.FxPriceType)">
            <summary>
            Query bar's history meta file
            </summary>
            <param name="to">DateTime poinetrt for choosing file</param>
            <param name="symbol">Symbol</param>
            <param name="periodicity">Periodicity</param>
            <param name="priceType">Bid/Ask</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.GetHistoryVersion">
            <summary>
            Returns QH storage version
            </summary>
            <returns>Version of the QH</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.GetBarsHistoryInfo(System.String,TickTrader.BusinessObjects.Periodicity,TickTrader.Common.Business.FxPriceType)">
            <summary>
            Get Bar's history info
            </summary>
            <param name="symbol">Symbol</param>
            <param name="periodicity">Periodicity</param>
            <param name="priceType">Bid/Ask</param>
            <returns>History Info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.GetTicksHistoryInfo(System.String,System.Boolean)">
            <summary>
            Get Ticks history info
            </summary>
            <param name="symbol">symbol</param>
            <param name="isLevel2">Is ticks Level 2</param>
            <returns>HistoryInfo</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.GetVWAPTicksHistoryInfo(System.String,System.Int16)">
            <summary>
            Get VWAP Ticks history info
            </summary>
            <param name="symbol">symbol</param>
            <param name="degree">VWAP volume decimal degree</param>
            <returns>HistoryInfo</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.GetAllScheduledTasks">
            <summary>
            Get all scheduled tasks
            </summary>
            <returns>Schedules tasks list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.GetScheduledTask(System.Guid)">
            <summary>
            Get scheduled task by ID
            </summary>
            <param name="taskId">Scheduled task ID</param>
            <returns>Scheduled task info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.CreateScheduledTask(TickTrader.BusinessObjects.IScheduledTaskInfo)">
            <summary>
            Create new scheduled task 
            </summary>
            <param name="taskInfo">ScheduledTaskInfo</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.UpdateScheduledTask(TickTrader.BusinessObjects.IScheduledTaskInfo)">
            <summary>
            Update scheduled task 
            </summary>
            <param name="taskInfo">ScheduledTaskInfo</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.DeleteScheduledTask(System.Guid)">
            <summary>
            Delete scheduled task
            </summary>
            <param name="taskId">Task Id</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.CancelScheduledTask(System.Guid)">
            <summary>
            Cancel scheduled task with Id
            </summary>
            <param name="taskId">Scheduled task Id</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.RunScheduledTask(System.Guid)">
            <summary>
            Run scheduled task with Id
            </summary>
            <param name="taskId">Scheduled task Id</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.SetTaskPasswords(System.Guid,System.String)">
            <summary>
            Change passwords in scheduled task
            </summary>
            <param name="taskId">Scheduled task Id</param>
            <param name="passwords">Json with pairs where key is fieldName of Task, value is password</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.GetQHModifyEventById(System.Guid)">
            <summary>
            Get QHModify event by Id
            </summary>
            <param name="eventId">QHModifyEvent Id</param>
            <returns>QHModifyEvent</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.TickTraderManagerClient.GetAllQHModifyEvents(System.DateTime)">
            <summary>
            Get all QHModify events registred after timestamp
            </summary>
            <returns>QHModifyEvents list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.Ping">
            <summary>
            Ping Trading Platform. Informs platform that manager is connected. 
            Should be called one time in minute. For pumping mode calling ping 
            is not necessary.
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAccountRangesCount">
            <summary>
            Get account ranges count.
            </summary>
            <returns>Account ranges count in the Trading Platform</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetManagerInfo" -->
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.OpenBulkSession(TickTrader.BusinessObjects.BulkSessionInfo)">
            <summary>
            Open bulk session.
            </summary>
            <param name="sessionInfo">Bulk session info</param>
            <returns>Bulk session Id</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ReadBulkSession(System.String,System.Int32)">
            <summary>
            Read chunk from bulk session. Returns null on error. Returns empty array on stream end.
            </summary>
            <param name="sessionId">Bulk session Id</param>
            <param name="count">Count of bytes to read</param>
            <returns>Chunk buffer.</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.WriteBulkSession(System.String,System.Byte[])">
            <summary>
            Write chunk from bulk session. Returns null on error. Returns empty array on stream end.
            </summary>
            <param name="sessionId">Bulk session Id</param>
            <param name="count">Count of bytes to read</param>
            <returns>Chunk buffer.</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CloseBulkSession(System.String)">
            <summary>
            Close bulk session.
            </summary>
            <param name="sessionId">Bulk session ID</param>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetMonitoringEvents(System.String,System.String,System.DateTime,System.Nullable{System.DateTime},TickTrader.BusinessObjects.TimestampIdKey@,System.Int32)">
            <summary>
            Get monitoring events of the Trading Platform starting from the given date.
            Monitoring events can be retrieved for all machines and modules of the Trading 
            Platform or for specific ones. Monitoring events returned with paging.
            </summary>
            <param name="machine">Machine name (can be null for all machines)</param>
            <param name="module">Module name (can be null for all modules)</param>
            <param name="fromDate">From date</param>
            <param name="toDate">To date (can be null for the max avaliable date)</param>
            <param name="key">From Id (can be -1 for the first avaliable Id)</param>
            <param name="size">Page size</param>
            <returns>Snapshot list of monitoring events</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetMonitoringStatesAll">
            <summary>
            Get full snapshot of all monitoring states of the Trading Platform.
            </summary>
            <returns>Full snapshot list of all monitoring states</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetMonitoringStatesNew(System.DateTime)">
            <summary>
            Get new monitoring states of the Trading Platform starting from the given timestamp.
            </summary>
            <param name="fromTimestamp">From timestamp</param>
            <returns>Snapshot list of new monitoring states updated from the given timestamp.</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfConfiguration">
            <summary>
            Retrieve snapshot of configuration information.
            </summary>
            <returns>Snapshot of all configuration information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfSymbols">
            <summary>
            Retrieve snapshot of symbols information.
            </summary>
            <returns>Snapshot of all symbols information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfSymbolsTicks">
            <summary>
            Retrieve snapshot of symbols tick information.
            </summary>
            <returns>Snapshot list of all symbols tick information.</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfAccounts(System.Collections.Generic.List{TickTrader.BusinessObjects.BulkObjectVersion})">
            <summary>
            Retrieve snapshot of account information.
            </summary>
            <param name="accountsVersions">List of account versions</param>
            <returns>Bulk snapshot of all accounts information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfAccountsProtobufCompressed(System.Byte[])">
            <summary>
            Retrieve snapshot of account information (Protobuf compressed version)
            </summary>
            <param name="accountsVersions">List of account versions</param>
            <returns>Bulk snapshot of all accounts information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfAccountsFiltered(System.Collections.Generic.List{TickTrader.BusinessObjects.BulkObjectVersion},System.Collections.Generic.List{System.String})">
            <summary>
            Retrieve snapshot of account information.
            </summary>
            <param name="accountsVersions">List of account versions</param>
            <param name="accountsFilter">Account filter</param>
            <returns>Bulk snapshot of all accounts information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfAccountsFilteredProtobufCompressed(System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Retrieve snapshot of account information (Protobuf compressed version)
            </summary>
            <param name="accountsVersions">List of account versions</param>
            <param name="accountsFilter">Account filter</param>
            <returns>Bulk snapshot of all accounts information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfOrders(System.Collections.Generic.List{TickTrader.BusinessObjects.BulkObjectVersion})">
            <summary>
            Retrieve snapshot of orders information.
            </summary>
            <param name="ordersVersions">List of orders versions</param>
            <returns>Bulk snapshot of all orders information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfOrdersProtobufCompressed(System.Byte[])">
            <summary>
            Retrieve snapshot of orders information (Protobuf compressed version)
            </summary>
            <param name="ordersVersions">List of orders versions</param>
            <returns>Bulk snapshot of all orders information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfOrdersFiltered(System.Collections.Generic.List{TickTrader.BusinessObjects.BulkObjectVersion},System.Collections.Generic.List{System.String})">
            <summary>
            Retrieve snapshot of orders information.
            </summary>
            <param name="ordersVersions">List of orders versions</param>
            <param name="ordersFilter">Orders filter</param>
            <returns>Bulk snapshot of all orders information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfOrdersFilteredProtobufCompressed(System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Retrieve snapshot of orders information (Protobuf compressed version)
            </summary>
            <param name="ordersVersions">List of orders versions</param>
            <param name="ordersFilter">Orders filter</param>
            <returns>Bulk snapshot of all orders information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfPositions(System.Collections.Generic.List{TickTrader.BusinessObjects.BulkObjectVersion})">
            <summary>
            Retrieve snapshot of positions information.
            </summary>
            <param name="positionsVersions">List of positions versions</param>
            <returns>Bulk snapshot of all positions information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfPositionsProtobufCompressed(System.Byte[])">
            <summary>
            Retrieve snapshot of positions information (Protobuf compressed version)
            </summary>
            <param name="positionsVersions">List of positions versions</param>
            <returns>Bulk snapshot of all positions information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfPositionsFiltered(System.Collections.Generic.List{TickTrader.BusinessObjects.BulkObjectVersion},System.Collections.Generic.List{System.String})">
            <summary>
            Retrieve snapshot of positions information.
            </summary>
            <param name="positionsVersions">List of positions versions</param>
            <param name="positionsFilter">Positions filter</param>
            <returns>Bulk snapshot of all positions information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSnapshotOfPositionsFilteredProtobufCompressed(System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Retrieve snapshot of positions information (Protobuf compressed version)
            </summary>
            <param name="positionsVersions">List of positions versions</param>
            <param name="positionsFilter">Positions filter</param>
            <returns>Bulk snapshot of all positions information</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.EnablePumping(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Enable/Disable pumping for the current manager.
            </summary>
            <param name="enable">Enable flag</param>
            <param name="flags">Pumping flags combination (see PumpingFlag enum)</param>
            <param name="bookDepth">Pumping ticks depth subscription</param>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetPumpingUpdates">
            <summary>
            Retrieve updates from pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of new updates from pumping.</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.EnableDealing(System.Boolean)">
            <summary>
            Enable/Disable dealing for the current manager.
            </summary>
            <param name="enable">Enable flag</param>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetDealerRequest">
            <summary>
            Retrieve dealer request.
            Works only in dealing mode! 
            </summary>
            <returns>Request from dealing or null.</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.SendDealerResponse(TickTrader.BusinessObjects.DealerResponse)">
            <summary>
            Send dealer response.
            Works only in dealing mode! 
            </summary>
            <param name="response">Dealer response</param>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetFeedSource(System.String)">
            <summary>
            Request feed source configuraton by name.
            </summary>
            <param name="feedSourceName">Feed source name</param>
            <returns>Feed source configuration</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateFeedSource(TickTrader.BusinessObjects.Requests.FeedSourceNewRequest)">
            <summary>
            Create new feed source configuration.
            </summary>
            <param name="feedSourceNewRequest">New feed source configuration request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyFeedSource(TickTrader.BusinessObjects.Requests.FeedSourceModifyRequest)">
            <summary>
            Modify existing feed source configuratoin.
            </summary>
            <param name="feedSourceModifyRequest">Modify feed source configuration request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteFeedSource(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing feed source configuration.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="feedSourceName">Feed source name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllCurrencyTypes">
            <summary>
            Request currency type list.
            </summary>
            <returns>Currency list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateCurrencyType(TickTrader.BusinessObjects.Requests.CurrencyTypeNewRequest)">
            <summary>
            Create new currency type.
            </summary>
            <param name="request">New currency type request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyCurrencyType(TickTrader.BusinessObjects.Requests.CurrencyTypeModifyRequest)">
            <summary>
            Modify existing currency.
            </summary>
            <param name="request">Modify currency type request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteCurrencyType(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing currency type.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="currencyType">Currency type name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetCurrency(System.String)">
            <summary>
            Request currency info by name.
            </summary>
            <param name="currency">Currency name</param>
            <returns>Currency info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllCurrencies">
            <summary>
            Request currency list.
            </summary>
            <returns>Currency list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateCurrency(TickTrader.BusinessObjects.Requests.CurrencyNewRequest)">
            <summary>
            Create new currency.
            </summary>
            <param name="currencyNewRequest">New currency request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyCurrency(TickTrader.BusinessObjects.Requests.CurrencyModifyRequest)">
            <summary>
            Modify existing currency.
            </summary>
            <param name="currencyModifyRequest">Modify currency request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteCurrency(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing currency.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="currency">Currency name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyCurrencySortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set the order of currencies
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="currencySortOrders">Currencies sort order items</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSymbolSecurity(System.String)">
            <summary>
            Request symbol security info by name.
            </summary>
            <param name="security">Symbol security name</param>
            <returns>Symbol security info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllSymbolSecurities">
            <summary>
            Request symbol security list.
            </summary>
            <returns>Symbol security list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateSymbolSecurity(TickTrader.BusinessObjects.Requests.SecurityNewRequest)">
            <summary>
            Create new symbol security.
            </summary>
            <param name="securityNewRequest">New symbol security request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifySymbolSecurity(TickTrader.BusinessObjects.Requests.SecurityModifyRequest)">
            <summary>
            Modify existing symbol security.
            </summary>
            <param name="securityModifyRequest">Modify symbol security request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteSymbolSecurity(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing symbol security.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="security">Symbol security name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifySecuritySortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set the order of symbol securities.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="securitySortOrders">Symbol securities sort order items</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSymbol(System.String)">
            <summary>
            Request symbol info by name.
            </summary>
            <param name="symbol">Symbol name</param>
            <returns>Symbol info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllSymbols">
            <summary>
            Request symbol list.
            </summary>
            <returns>Symbol list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateSymbol(TickTrader.BusinessObjects.Requests.SymbolNewRequest)">
            <summary>
            Create new symbol info.
            </summary>
            <param name="symbolNewRequest">New symbol info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifySymbol(TickTrader.BusinessObjects.Requests.SymbolModifyRequest)">
            <summary>
            Modify existing symbol info.
            </summary>
            <param name="symbolModifyRequest">Modify symbol info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteSymbol(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing symbol info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="symbol">Symbol name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifySymbolsSortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set sort order for multiple symbols
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="symbolSortOrders">A list of symbol names and their sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSymbolTick(System.String)">
            <summary>
            Request symbol tick by name.
            </summary>
            <param name="symbol">Symbol name</param>
            <returns>Symbol tick</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllSymbolTicks">
            <summary>
            Request symbol ticks list.
            </summary>
            <returns>Symbol ticks list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.SendSymbolTick(TickTrader.Common.Business.FeedTick)">
            <summary>
            Send single symbol tick to the Trading Platform.
            </summary>
            <param name="tick">Symbol tick</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.SendSymbolTicks(System.Collections.Generic.List{TickTrader.Common.Business.FeedTick})">
            <summary>
            Send list of symbol ticks to the Trading Platform.
            </summary>
            <param name="ticks">List of symbol ticks</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteSymbolTicks(System.String,TickTrader.BusinessObjects.FeedTickId,TickTrader.BusinessObjects.FeedTickId)">
            <summary>
            Delete symbol ticks from the Trading Platform.
            </summary>
            <param name="symbol">Symbol name</param>F
            <param name="from">From time</param>
            <param name="to">To time</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteSymbolHistory(System.String,TickTrader.BusinessObjects.FeedTickId,TickTrader.BusinessObjects.FeedTickId)">
            <summary>
            Delete symbol history from the Trading Platform.
            </summary>
            <param name="symbol">Symbol name</param>F
            <param name="from">From time</param>
            <param name="to">To time</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.InsertSymbolTicks(System.String,System.Collections.Generic.List{TickTrader.BusinessObjects.TickValue})">
            <summary>
            Insert ticks to the Trading Platform.
            </summary>
            <param name="symbol">Symbol name</param>
            <param name="ticks">List of symbol ticks</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.InsertM1Bars(System.String,System.Collections.Generic.List{TickTrader.Common.Business.HistoryBar},TickTrader.Common.Business.FxPriceType)">
            <summary>
            Insert M1 bars to the Trading Platform.
            </summary>
            <param name="symbol">Symbol name</param>
            <param name="ticks">List of symbol ticks</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.Upstream(System.String,System.DateTime,System.DateTime,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.UpstreamTypes)">
            <summary>
            Upstream ticks to the Trading Platform.
            </summary>
            <param name="symbol">Symbol for upstram</param>
            <param name="from">Upstream start time</param>
            <param name="to">Upstream end time</param>
            <param name="type">Upstream type</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.InsertSymbolTicksAsyncWithJournal(System.String,System.Collections.Generic.List{TickTrader.BusinessObjects.TickValue})">
            <summary>
            Insert ticks to the Trading Platform.
            </summary>
            <param name="symbol">Symbol name</param>
            <param name="ticks">List of symbol ticks</param>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.UpstreamAsyncWithJournal(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.UpstreamTypes)">
            <summary>
            Upstream ticks to the Trading Platform.
            </summary>
            <param name="symbol">Symbol for upstram</param>
            <param name="from">Upstream start time</param>
            <param name="to">Upstream end time</param>
            <param name="type">Upstream type</param>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ExportFromStorageAsyncWithJournal(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.StoragePeriodicityLevel)">
            <summary>
            Export quote history from storage
            </summary>
            <param name="symbol">History will be exported from this symbol history</param>
            <param name="from">Start Id of the interval for exporting</param>
            <param name="to">End Id of the interval for exporting</param>
            <param name="storagePeriodicityLevel">History periodicity level for operation</param>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ApproximateHistorySizeAsyncWithJournal(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.StoragePeriodicityLevel)">
            <summary>
            Get approximate size of quote history from storage
            </summary>
            <param name="symbol">Size will be approximated for this symbol history</param>
            <param name="from">Start Id of the interval for approximation</param>
            <param name="to">End Id of the interval for approximation</param>
            <param name="storagePeriodicityLevel">History periodicity level for operation</param>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteFromStorageAsyncWithJournal(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.StoragePeriodicityLevel)">
            <summary>
            Delete quote history from storage
            </summary>
            <param name="symbol">History will be deleted from this symbol history</param>
            <param name="from">Start Id of the interval for deleting</param>
            <param name="to">End Id of the interval for deleting</param>
            <param name="storagePeriodicityLevel">History periodicity level for operation</param>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CompactStorageAsyncWithJournal">
            <summary>
            Compact quote history storage
            </summary>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.InitQHTaskStart(TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.QHTaskInitProperties)">
            <summary>
            Init QH task start.
            </summary>
            <param name="initProperties">QH task start properties</param>
            <returns>QH task start info result</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetHistoryTaskInfo(System.Int32)">
            <summary>
            Get history task info for specified task id
            </summary>
            <param name="id">Task id</param>
            <returns>History task info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllHistoryTasksInfo">
            <summary>
            Get all history tasks info
            </summary>
            <returns>History task info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.RequestHistoryTaskCancel(System.Int32)">
            <summary>
            Request history task cancel for specified task id
            </summary>
            <param name="id">Task id</param>
            <returns>History task info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetLevel2(System.String,System.Int32)">
            <summary>
            Request symbol level2 tick by name.
            </summary>
            <param name="symbol">Symbol name</param>
            <param name="depth">book's depth</param>
            <returns>Symbol level2 tick</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllLevel2(System.Int32)">
            <summary>
            Request symbol level2 ticks list.
            </summary>
            <param name="depth">book's depth</param>
            <returns>Symbol level2 ticks list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.Level2Subscribe(System.String[],System.Int32)">
            <summary>
            Subscribe to symbols level2
            </summary>
            <param name="symbols">list of symbols</param>
            <param name="depth">book's depth</param>
            <returns>true if success</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.Level2Unsubscribe(System.String[])">
            <summary>
            Unsubscribe from symbols level2
            </summary>
            <param name="symbols">list of symbols</param>
            <returns>true if success</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryTickHistory(System.DateTime,System.Int32,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetTicksFromHistory(System.DateTime,System.DateTime,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryTickHistoryCache(System.DateTime,System.Int32,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryVWAPTickHistory(System.DateTime,System.Int32,System.String,System.Int16)" -->
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryVWAPTickHistoryCache(System.DateTime,System.Int32,System.String,System.Int16)" -->
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSupportedBarPeriodicities(System.String)">
            <summary>
            Get supportted bar's periodicity
            </summary>
            <param name="symbol">Symbol</param>
            <returns>Supported periodicity -> Storage Intervale</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryBarHistory(System.DateTime,System.Int32,System.String,System.String,TickTrader.Common.Business.FxPriceType)">
            <summary>
            Query Bars history
            </summary>
            <param name="to">DateTime start point</param>
            <param name="maxBars">Maximum bars to get. Query direction from future to past if negative</param>
            <param name="symbol">Symbol</param>
            <param name="periodicity">Period</param>
            <param name="priceType">Price Type</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryBarHistoryCacheEx(System.Collections.Generic.List{TickTrader.BusinessObjects.QuoteHistory.BarHistoryRequest})">
            <summary>
            Query Bars history cache
            </summary>
            <param name="requests">List od requests</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryBarHistoryCache(System.DateTime,System.Int32,System.String,System.String,TickTrader.Common.Business.FxPriceType)">
            <summary>
            Query Bars history cache
            </summary>
            <param name="to">DateTime start point</param>
            <param name="maxBars">Maximum bars to get. Query direction from future to past if negative</param>
            <param name="symbol">Symbol</param>
            <param name="periodicity">Period</param>
            <param name="priceType">Price Type</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryTickHistoryMetaFile(System.String,System.Boolean)">
            <summary>
            Query ticks meta files
            </summary>
            <param name="symbol">Symbol</param>
            <param name="includeLevel2">Is level2 meta file</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryTickHistoryFile(System.DateTime,System.DateTime,System.String,System.Boolean)">
            <summary>
            Query one ticks History
            </summary>
            <param name="to">DateTime pointert for choosing file</param>
            <param name="symbol">Symvl</param>
            <param name="includeLevel2">Is Level 2 include</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryVWAPTickHistoryMetaFile(System.String,System.Int16)">
            <summary>
            Query vwap ticks meta files
            </summary>
            <param name="symbol">Symbol</param>
            <param name="degree">VWAP volume decinal degree</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryVWAPTickHistoryFile(System.DateTime,System.DateTime,System.String,System.Int16)">
            <summary>
            Query one vwap ticks History
            </summary>
            <param name="to">DateTime pointert for choosing file</param>
            <param name="symbol">Symvl</param>
            <param name="degree">VWAP volume decinal degree</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryBarHistoryMetaFile(System.String,System.String,TickTrader.Common.Business.FxPriceType)">
            <summary>
            Query bar's history meta files
            </summary>
            <param name="symbol">Symbol</param>
            <param name="periodicity">Periodicuty</param>
            <param name="priceType">Bid/Ask</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.QueryBarHistoryFile(System.DateTime,System.DateTime,System.String,System.String,TickTrader.Common.Business.FxPriceType)">
            <summary>
            Query bar's history meta file
            </summary>
            <param name="to">DateTime poinetrt for choosing file</param>
            <param name="symbol">Symbol</param>
            <param name="periodicity">Periodicity</param>
            <param name="priceType">Bid/Ask</param>
            <returns>Report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetHistoryVersion">
            <summary>
            Returns QH storage version
            </summary>
            <returns>Version of the QH</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetBarsHistoryInfo(System.String,TickTrader.BusinessObjects.Periodicity,TickTrader.Common.Business.FxPriceType)">
            <summary>
            Get Bar's history info
            </summary>
            <param name="symbol">Symbol</param>
            <param name="periodicity">Periodicity</param>
            <param name="priceType">Bid/Ask</param>
            <returns>History Info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetTicksHistoryInfo(System.String,System.Boolean)">
            <summary>
            Get Ticks history info
            </summary>
            <param name="symbol">symbol</param>
            <param name="includeLevel2">Is ticks Level 2</param>
            <returns>HistoryInfo</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetVWAPTicksHistoryInfo(System.String,System.Int16)">
            <summary>
            Get VWAP Ticks history info
            </summary>
            <param name="symbol">symbol</param>
            <param name="degree">VWAP volume decimal degree</param>
            <returns>HistoryInfo</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetQHTransferFiles">
            <summary>
            Get list of files in quote history export folder.
            </summary>
            <returns>List of export files</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetQHTransferFileDownloadSession(System.String)">
            <summary>
            Get quote history export file bulk session.
            </summary>
            <param name="fileName">name of quote history export file</param>
            <returns>Bulk sesion for quote history export file</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetQHTransferFileUploadSession(System.String,System.Int64)">
            <summary>
            Get list of files in quote history export folder.
            </summary>
            <param name="fileName">name of quote history import file</param>
            <returns>List of export files</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetQuoteHistoryImportSession(System.String,System.Int64,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.StoragePeriodicityLevel)">
            <summary>
            Get list of files in quote history export folder.
            </summary>
            <param name="fileName">name of quote history import file</param>
            <returns>List of export files</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.QHImportFromTransferFileAsyncWithJournal(System.String,System.String,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.StoragePeriodicityLevel)">
            <summary>
            Get quote history export file bulk session.
            </summary>
            <param name="fileName">name of quote history imported file</param>
            <param name="symbol">symbol for update</param>
            <param name="periodicityLevel">periodicity update</param>
            <returns>Bulk sesion for quote history export file</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetDomain(System.String)">
            <summary>
            Request domain info by name.
            </summary>
            <param name="domain">Domain name</param>
            <returns>Domain info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllDomains">
            <summary>
            Request domains list.
            </summary>
            <returns>Domains list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateDomain(TickTrader.BusinessObjects.Requests.DomainNewRequest)">
            <summary>
            Create new domain info.
            </summary>
            <param name="domainNewRequest">New domain info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyDomain(TickTrader.BusinessObjects.Requests.DomainModifyRequest)">
            <summary>
            Modify existing domain info.
            </summary>
            <param name="domainModifyRequest">Modify domain info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteDomain(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing domain info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="domain">Domain name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetGroup(System.String)">
            <summary>
            Request group info by name.
            </summary>
            <param name="group">Group name</param>
            <returns>Group info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllGroups">
            <summary>
            Request group list.
            </summary>
            <returns>Group list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateGroup(TickTrader.BusinessObjects.Requests.GroupNewRequest)">
            <summary>
            Create new group info.
            </summary>
            <param name="groupNewRequest">New group info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyGroup(TickTrader.BusinessObjects.Requests.GroupModifyRequest)">
            <summary>
            Modify existing group info.
            </summary>
            <param name="groupModifyRequest">Modify group info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteGroup(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing group info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="group">Group name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSubscription(System.String)">
            <summary>
            Request subscription info by name.
            </summary>
            <param name="subscription">Subscription name</param>
            <returns>Subscription info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllSubscriptions">
            <summary>
            Request subscription list.
            </summary>
            <returns>Subscription list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateSubscription(TickTrader.BusinessObjects.Requests.SubscriptionNewRequest)">
            <summary>
            Create new subscription info.
            </summary>
            <param name="subscriptionNewRequest">New subscription info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifySubscription(TickTrader.BusinessObjects.Requests.SubscriptionModifyRequest)">
            <summary>
            Modify existing subscription info.
            </summary>
            <param name="subscriptionModifyRequest">Modify subscription info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteSubscription(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing subscription info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="subscription">Subscription name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetGroupSecurity(System.String)">
            <summary>
            Request group security info by id.
            </summary>
            <param name="groupSecurityId">Group security Id</param>
            <returns>Group security info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllGroupSecurities">
            <summary>
            Request group securities list.
            </summary>
            <returns>Group securities list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateGroupSecurity(TickTrader.BusinessObjects.Requests.GroupSecurityNewRequest)">
            <summary>
            Create new group security info.
            </summary>
            <param name="groupSecurityNewRequest">New group security info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyGroupSecurity(TickTrader.BusinessObjects.Requests.GroupSecurityModifyRequest)">
            <summary>
            Modify existing group security info.
            </summary>
            <param name="groupSecurityModifyRequest">Modify group security info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteGroupSecurity(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing group security info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="groupSecurityId">Group security Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyGroupSecuritySortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set sort order for multiple symbols
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="groupSecuritySortOrders">A list of symbol names and their sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAccountById(System.Int64)">
            <summary>
            Request account info by its account login.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>Account info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllAccountLogins">
            <summary>
            Request all account logins.
            </summary>
            <returns>List of account logins</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateAccount(TickTrader.BusinessObjects.Requests.AccountNewRequest)">
            <summary>
            Create new account.
            </summary>
            <param name="accountNewRequest">New account request</param>
            <returns>Info of successfully created account or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyAccount(TickTrader.BusinessObjects.Requests.AccountModifyRequest)">
            <summary>
            Modify existing account.
            </summary>
            <param name="accountModifyRequest">Modify account request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteAccount(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Delete existing account.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="closeOrders">Close market orders and cancel pending orders</param>
            <param name="deleteTradeHistory">Delete trade history for account</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyAccountBalance(TickTrader.BusinessObjects.Requests.AccountBalanceRequest)">
            <summary>
            Modify account balance. Deposit/withdrawal account balance.
            </summary>
            <param name="accountBalanceRequest">Account balance request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DepositWithdrawal(TickTrader.BusinessObjects.Requests.DepositWithdrawalRequest)">
            <summary>
             Deposit (or withdraw) money on account. Replaces ModifyAccountBalance method. Supports Cash accounts.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.TransferMoney(TickTrader.BusinessObjects.Requests.TransferMoneyRequest)">
            <summary>
             Transfer money for two accounts
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyAccountCredit(TickTrader.BusinessObjects.Requests.AccountCreditRequest)">
            <summary>
            Modify account credit. Credit in/out account balance.
            </summary>
            <param name="accountCreditRequest">Account credit request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ValidateAccount(System.Int64,System.String)">
            <summary>
            Validate account by its account login and account password.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="accountPassword">Account password</param>
            <returns>Account info or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ValidateReadonlyAccount(System.Int64,System.String)">
            <summary>
            Validate readonly account by its account login and account readonly password.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="accountPassword">Account readonly password</param>
            <returns>Account info or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateAccountTwoFactorAuthKey(System.Int64)">
            <summary>
            Set 2FA for account
            </summary>
            <param name="accountId">Account Id</param>
            <returns>2FA key Uri</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteAccountTwoFactorAuthKey(System.Int64)">
            <summary>
            Delete 2FA for account
            </summary>
            <param name="accountId">Account Id</param>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ValidateAccountTwoFactorAuthKey(System.Int64,System.String)">
            <summary>
            Validate 2FA for account
            </summary>
            <param name="accountId">Account Id</param>
            <param name="otp">One-time password</param>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetLogin(System.String)">
            <summary>
            Request login info by user name.
            </summary>
            <param name="username">User name</param>
            <returns>Login info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetLoginsByAccountId(System.Int64)">
            <summary>
            Request all login info by account login.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>List of login info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateLogin(TickTrader.BusinessObjects.Requests.LoginNewRequest)">
            <summary>
            Create new login.
            </summary>
            <param name="loginNewRequest">New login request</param>
            <returns>Info of successfully created login or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyLogin(TickTrader.BusinessObjects.Requests.LoginModifyRequest)">
            <summary>
            Modify existing login.
            </summary>
            <param name="loginModifyRequest">Modify login request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteLogin(System.String)">
            <summary>
            Delete existing login info.
            </summary>
            <param name="username">User name to delete</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ValidateLogin(System.String,System.String)">
            <summary>
            Validate login and password.
            </summary>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <returns>Account info or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetWebApiToken(System.String)">
            <summary>
            Request Web API token by Id.
            </summary>
            <param name="webApiId">Web API token Id</param>
            <returns>Web API token</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetWebApiTokensByAccountId(System.Int64)">
            <summary>
            Request all Web API tokens by account login.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>List of Web API tokens</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateWebApiToken(TickTrader.BusinessObjects.Requests.WebApiTokenNewRequest)">
            <summary>
            Create new Web API token.
            </summary>
            <param name="request">New Web API token request</param>
            <returns>Info of successfully created Web API token or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyWebApiToken(TickTrader.BusinessObjects.Requests.WebApiTokenModifyRequest)">
            <summary>
            Modify existing Web API token.
            </summary>
            <param name="request">Modify Web API token request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteWebApiToken(System.String)">
            <summary>
            Delete existing Web API token.
            </summary>
            <param name="webApiId">Web API token Id to delete</param>
            <returns>Successful status</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.ITickTraderManagerContract.ValidateWebApiToken(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Contract.ITickTraderManagerContract.ResetWebApiTokenSecret(System.String)" -->
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAccessListRecord(System.String)">
            <summary>
            Request access list record by name.
            </summary>
            <param name="record">Access list record name</param>
            <returns>Access list record</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAccessList">
            <summary>
            Request full access list.
            </summary>
            <returns>Access list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateAccessListRecord(TickTrader.BusinessObjects.Requests.AccessListNewRequest)">
            <summary>
            Create new access list record.
            </summary>
            <param name="accessListNewRequest">New access list record request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyAccessListRecord(TickTrader.BusinessObjects.Requests.AccessListModifyRequest)">
            <summary>
            Modify existing access list record.
            </summary>
            <param name="accessListModifyRequest">Modify access list record request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteAccessListRecord(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing access list record.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="record">Access list record name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyAccessListSortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set the order of access list records.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="accessListSortOrders">Access list records sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ValidateAccess(System.String,System.String,TickTrader.BusinessObjects.Security.AccessProtocols)">
            <summary>
            Validate access with access list by the given login parameters.
            </summary>
            <param name="username">User name</param>
            <param name="ipAddress">IP address</param>
            <param name="protocol">Protocol (manager/dealer/fix/webapi/websocket)</param>
            <returns>Access list record</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.RequestThrottling(System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Request throttling info for the given protocol.
            </summary>
            <param name="protocol">Protocol</param>
            <returns>Throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.RequestAllThrottling">
            <summary>
            Request all throttling info.
            </summary>
            <returns>Throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ChangeThrottling(TickTrader.BusinessObjects.Requests.ThrottlingChangeRequest)">
            <summary>
            Change existing protocol throttling.
            </summary>
            <param name="throttlingChangeRequest">Change throttling request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteThrottling(System.Nullable{System.Int32},System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Delete existing protocol throttling.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="protocol">Protocol</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ChangeThrottlingMethod(System.Nullable{System.Int32},System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod},System.Int32)">
            <summary>
            Change throttling method value.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <param name="rps">Requests per second</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteThrottlingMethod(System.Nullable{System.Int32},System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod})">
            <summary>
            Delete throttling method value.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ResolveAccountThrottling(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Resolve account throttling info for the given protocol.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <returns>Account throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ResolveAllAccountThrottling(System.Int64)">
            <summary>
            Resolve all account throttling info.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>Account throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.RequestAccountThrottling(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Request account throttling info for the given protocol.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <returns>Account throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.RequestAllAccountThrottling(System.Int64)">
            <summary>
            Request all account throttling info.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>Account throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ChangeAccountThrottling(System.Int64,TickTrader.BusinessObjects.Requests.ThrottlingChangeRequest)">
            <summary>
            Change existing account throttling.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="throttlingChangeRequest">Change throttling request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteAccountThrottling(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Delete existing account throttling.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ChangeAccountThrottlingMethod(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod},System.Int32)">
            <summary>
            Change account throttling method value.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <param name="rps">Requests per second</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteAccountThrottlingMethod(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod})">
            <summary>
            Delete account throttling method value.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ResolveManagerThrottling(System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Resolve manager throttling info for the given protocol.
            </summary>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <returns>Manager throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ResolveAllManagerThrottling(System.Int16)">
            <summary>
            Resolve all manager throttling info.
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>Manager throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.RequestManagerThrottling(System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Request manager throttling info for the given protocol.
            </summary>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <returns>Manager throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.RequestAllManagerThrottling(System.Int16)">
            <summary>
            Request all manager throttling info.
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>Manager throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ChangeManagerThrottling(System.Int16,TickTrader.BusinessObjects.Requests.ThrottlingChangeRequest)">
            <summary>
            Change existing manager throttling.
            </summary>
            <param name="managerId">Manager Id</param>
            <param name="request">Change throttling request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteManagerThrottling(System.Nullable{System.Int32},System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Delete existing manager throttling.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ChangeManagerThrottlingMethod(System.Nullable{System.Int32},System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod},System.Int32)">
            <summary>
            Change manager throttling method value.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <param name="rps">Requests per second</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteManagerThrottlingMethod(System.Nullable{System.Int32},System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod})">
            <summary>
            Delete manager throttling method value.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllManagers">
            <summary>
            Request all manager info.
            </summary>
            <returns>List of manager info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetManagerById(System.Int16)">
            <summary>
            Request manager's info by its Id.
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>Manager info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetManagerByLogin(System.Int64)">
            <summary>
            Request manager's info by account Id.
            </summary>
            <param name="login">Account login</param>
            <returns>Manager info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateManager(TickTrader.BusinessObjects.Requests.ManagerNewRequest)">
            <summary>
            Create new manager.
            </summary>
            <param name="managerNewRequest">New manager request</param>
            <returns>Info of successfully created manager or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyManager(TickTrader.BusinessObjects.Requests.ManagerModifyRequest)">
            <summary>
            Modify existing manager.
            </summary>
            <param name="managerModifyRequest">Modify manager request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteManager(System.Nullable{System.Int32},System.Int16)">
            <summary>
            Delete existing manager.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerId">Manager Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetManagerDomainsById(System.String)">
            <summary>
            Request manager domains security by its Id.
            </summary>
            <param name="managerDomainsId">Manager domains Id</param>
            <returns>Manager groups info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateManagerDomains(TickTrader.BusinessObjects.Requests.ManagerDomainsNewRequest)">
            <summary>
            Create new manager domains security info.
            </summary>
            <param name="managerDomainsNewRequest">New manager domains request</param>
            <returns>New manager domains Id or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyManagerDomains(TickTrader.BusinessObjects.Requests.ManagerDomainsModifyRequest)">
            <summary>
            Modify existing manager domains security info.
            </summary>
            <param name="managerDomainsModifyRequest">Modify manager domains request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteManagerDomains(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing manager domains security info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerDomainsId">Manager domains Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetManagerGroupsById(System.String)">
            <summary>
            Request manager groups security by its Id.
            </summary>
            <param name="managerGroupsId">Manager groups Id</param>
            <returns>Manager groups info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateManagerGroups(TickTrader.BusinessObjects.Requests.ManagerGroupsNewRequest)">
            <summary>
            Create new manager groups security info.
            </summary>
            <param name="managerGroupsNewRequest">New manager groups request</param>
            <returns>New manager groups Id or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyManagerGroups(TickTrader.BusinessObjects.Requests.ManagerGroupsModifyRequest)">
            <summary>
            Modify existing manager group security info.
            </summary>
            <param name="managerGroupsModifyRequest">Modify manager groups request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteManagerGroups(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing manager group security info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerGroupsId">Manager groups Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetManagerSecuritiesById(System.String)">
            <summary>
            Request manager symbol securities by its Id.
            </summary>
            <param name="managerSecuritiesId">Manager securities Id</param>
            <returns>Manager securities info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetManagerSecurities(System.Int16)">
            <summary>
            Request manager symbol security infos by manager Id.
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>List of manager security infos</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateManagerSecurities(TickTrader.BusinessObjects.Requests.ManagerSecuritiesNewRequest)">
            <summary>
            Create new manager symbol security info.
            </summary>
            <param name="managerSecuritiesNewRequest">New manager securities request</param>
            <returns>New manager securities Id or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyManagerSecurities(TickTrader.BusinessObjects.Requests.ManagerSecuritiesModifyRequest)">
            <summary>
            Modify existing manager symbol security info.
            </summary>
            <param name="managerSecuritiesModifyRequest">Modify manager securities request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteManagerSecurities(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing manager symbol security info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerSecuritiesId">Manager securities Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ValidateManager(System.Int64,System.String)">
            <summary>
            Validate manager login and password.
            </summary>
            <param name="managerLogin">Manager login</param>
            <param name="password">Password</param>
            <returns>Manager info or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ValidateChangePasswordFlag">
            <summary>
            Validate if password change is needed
            </summary>
            <returns>validation result</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.SetNewPassword(System.String)">
            <summary>
            Set new password if needed.
            </summary>
            <param name="password">Password</param>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateManagerTwoFactorAuthKey(System.Nullable{System.Int32},System.Int16)">
            <summary>
            Create 2FA for manager
            </summary>
            <param name="configVersion"></param>
            <param name="managerId">Manager Id</param>
            <returns>2FA key Uri</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteManagerTwoFactorAuthKey(System.Nullable{System.Int32},System.Int16)">
            <summary>
            Delete 2FA for manager
            </summary>
            <param name="configVersion"></param>
            <param name="managerId">Manager Id</param>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetOrderById(System.Int64)">
            <summary>
            Request order info by its Id.
            </summary>
            <param name="orderId">Order Id</param>
            <returns>Order info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetOrdersByAccountId(System.Int64)">
            <summary>
            Request orders info for the given account Id.
            </summary>
            <param name="accountLogin">Account Login</param>
            <returns>List of order infos</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetPositionById(System.Int64)">
            <summary>
            Request position info by its Id.
            </summary>
            <param name="positionId">Position Id</param>
            <returns>Position info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetPositionsByAccountId(System.Int64)">
            <summary>
            Request positions info for the given account Id.
            </summary>
            <param name="accountLogin">Account Login</param>
            <returns>List of positions infos</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetTradeById(System.Int64)">
            <summary>
            Request order / position info by its Id.
            </summary>
            <param name="tradeId">Trade Id</param>
            <returns>Order / position info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.OpenOrder(TickTrader.BusinessObjects.Requests.OpenOrderRequest)">
            <summary>
            Open new order (market, limit or stop).
            </summary>
            <param name="openOrderRequest">Open order request</param>
            <returns>Info of successfully opened order or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyOrder(TickTrader.BusinessObjects.Requests.OrderReplaceRequest)">
            <summary>
            Modify existing order.
            </summary>
            <param name="modifyOrderRequest">Modify order request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ActivateOrder(TickTrader.BusinessObjects.Requests.ActivateOrderRequest)">
            <summary>
            Activate pending order (limit or stop).
            </summary>
            <param name="activateOrderRequest">Activate order request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CancelOrder(TickTrader.BusinessObjects.Requests.CancelOrderRequest)">
            <summary>
            Cancel existing order.
            </summary>
            <param name="cancelOrderRequest">Cancel order request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ClosePosition(TickTrader.BusinessObjects.Requests.ClosePositionRequest)">
            <summary>
            Close existing position.
            </summary>
            <param name="closePositionRequest">Close position request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CancelAll(System.Int64,System.Boolean)">
            <summary>
            Cancel all orders for the account with the given account login.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="stopoutFlag">Stopout flag</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CloseAll(System.Int64,System.Boolean)">
            <summary>
            Close all orders for the account with the given account login.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="stopoutFlag">Stopout flag</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyPosition(TickTrader.BusinessObjects.Requests.ModifyPositionRequest)">
            <summary>
            Modify existing Net Position.
            </summary>
            <param name="request">Modify Net Position request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ValidateMargin(TickTrader.BusinessObjects.Requests.ValidateMarginRequest)">
            <summary>
            Validate margin for a new order.
            </summary>
            <param name="validateMarginRequest">Validate margin request</param>
            <returns>Validate margin report or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ValidateMarginActivate(TickTrader.BusinessObjects.Requests.ValidateMarginActivateRequest)">
            <summary>
            Validate margin for activate order.
            </summary>
            <param name="validateMarginActivateRequest">Validate activate margin request</param>
            <returns>Validate activate margin report or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.LockOrder(TickTrader.BusinessObjects.Requests.ExecutionLockRequest)">
            <summary>
            Lock order for execution for a cpecified timeout in seconds. Any related order will be locked as well.
            </summary>
            <param name="request">Execution lock request</param>
            <returns>Execution lock report with list of orders were locked and expiration time.</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSplitById(System.Int64)">
            <summary>
            Request stock event info by event id.
            </summary>
            <param name="eventId">event ID</param>
            <returns>Stock event info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllSplits">
            <summary>
            Request stock event list.
            </summary>
            <returns>Stock event list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateSplit(TickTrader.BusinessObjects.Requests.SplitNewRequest)">
            <summary>
            Create new stock event info.
            </summary>
            <param name="request">New stock event info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifySplit(TickTrader.BusinessObjects.Requests.SplitModifyRequest)">
            <summary>
            Modify existing stock event info.
            </summary>
            <param name="request">Modify stock event info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteSplit(System.Int64)">
            <summary>
            Delete existing stock event info.
            </summary>
            <param name="eventId">Stock event id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetDividendById(System.Int64)">
            <summary>
            Request stock event info by event id.
            </summary>
            <param name="eventId">event ID</param>
            <returns>Stock event info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllDividends">
            <summary>
            Request stock event list.
            </summary>
            <returns>Stock event list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateDividend(TickTrader.BusinessObjects.Requests.DividendNewRequest)">
            <summary>
            Create new stock event info.
            </summary>
            <param name="request">New stock event info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifyDividend(TickTrader.BusinessObjects.Requests.DividendModifyRequest)">
            <summary>
            Modify existing stock event info.
            </summary>
            <param name="request">Modify stock event info request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteDividend(System.Int64)">
            <summary>
            Delete existing stock event info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="eventId">Stock event id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetMergerAndAcquisitionById(System.Guid)">
            <summary>
            Request stock event info by event id.
            </summary>
            <param name="eventId">event ID</param>
            <returns>Stock event info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllMergersAndAcquisitions">
            <summary>
            Request stock event list.
            </summary>
            <returns>Stock event list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteMergerAndAcquisition(System.Guid)">
            <summary>
            Delete existing stock event info.
            </summary>
            <param name="eventId">Stock event id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveAccount(System.Int64,System.Boolean)">
            <summary>
            Archive account by Id.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="force">Force archivation even if account has opened orders, positions, assets</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveRestoreAccount(System.Int64,System.Boolean)">
            <summary>
            Restore archived account by Id.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="restoreTrades">Restore opened trades (orders, positions) if preset</param>
            <returns>Restored account info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveDeleteAccount(System.Int64)">
            <summary>
            Delete account from archive.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveGetAccountById(System.Int64)">
            <summary>
            Request account from archive by its Id.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>Account info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveGetAllAccounts">
            <summary>
            Request all accounts from archive.
            </summary>
            <returns>List of account info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveGetLogin(System.String)">
            <summary>
            Request login info by user name from archive.
            </summary>
            <param name="username">User name</param>
            <returns>Login info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveGetLoginsByAccountId(System.Int64)">
            <summary>
            Request all login info by account login from archive.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>List of login info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveGetWebApiToken(System.String)">
            <summary>
            Request Web API token by Id from archive.
            </summary>
            <param name="webApiId">Web API token Id</param>
            <returns>Web API token</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveGetWebApiTokensByAccountId(System.Int64)">
            <summary>
            Request all Web API tokens by account login from archive.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>List of Web API tokens</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveGetOrderById(System.Int64)">
            <summary>
            Request order from archive by its Id.
            </summary>
            <param name="orderId">Order Id</param>
            <returns>Order</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveGetOrdersByAccountId(System.Int64)">
            <summary>
            Request orders for the given account from archive.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveGetAllOrders">
            <summary>
            Request all orders from archive.
            </summary>
            <returns>List of orders</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveQueryTradeHistory(System.Int64,TickTrader.BusinessObjects.Requests.TradeHistoryRequest)">
            <summary>
            Request trade history for the given account from archive.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="request">Trade history request</param>
            <returns>Trade history report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ArchiveQueryTradeHistoryOverall(TickTrader.BusinessObjects.Requests.TradeHistoryOverallRequest)">
            <summary>
            Request overall trade history for the given account from archive.
            </summary>
            <param name="request">Trade history overall request</param>
            <returns>Trade history overall report</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.PerformRollover(TickTrader.BusinessObjects.Requests.RolloverRequest)">
            <summary>
            Perform a rollover operation.
            </summary>
            <param name="rolloverRequest">Rollover request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DropSessions(TickTrader.BusinessObjects.Requests.DropSessionsRequest)">
            <summary>
            Drop sessions operation.
            </summary>
            <param name="dropSessionsRequest">Drop sessions request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.RefreshOnlineSessions">
            <summary>
            Refresh online sessions
            </summary>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.RequestOnlineSessions">
            <summary>
            Request online sessions
            </summary>
            <returns>Online sesions list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.RequestBanList(TickTrader.BusinessObjects.Security.BanListType)">
            <summary>
            Request ban list
            </summary>
            <param name="banListType"> Account type(Manager, Client, WebApi, etc.)</param>
            <returns>Ban list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ClearBanListRecords(TickTrader.BusinessObjects.Security.BanListType,System.Collections.Generic.List{TickTrader.BusinessObjects.Security.BanListRecord})">
            <summary>
            Request ban list
            </summary>
            <param name="banListType"> Account type(Manager, Client, WebApi, etc.)</param>
            <param name="banListRecords"> List of records to delete</param>
            <returns>Ban list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ServerTime">
            <summary>
            Get the current server time in UTC.
            </summary>
            <returns>Returned the current server time in UTC</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetTimeZonesNames">
            <summary>
            Get server time zones (key=TimeZoneId, value=TimeZoneName)
            </summary>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllSchedules">
            <summary>
            Get all schedules
            </summary>
            <returns>Schedules list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetSchedule(System.String)">
            <summary>
            Get schedule info by name
            </summary>
            <param name="schedule">Name of schedule</param>
            <returns>Schedule info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateSchedule(TickTrader.BusinessObjects.Requests.ScheduleNewRequest)">
            <summary>
            Create new schedule info
            </summary>
            <param name="request">New schedule request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.ModifySchedule(TickTrader.BusinessObjects.Requests.ScheduleModifyRequest)">
            <summary>
            Modify schedule info
            </summary>
            <param name="request">Modify schedule request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteSchedule(System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Delete schedule by name
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="schedule">Name of schedule</param>
            <param name="force">If true schedule will be removed in all bound schedules otherwise OperationFault exception.</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetModuleVersions">
            <summary>
            Request module versions list.
            </summary>
            <returns>Module versions list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.SendEmail(System.String,System.String)">
            <summary>
            Send Email to administrators of the Trading Platform.
            </summary>
            <param name="subject">Email subject</param>
            <param name="body">Email body</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.SendSms(System.String)">
            <summary>
            Send SMS to administrators of the Trading Platform.
            </summary>
            <param name="message">SMS message</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkOperations(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.Request})">
            <summary>
            Perform bulk operations
            </summary>
            <param name="bulkRequests">List of bulk request</param>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkCreateCurrencyType(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyTypeNewRequest})">
            <summary>
            Create new currencies
            </summary>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkModifyCurrencyType(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyTypeModifyRequest})">
            <summary>
            Modify currencies
            </summary>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkCreateCurrency(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyNewRequest})">
            <summary>
            Create new currencies
            </summary>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkModifyCurrency(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyModifyRequest})">
            <summary>
            Modify currencies
            </summary>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkDeleteCurrency(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyDeleteRequest})">
            <summary>
            Delete currencies
            </summary>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkCreateSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SecurityNewRequest})">
            <summary>
            Create new securities
            </summary>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkModifySecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SecurityModifyRequest})">
            <summary>
            Modify securities
            </summary>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkDeleteSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SecurityDeleteRequest})">
            <summary>
            Delete securities
            </summary>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkCreateSchedule(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.ScheduleNewRequest})">
            <summary>
            Create new schedules
            </summary>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkModifySchedule(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.ScheduleModifyRequest})">
            <summary>
            Modify schedules
            </summary>
            <param name="requests">requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkCreateGroup(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupNewRequest})">
            <summary>
            Create new group infos.
            </summary>
            <param name="groupNewRequests">New group info requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkCreateGroupSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupSecurityNewRequest})">
            <summary>
            Create new group security infos.
            </summary>
            <param name="groupSecurityNewRequests">New group security info requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkCreateSymbol(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SymbolNewRequest})">
            <summary>
            Create new symbol info.
            </summary>
            <param name="symbolNewRequests">New symbol info requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkModifySymbol(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SymbolModifyRequest})">
            <summary>
            Modify existing symbol info.
            </summary>
            <param name="symbolModifyRequests">Modify symbol info requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkDeleteSymbol(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SymbolDeleteRequest})">
            <summary>
            Delete existing symbol info.
            </summary>
            <param name="symbolDeleteRequests">Delete symbol info requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkModifyGroup(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupModifyRequest})">
            <summary>
            Modify existing group info.
            </summary>
            <param name="groupModifyRequests">Modify group info requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkModifyGroupSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupSecurityModifyRequest})">
            <summary>
            Modify existing group security info.
            </summary>
            <param name="groupSecurityModifyRequests">Modify group security info requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.BulkDeleteGroupSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupSecurityDeleteRequest})">
            <summary>
            Delete existing group security info.
            </summary>
            <param name="groupSecurityDeleteRequests">Delete group security info requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllScheduledTasks">
            <summary>
            Get all scheduled tasks
            </summary>
            <returns>Schedules tasks list</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetScheduledTask(System.Guid)">
            <summary>
            Get scheduled task by ID
            </summary>
            <param name="taskId">Scheduled task ID</param>
            <returns>Scheduled task info</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CreateScheduledTask(TickTrader.BusinessObjects.IScheduledTaskInfo)">
            <summary>
            Create new or update scheduled task 
            </summary>
            <param name="taskInfo">ScheduledTaskInfo</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.UpdateScheduledTask(TickTrader.BusinessObjects.IScheduledTaskInfo)">
            <summary>
            Create new or update scheduled task 
            </summary>
            <param name="taskInfo">ScheduledTaskInfo</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.DeleteScheduledTask(System.Guid)">
            <summary>
            Delete scheduled task by ID
            </summary>
            <param name="taskId">Scheduled task Id</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.CancelScheduledTask(System.Guid)">
            <summary>
            Get scheduled task by ID
            </summary>
            <param name="taskId">Scheduled task Id</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.RunScheduledTask(System.Guid)">
            <summary>
            Immediatly run scheduled task by ID
            </summary>
            <param name="taskId">Scheduled task Id</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.SetTaskPasswords(System.Guid,System.String)">
            <summary>
            Change passwords in scheduled task
            </summary>
            <param name="taskId">Scheduled task Id</param>
            <param name="passwords">Json with pairs where key is fieldName of Task, value is password</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetQHModifyEventById(System.Guid)">
            <summary>
            Get QHModify event by Id
            </summary>
            <param name="eventId">QHModifyEvent Id</param>
            <returns>QHModifyEvent</returns>
        </member>
        <member name="M:TickTrader.Manager.Contract.ITickTraderManagerContract.GetAllQHModifyEvents(System.DateTime)">
            <summary>
            Get all QHModify events registred after timestamp
            </summary>
            <returns>QHModifyEvents list</returns>
        </member>
    </members>
</doc>
