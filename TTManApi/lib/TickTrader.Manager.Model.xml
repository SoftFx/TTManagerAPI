<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TickTrader.Manager.Model</name>
    </assembly>
    <members>
        <member name="T:TickTrader.Manager.Model.ThreadedExecutionQueue">
            <summary>
            Notifier in separate Thread class
            </summary>
        </member>
        <member name="T:TickTrader.Manager.Model.ThreadedExecutionQueue.InvokeDelegate">
            <summary>
            Deleagate for using in ThreadedExecutionQueue
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.ThreadedExecutionQueue.MaximumQueueSize">
            <summary>
            Maximum queue size for tasks waiting for execution
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.ThreadedExecutionQueue.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.ThreadedExecutionQueue.ThreadProc">
            <summary>
            Thread for execution tasks
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.ThreadedExecutionQueue.Reset(System.Boolean)">
            <summary>
            Stop Thread
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.ThreadedExecutionQueue.AddTask(TickTrader.Manager.Model.ThreadedExecutionQueue.InvokeDelegate)">
            <summary>
            Add task to thread
            </summary>
            <param name="del">InvokeDelegate delegate for execution</param>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.#ctor">
            <summary>
            Create manager model without monitoring.
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.#ctor(TickTrader.Server.Monitoring.IMonitoringService)">
            <summary>
            Create manager model with monitoring.
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.#ctor(TickTrader.Server.Monitoring.IMonitoringService,TickTrader.Server.Monitoring.IComponentState)">
            <summary>
            Create the child component of manager model with monitoring.
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.Dispose">
            <summary>
            Dispose manager model
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.SetupModelDeviceId(System.String)">
            <summary>
            Setup model Device ID
            </summary>
            <param name="deviceId">Device ID</param>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.SetupModelAppSessionId(System.String)">
            <summary>
            Setup model application session ID
            </summary>
            <param name="appSessionId">Application session ID</param>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.SetupModelErrorHandling(TickTrader.Manager.Model.ModelErrorHandling)">
            <summary>
            Setup model error handling strategy.
            </summary>
            <param name="modelErrorHandling">Model error handling strategy</param>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.SetupModelTime(TickTrader.Manager.Model.ModelTime)">
            <summary>
            Setup model time representation.
            This obsolete method does not change ModelTime
            </summary>
            <param name="modelTime">Model time representation</param>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.SetupModelBehavior(TickTrader.Manager.Model.ModelBehavior)">
            <summary>
            Setup model behavior.
            </summary>
            <param name="modelBehavior">Model model behavior</param>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.SetupManagerCachePath(System.String)">
            <summary>
            Setup manager cache location
            </summary>
            <param name="managerCachePath">Path where the cache is located</param>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.IsMainThread">
            <summary>
            If the current thread is a main thread (not pumping, dealing or monitoring one)?
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.Reset(System.Boolean)">
            <summary>
            Reset manager model.
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.Connect(System.String,System.Int64,System.String)">
            <summary>
            Connect to the Trading Platform using the given address, login and password.
            </summary>
            <param name="server">Trading Platform address</param>
            <param name="login">Manager login</param>
            <param name="password">Manager password</param>
            <returns>Connect result</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.Disconnect(System.Boolean)">
            <summary>
            Disconnect manager from the Trading Platform.
            </summary>
            <returns>Disconnect result</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.IsConnected">
            <summary>
            Is current manager is connected to the Trading Platform?
            </summary>
            <returns>Connection state bool flag</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CheckManagerIsConnected">
            <summary>
            Check if the current manager is connected to the Trading Platform.
            </summary>
            <returns>True if connected</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.Ping">
            <summary>
            Ping Trading Platform. Informs platform that manager is connected.
            Should be called one time in minute. For pumping mode calling ping
            is not necessary.
            </summary>
            <returns>Ping operation result</returns>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.ModelStateChanged">
            <summary>
            Fires when Model State has changed
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.ModelConnected">
            <summary>
            Event is raised when the manager model is connected to the Trading Platform.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.ModelDisconnected">
            <summary>
            Event is raised when the manager model is disconnected from the Trading Platform.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.ModelError">
            <summary>
            Event is raised when some error occurred in manager model.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.ModelWarning">
            <summary>
            Event is raised when some warning occurred in manager model.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.ProtocolSpec">
            <summary>
            Get the current manager protocol specification.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.ServerAddress">
            <summary>
            Get the current Trading Platform address.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.ManagerLogin">
            <summary>
            Get the current manager login.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.ManagerPassword">
            <summary>
            Get the current manager password.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.ManagerSessionId">
            <summary>
            Get the current manager session ID.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:TickTrader.Manager.Model.TickTraderManagerModel.ManagerInfoAndRights" -->
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.ConfigVersion">
            <summary>
            Get current configuration version of the Trading Platform. Property returns -1 in case of configuration snapshot is not received.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.AccountRangesCount">
            <summary>
            Get account ranges count in the Trading Platform. Property returns -1 in case of some errors.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.MonitoringCache">
            <summary>
            Get the current instance of the monitoring cache.
            Cache will be empty until EnableMonitoring(true)
            method is called.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.MonitoringStarting">
            <summary>
            Event is raised when the monitoring of the Trading Platform is starting.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.MonitoringStarted">
            <summary>
            Event is raised when the monitoring of the Trading Platform is started.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.MonitoringStopping">
            <summary>
            Event is raised when the monitoring of the Trading Platform is stopping.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.MonitoringStopped">
            <summary>
            Event is raised when the monitoring of the Trading Platform is stopped.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.MonitoringStatesUpdated">
            <summary>
            Event is raised when the monitoring states of the Trading Platform were updated.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.IsMonitoringEnabled">
            <summary>
            Get the current monitoring state.
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.EnableMonitoring(System.Boolean)">
            <summary>
            Enable/Disable retrieving monitoring information from the Trading Platform and update
            monitoring cache accordingly.
            Security: manager should have administrator's rights to retrieve monitoring information from the Trading Platform.
            </summary>
            <param name="enable">Enable/Disable flag</param>
            <returns>Operation completion result</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetMonitoringEvents(System.String,System.String,System.DateTime,System.Nullable{System.DateTime},TickTrader.BusinessObjects.TimestampIdKey@,System.Int32)">
            <summary>
            Get monitoring events of the Trading Platform starting from the given date.
            Monitoring events can be retrieved for all machines and modules of the Trading
            Platform or for specific ones. Monitoring events returned with paging.
            Security: manager should have administrator's rights to retrieve monitoring information from the Trading Platform.
            </summary>
            <param name="machine">Machine name (can be null for all machines)</param>
            <param name="module">Module name (can be null for all modules)</param>
            <param name="fromDate">From date</param>
            <param name="toDate">To date (can be null for the max available date)</param>
            <param name="key">From Id (can be -1 for the first available Id)</param>
            <param name="size">Page size</param>
            <returns>Snapshot list of monitoring events</returns>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingStarting">
            <summary>
            Event is raised when the pumping is starting.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingStarted">
            <summary>
            Event is raised when the pumping is started.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllConfiguration">
            <summary>
            Event is raised when the pumping received all configuration update.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllFeedSources">
            <summary>
            Event is raised when the pumping received all feed sources.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllCurrencyTypes">
            <summary>
            Event is raised when the pumping received all currencies.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllCurrency">
            <summary>
            Event is raised when the pumping received all currencies.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllSymbolSecurity">
            <summary>
            Event is raised when the pumping received all symbol securities.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllSymbolConfig">
            <summary>
            Event is raised when the pumping received all symbol configurations.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllSymbolTick">
            <summary>
            Event is raised when the pumping received all symbol ticks.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllDomains">
            <summary>
            Event is raised when the pumping received all domains.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllGroups">
            <summary>
            Event is raised when the pumping received all groups.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllSubscriptions">
            <summary>
            Event is raised when the pumping received all subscriptions.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllGroupSecurity">
            <summary>
            Event is raised when the pumping received all group securities.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllManagers">
            <summary>
            Event is raised when the pumping received all managers.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllAccounts">
            <summary>
            Event is raised when the pumping received all accounts.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllOrders">
            <summary>
            Event is raised when the pumping received all orders.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllPositions">
            <summary>
            Event is raised when the pumping received all positions.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllSplits">
            <summary>
            Event is raised when the pumping received all stock events.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllDividends">
            <summary>
            Event is raised when the pumping received all stock events.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllMergersAndAcquisitions">
            <summary>
            Event is raised when the pumping received all stock events.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllScheduledTasks">
            <summary>
            Event is raised when the pumping received all stock events.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateOrdersActivation">
            <summary>
            Event is raised when the pumping received activation notifications for some orders.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAllSchedules">
            <summary>
            Event is raised when the pumping received all schedules.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingPing">
            <summary>
            Event is raised when the pumping pings.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingStopping">
            <summary>
            Event is raised when the pumping is stopping.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingStopped">
            <summary>
            Event is raised when the pumping is stopped.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateManagerRights">
            <summary>
            Event is raised when the manager rights are updated.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateFeedSource">
            <summary>
            Event is raised when the pumping received update of particular feed source.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateCurrencyType">
            <summary>
            Event is raised when the pumping received update of particular currency.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateCurrency">
            <summary>
            Event is raised when the pumping received update of particular currency.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateSymbolSecurity">
            <summary>
            Event is raised when the pumping received update of particular symbol security.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateSymbolConfig">
            <summary>
            Event is raised when the pumping received update of particular symbol configuration.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateSymbolTick">
            <summary>
            Event is raised when the pumping received update of particular symbol tick.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateDomain">
            <summary>
            Event is raised when the pumping received update of particular domain.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateGroup">
            <summary>
            Event is raised when the pumping received update of particular group.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateGroupSecurity">
            <summary>
            Event is raised when the pumping received update of particular group security.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateSubscription">
            <summary>
            Event is raised when the pumping received update of particular group.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateManager">
            <summary>
            Event is raised when the pumping received update of particular manager.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateAccount">
            <summary>
            Event is raised when the pumping received update of particular account.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateOrder">
            <summary>
            Event is raised when the pumping received update of particular order.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdatePosition">
            <summary>
            Event is raised when the pumping received update of particular position.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateOrderActivation">
            <summary>
            Event is raised when the pumping received update of particular order activation.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingAccountMaringCall">
            <summary>
            Event is raised when the pumping received update of margin call on particular account.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingAccountMaringCallRevocation">
            <summary>
            Event is raised when the pumping received update of margin call revocation on particular account.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingAccountStopout">
            <summary>
            Event is raised when the pumping received update of stopout on particular account.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateSplit">
            <summary>
            Event is raised when the pumping received update of particular stock event.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateDividend">
            <summary>
            Event is raised when the pumping received update of particular stock event.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateMergerAndAcquisition">
            <summary>
            Event is raised when the pumping received update of particular stock event.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateSplitExecution">
            <summary>
            Event is raised when the pumping received update of particular stock event.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.PumpingUpdateSplitRollback">
            <summary>
            Event is raised when the pumping received update of particular stock event.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.IsPumpingEnabled">
            <summary>
            Get the current pumping state.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.PumpingFlags">
            <summary>
            Pumping Flags. Used while Start Pumping
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.DepthOfBook">
            <summary>
            Deep Of the Book. Used while Start Pumping
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.DealingStarting">
            <summary>
            Event is raised when the dealing is starting.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.DealingStarted">
            <summary>
            Event is raised when the dealing is started.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.DealingStopping">
            <summary>
            Event is raised when the dealing is stopping.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.DealingStopped">
            <summary>
            Event is raised when the dealing is stopped.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.TickTraderManagerModel.DealingRequest">
            <summary>
            Event is raised when the dealer received new dealer request.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.TickTraderManagerModel.IsDealingEnabled">
            <summary>
            Get the current dealing state.
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.EnableDealing(System.Boolean)">
            <summary>
            Enable/Disable dealer mode for the current manager.
            </summary>
            <param name="enable">Enable/Disable flag</param>
            <returns>Operation completion result</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.SendDealerResponse(TickTrader.BusinessObjects.DealerResponse)">
            <summary>
            Send dealer response.
            Works only in dealing mode!
            </summary>
            <param name="response">Dealer response</param>
            <returns>Operation completion result</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetFeedSource(System.String)">
            <summary>
            Get the current feed source info from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="feedSource">Feed source</param>
            <returns>Current feed source info or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllFeedSources">
            <summary>
            Get the current feed source info for all feed sources from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current feed sources or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestFeedSource(System.String)">
            <summary>
            Request feed source info by name.
            </summary>
            <param name="feedSource">Feed source name</param>
            <returns>Feed source info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateFeedSource(TickTrader.BusinessObjects.Requests.FeedSourceNewRequest)">
            <summary>
            Create new feed source.
            </summary>
            <param name="feedSourceNewRequest">New feed source request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyFeedSource(TickTrader.BusinessObjects.Requests.FeedSourceModifyRequest)">
            <summary>
            Modify existing feed source.
            </summary>
            <param name="feedSourceModifyRequest">Modify feed source request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteFeedSource(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing feed source.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="feedSource">Feed source name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllCurrencyTypes">
            <summary>
            Request All Currency Types
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateCurrencyType(TickTrader.BusinessObjects.Requests.CurrencyTypeNewRequest)">
            <summary>
            Create new Currency Type
            </summary>
            <param name="request"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyCurrencyType(TickTrader.BusinessObjects.Requests.CurrencyTypeModifyRequest)">
            <summary>
            Modify Currency Type
            </summary>
            <param name="request"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteCurrencyType(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete Currency Type
            </summary>
            <param name="configVersion"></param>
            <param name="currencyType"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetCurrency(System.String)">
            <summary>
            Get the current currency from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="currency">Currency</param>
            <returns>Current currency info or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllCurrencies">
            <summary>
            Get the current currency info for all currencies from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current currencies or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestCurrency(System.String)">
            <summary>
            Request currency info by name.
            </summary>
            <param name="currency">Currency name</param>
            <returns>Currency info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllCurrencies">
            <summary>
            Request currency list.
            </summary>
            <returns>Currency list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateCurrency(TickTrader.BusinessObjects.Requests.CurrencyNewRequest)">
            <summary>
            Create new currency.
            </summary>
            <param name="currencyNewRequest">New currency request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyCurrency(TickTrader.BusinessObjects.Requests.CurrencyModifyRequest)">
            <summary>
            Modify existing currency.
            </summary>
            <param name="currencyModifyRequest">Modify currency request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteCurrency(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing currency.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="currency">Currency name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyCurrencySortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set sort order for multiple currencies
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="currencySortOrders">A list of currencies names and their sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetSymbolSecurity(System.String)">
            <summary>
            Get the current symbol security from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="security">Symbol security</param>
            <returns>Current symbol security info or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllSymbolsSecurities">
            <summary>
            Get the current symbol security info for all currencies from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current symbol securities or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestSymbolSecurity(System.String)">
            <summary>
            Request symbol security info by name.
            </summary>
            <param name="security">Symbol security name</param>
            <returns>Symbol security info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllSymbolSecurities">
            <summary>
            Request symbol security list.
            </summary>
            <returns>Symbol security list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateSymbolSecurity(TickTrader.BusinessObjects.Requests.SecurityNewRequest)">
            <summary>
            Create new symbol security.
            </summary>
            <param name="securityNewRequest">New symbol security request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifySymbolSecurity(TickTrader.BusinessObjects.Requests.SecurityModifyRequest)">
            <summary>
            Modify existing symbol security.
            </summary>
            <param name="securityModifyRequest">Modify symbol security request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteSymbolSecurity(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing symbol security.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="security">Symbol security name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifySecuritySortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set sort order for multiple securities
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="currencySortOrders">A list of currencies names and their sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetSymbolConfig(System.String)">
            <summary>
            Get the current symbol configuration from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="symbol">Symbol</param>
            <returns>Current symbol configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllSymbolsConfigs">
            <summary>
            Get the current symbols configurations for all symbols from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current symbols configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestSymbol(System.String)">
            <summary>
            Request symbol info by name.
            </summary>
            <param name="symbol">Symbol name</param>
            <returns>Symbol info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllSymbols">
            <summary>
            Request symbol info list.
            </summary>
            <returns>Symbol info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateSymbol(TickTrader.BusinessObjects.Requests.SymbolNewRequest)">
            <summary>
            Create new symbol.
            </summary>
            <param name="symbolNewRequest">New symbol request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifySymbol(TickTrader.BusinessObjects.Requests.SymbolModifyRequest)">
            <summary>
            Modify existing symbol.
            </summary>
            <param name="symbolModifyRequest">Modify symbol request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteSymbol(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing symbol.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="symbol">Symbol name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RefreshSymbols">
            <summary>
            Refresh all symbols. Works only in meta like behavior mode.
            </summary>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifySymbolsSortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set sort order for multiple symbols
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="symbolSortOrders">A list of symbol names and their sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetSymbolTick(System.String)">
            <summary>
            Get the current symbol tick from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="symbol">Symbol</param>
            <returns>Current symbol tick or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllSymbolsTicks">
            <summary>
            Get the current symbols ticks for all symbols from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current symbols ticks or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestSymbolTick(System.String)">
            <summary>
            Request the current symbol tick directly from the Trading Platform.
            </summary>
            <param name="symbol">Symbol</param>
            <returns>Current symbol tick or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllSymbolsTicks">
            <summary>
            Request the current symbols ticks for all symbols directly from the Trading Platform.
            </summary>
            <returns>List of the current symbols ticks or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.SendSymbolTick(TickTrader.Common.Business.FeedTick)">
            <summary>
            Send single symbol tick to the Trading Platform.
            </summary>
            <param name="tick">Symbol tick</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.SendSymbolTicks(System.Collections.Generic.List{TickTrader.Common.Business.FeedTick})">
            <summary>
            Send list of symbol ticks to the Trading Platform.
            </summary>
            <param name="ticks">List of symbol ticks</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestLevel2(System.String,System.Int32)">
            <summary>
            Request the current symbol level2 tick directly from the Trading Platform.
            </summary>
            <param name="symbol">Symbol</param>
            <param name="depth">book's depth</param>
            <returns>Current symbol tick or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllLevel2(System.Int32)">
            <summary>
            Request the current symbols level2 ticks for all symbols directly from the Trading Platform.
            </summary>
            <param name="depth">book's depth</param>
            <returns>List of the current symbols ticks or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.Level2Subscribe(System.String[],System.Int32)">
            <summary>
            Subscribe to symbols level2
            </summary>
            <param name="symbols">list of symbols</param>
            <param name="depth">book's depth</param>
            <returns>true if success</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.Level2Unsubscribe(System.String[])">
            <summary>
            Unsubscribe from symbols level2
            </summary>
            <param name="symbols">list of symbols</param>
            <returns>true if success</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetDomain(System.String)">
            <summary>
            Get the current domain configuration from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="domain">Domain</param>
            <returns>Current domain configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllDomains">
            <summary>
            Get the current domains configurations for all domains from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current domains configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllDomains">
            <summary>
            Get the current domains configurations for all domains from the Trading Platform pumping.
            </summary>
            <returns>List of the current groups configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestDomain(System.String)">
            <summary>
            Request domain info by name.
            </summary>
            <param name="domain">Domain name</param>
            <returns>Domain info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateDomain(TickTrader.BusinessObjects.Requests.DomainNewRequest)">
            <summary>
            Create new domain.
            </summary>
            <param name="domainNewRequest">New domain request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyDomain(TickTrader.BusinessObjects.Requests.DomainModifyRequest)">
            <summary>
            Modify existing domain.
            </summary>
            <param name="domainModifyRequest">Modify domain request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteDomain(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing domain.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="domain">Domain name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetGroup(System.String)">
            <summary>
            Get the current group configuration from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="group">Group</param>
            <returns>Current group configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllGroups">
            <summary>
            Get the current groups configurations for all groups from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current groups configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllGroups">
            <summary>
            Get the current groups configurations for all groups from the Trading Platform pumping.
            </summary>
            <returns>List of the current groups configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestGroup(System.String)">
            <summary>
            Request group info by name.
            </summary>
            <param name="group">Group name</param>
            <returns>Group info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateGroup(TickTrader.BusinessObjects.Requests.GroupNewRequest)">
            <summary>
            Create new group.
            </summary>
            <param name="groupNewRequest">New group request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyGroup(TickTrader.BusinessObjects.Requests.GroupModifyRequest)">
            <summary>
            Modify existing group.
            </summary>
            <param name="groupModifyRequest">Modify group request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteGroup(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing group.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="group">Group name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetSubscription(System.String)">
            <summary>
            Get the current subscription configuration from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="subscription">Subscription</param>
            <returns>Current subscription configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllSubscriptions">
            <summary>
            Get the current subscriptions configurations for all subscriptions from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current subscriptions configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllSubscriptions">
            <summary>
            Get the current subscriptions configurations for all subscriptions from the Trading Platform pumping.
            </summary>
            <returns>List of the current subscriptions configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestSubscription(System.String)">
            <summary>
            Request subscription info by name.
            </summary>
            <param name="subscription">Subscription name</param>
            <returns>Subscription info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateSubscription(TickTrader.BusinessObjects.Requests.SubscriptionNewRequest)">
            <summary>
            Create new subscription.
            </summary>
            <param name="subscriptionNewRequest">New subscription request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifySubscription(TickTrader.BusinessObjects.Requests.SubscriptionModifyRequest)">
            <summary>
            Modify existing subscription.
            </summary>
            <param name="subscriptionModifyRequest">Modify subscription request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteSubscription(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing subscription.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="subscription">Subscription name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetGroupSecurity(System.String)">
            <summary>
            Get the current group security by Id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="groupSecurityId">Group security Id</param>
            <returns>Current group security or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllGroupSecurities">
            <summary>
            Get the current groups configurations for all groups from the Trading Platform pumping.
            </summary>
            <returns>List of the current groups configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllGroupSecurities">
            <summary>
            Get the current group securities for all groups from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current group securities or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestGroupSecurity(System.String)">
            <summary>
            Request group security info by Id.
            </summary>
            <param name="groupSecurityId">Group security Id</param>
            <returns>Group security info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateGroupSecurity(TickTrader.BusinessObjects.Requests.GroupSecurityNewRequest)">
            <summary>
            Create new group security.
            </summary>
            <param name="groupSecurityNewRequest">New group security request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyGroupSecurity(TickTrader.BusinessObjects.Requests.GroupSecurityModifyRequest)">
            <summary>
            Modify existing group security.
            </summary>
            <param name="groupSecurityModifyRequest">Modify group security request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteGroupSecurity(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing group security.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="groupSecurityId">Group security Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyGroupSecuritySortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set sort order for multiple group securities
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="groupSecuritySortOrders">A list of group security names and their sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAccountById(System.Int64)">
            <summary>
            Get account by Id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>Current account or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAccountsForRange(System.Int32)">
            <summary>
            Get all accounts for the given range in the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="rangeId">rangeId</param>
            <returns>List of accounts or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllAccounts">
            <summary>
            Get all accounts from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of all accounts or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllAccountLogins">
            <summary>
            Get all accounts logins from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of all accounts logins or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAccountById(System.Int64)">
            <summary>
            Request account by Id directly from Trading Platform.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>Account info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllAccounts">
            <summary>
            Request all accounts directly from Trading Platform.
            </summary>
            <returns>List of accounts or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllAccountLogins">
            <summary>
            Request all accounts logins directly from Trading Platform.
            </summary>
            <returns>List of accounts logins or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllAccountsFilter(System.String)">
            <summary>
            Request filtered accounts directly from Trading Platform.
            </summary>
            <param name="accountFilter">Accounts filter (groups, logins)</param>
            <returns>List of accounts or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllAccountsFilterList(System.Collections.Generic.List{System.String})">
            <summary>
            Request filtered accounts directly from Trading Platform.
            </summary>
            <param name="accountFilter">Accounts filter (groups, logins)</param>
            <returns>List of accounts or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateAccount(TickTrader.BusinessObjects.Requests.AccountNewRequest)">
            <summary>
            Create new account.
            </summary>
            <param name="accountNewRequest">New account request</param>
            <returns>Info of successfully created account or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyAccount(TickTrader.BusinessObjects.Requests.AccountModifyRequest)">
            <summary>
            Modify existing account.
            </summary>
            <param name="accountModifyRequest">Modify account request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteAccount(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Delete existing account.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="closeOrders">Close market orders and cancel pending orders</param>
            <param name="deleteTradeHistory">Delete trade history for account</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyAccountBalance(TickTrader.BusinessObjects.Requests.AccountBalanceRequest)">
            <summary>
            Modify account balance. Deposit/withdrawal account balance.
            </summary>
            <param name="accountBalanceRequest">Account balance request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyAccountCredit(TickTrader.BusinessObjects.Requests.AccountCreditRequest)">
            <summary>
            Modify account credit. Credit in/out account balance.
            </summary>
            <param name="accountCreditRequest">Account credit request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ValidateAccount(System.Int64,System.String)">
            <summary>
            Validate account.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="password">Account password</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ValidateReadonlyAccount(System.Int64,System.String)">
            <summary>
            Validate readonly account.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="password">Account password</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateAccountTwoFactorAuthKey(System.Int64)">
            <summary>
            Create 2FA for account
            </summary>
            <param name="accountLogin">Account Id</param>
            <returns>2FA key Uri</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteAccountTwoFactorAuthKey(System.Int64)">
            <summary>
            Delete 2FA for account
            </summary>
            <param name="accountLogin">Account Id</param>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ValidateAccountTwoFactorAuthKey(System.Int64,System.String)">
            <summary>
            Validate 2FA for account
            </summary>
            <param name="accountLogin">Account Id</param>
            <param name="otp">One-time password</param>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestLogin(System.String)">
            <summary>
            Request login by username directly from Trading Platform.
            </summary>
            <param name="username">Username</param>
            <returns>Login info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestLoginsByAccountId(System.Int64)">
            <summary>
            Request logins by account login directly from Trading Platform.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>List of login info for Account</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateLogin(TickTrader.BusinessObjects.Requests.LoginNewRequest)">
            <summary>
            Create new login.
            </summary>
            <param name="loginNewRequest">New login request</param>
            <returns>Info of successfully created login or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyLogin(TickTrader.BusinessObjects.Requests.LoginModifyRequest)">
            <summary>
            Modify existing login.
            </summary>
            <param name="loginModifyRequest">Modify login request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteLogin(System.String)">
            <summary>
            Delete existing login.
            </summary>
            <param name="username">Username</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ValidateLogin(System.String,System.String)">
            <summary>
            Validate login.
            </summary>
            <param name="username">Username</param>
            <param name="password">Login password</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestWebApiToken(System.String)">
            <summary>
            Request Web API token by Id directly from Trading Platform.
            </summary>
            <param name="webApiId">Web API token Id</param>
            <returns>Web API token</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestWebApiTokensByAccountId(System.Int64)">
            <summary>
            Request all Web API tokens by account login directly from Trading Platform.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>List of all Web API tokens for Account</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateWebApiToken(TickTrader.BusinessObjects.Requests.WebApiTokenNewRequest)">
            <summary>
            Create new Web API token.
            </summary>
            <param name="webApiNewTokenRequest">New Web API token request</param>
            <returns>Info of successfully created Web API token or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyWebApiToken(TickTrader.BusinessObjects.Requests.WebApiTokenModifyRequest)">
            <summary>
            Modify existing Web API token.
            </summary>
            <param name="webApiModifyTokenRequest">Modify Web API token request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteWebApiToken(System.String)">
            <summary>
            Delete existing Web API token.
            </summary>
            <param name="webApiId">Web API token Id</param>
            <returns>Successful status</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Model.TickTraderManagerModel.ValidateWebApiToken(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Model.TickTraderManagerModel.ResetWebApiTokenSecret(System.String)" -->
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAccessListRecord(System.String)">
            <summary>
            Request access list record by name.
            </summary>
            <param name="record">Access list record name</param>
            <returns>Access list record</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAccessList">
            <summary>
            Request full access list.
            </summary>
            <returns>Access list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateAccessListRecord(TickTrader.BusinessObjects.Requests.AccessListNewRequest)">
            <summary>
            Create new access list record.
            </summary>
            <param name="accessListNewRequest">New access list record request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyAccessListRecord(TickTrader.BusinessObjects.Requests.AccessListModifyRequest)">
            <summary>
            Modify existing access list record.
            </summary>
            <param name="accessListModifyRequest">Modify access list record request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteAccessListRecord(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing access list record.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="record">Access list record name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyAccessListSortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set the order of access list records.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="accessListSortOrders">Access list records sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ValidateAccess(System.String,System.String,TickTrader.BusinessObjects.Security.AccessProtocols)">
            <summary>
            Validate access with access list by the given login parameters.
            </summary>
            <param name="username">User name</param>
            <param name="ipAddress">IP address</param>
            <param name="protocol">Protocol (manager/dealer/fix/webapi/websocket)</param>
            <returns>Access list record</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestThrottling(System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Request throttling info for the given protocol.
            </summary>
            <param name="protocol">Protocol</param>
            <returns>Throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllThrottling">
            <summary>
            Request all throttling info.
            </summary>
            <returns>Throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ChangeThrottling(TickTrader.BusinessObjects.Requests.ThrottlingChangeRequest)">
            <summary>
            Change existing protocol throttling.
            </summary>
            <param name="throttlingChangeRequest">Change throttling request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteThrottling(System.Nullable{System.Int32},System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Delete existing protocol throttling.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="protocol">Protocol</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ChangeThrottlingMethod(System.Nullable{System.Int32},System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod},System.Int32)">
            <summary>
            Change throttling method value.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <param name="rps">Requests per second</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteThrottlingMethod(System.Nullable{System.Int32},System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod})">
            <summary>
            Delete throttling method value.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ResolveAccountThrottling(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Resolve account throttling info for the given protocol.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <returns>Account throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ResolveAllAccountThrottling(System.Int64)">
            <summary>
            Resolve all account throttling info.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>Account throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAccountThrottling(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Request account throttling info for the given protocol.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <returns>Account throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllAccountThrottling(System.Int64)">
            <summary>
            Request all account throttling info.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>Account throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ChangeAccountThrottling(System.Int64,TickTrader.BusinessObjects.Requests.ThrottlingChangeRequest)">
            <summary>
            Change existing account throttling.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="throttlingChangeRequest">Change throttling request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteAccountThrottling(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Delete existing account throttling.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ChangeAccountThrottlingMethod(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod},System.Int32)">
            <summary>
            Change account throttling method value.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <param name="rps">Requests per second</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteAccountThrottlingMethod(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod})">
            <summary>
            Delete account throttling method value.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ResolveManagerThrottling(System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Resolve manager throttling info for the given protocol.
            </summary>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <returns>Manager throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ResolveAllManagerThrottling(System.Int16)">
            <summary>
            Resolve all manager throttling info.
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>Manager throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestManagerThrottling(System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Request manager throttling info for the given protocol.
            </summary>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <returns>Manager throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllManagerThrottling(System.Int16)">
            <summary>
            Request all manager throttling info.
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>Manager throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ChangeManagerThrottling(System.Int16,TickTrader.BusinessObjects.Requests.ThrottlingChangeRequest)">
            <summary>
            Change existing manager throttling.
            </summary>
            <param name="managerId">Manager Id</param>
            <param name="throttlingChangeRequest">Change throttling request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteManagerThrottling(System.Nullable{System.Int32},System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Delete existing manager throttling.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ChangeManagerThrottlingMethod(System.Nullable{System.Int32},System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod},System.Int32)">
            <summary>
            Change manager throttling method value.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <param name="rps">Requests per second</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteManagerThrottlingMethod(System.Nullable{System.Int32},System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod})">
            <summary>
            Delete manager throttling method value.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetManagerById(System.Int16)">
            <summary>
            Get manager by Id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>Current manager or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetMangerByLogin(System.Int64)">
            <summary>
            Get manager by account login from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>Current manager or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllManagers">
            <summary>
            Get all manager's accounts from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of all accounts or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllManagers">
            <summary>
            Request all managers info directly from Trading Platform.
            </summary>
            <returns>List of managers info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestManagerById(System.Int16)">
            <summary>
            Request manager info by Id directly from Trading Platform.
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>Manager info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestManagerByLogin(System.Int64)">
            <summary>
            Request manager info by account Id directly from Trading Platform.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>Manager info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateManager(TickTrader.BusinessObjects.Requests.ManagerNewRequest)">
            <summary>
            Create new manager.
            </summary>
            <param name="managerNewRequest">New manager request</param>
            <returns>Info of successfully created manager or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyManager(TickTrader.BusinessObjects.Requests.ManagerModifyRequest)">
            <summary>
            Modify existing manager.
            </summary>
            <param name="managerModifyRequest">Modify manager request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteManager(System.Nullable{System.Int32},System.Int16)">
            <summary>
            Delete existing manager.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerId">Manager Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetManagerDomains(System.String)">
            <summary>
            Get the manager domains rights by Id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="managerDomainsId">Manager domains Id</param>
            <returns>Current manager domains rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetManagerDomains(System.Int16)">
            <summary>
            Get all managers domains rights for the given manager from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>List of the managers domains rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllManagerDomains">
            <summary>
            Get all managers domains rights from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the managers domains rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestManagerDomainsById(System.String)">
            <summary>
            Request manager domains info by Id directly from Trading Platform.
            </summary>
            <param name="managerDomainsId">Manager domains Id</param>
            <returns>Manager domains info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateManagerDomains(TickTrader.BusinessObjects.Requests.ManagerDomainsNewRequest)">
            <summary>
            Create new manager domains security info.
            </summary>
            <param name="managerDomainsNewRequest">New manager domains request</param>
            <returns>New manager domains Id or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyManagerDomains(TickTrader.BusinessObjects.Requests.ManagerDomainsModifyRequest)">
            <summary>
            Modify existing manager domains security info.
            </summary>
            <param name="managerDomainsModifyRequest">Modify manager domains request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteManagerDomains(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing manager domains security info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerDomainsId">Manager domains Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetManagerGroups(System.String)">
            <summary>
            Get the manager groups rights by Id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="managerGroupsId">Manager groups Id</param>
            <returns>Current manager groups rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetManagerGroups(System.Int16)">
            <summary>
            Get all managers groups rights for the given manager from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>List of the managers groups rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllManagerGroups">
            <summary>
            Get all managers groups rights from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the managers groups rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestManagerGroupsById(System.String)">
            <summary>
            Request manager groups info by Id directly from Trading Platform.
            </summary>
            <param name="managerGroupsId">Manager groups Id</param>
            <returns>Manager groups info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateManagerGroups(TickTrader.BusinessObjects.Requests.ManagerGroupsNewRequest)">
            <summary>
            Create new manager groups security info.
            </summary>
            <param name="managerGroupsNewRequest">New manager groups request</param>
            <returns>New manager groups Id or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyManagerGroups(TickTrader.BusinessObjects.Requests.ManagerGroupsModifyRequest)">
            <summary>
            Modify existing manager groups security info.
            </summary>
            <param name="managerGroupsModifyRequest">Modify manager groups request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteManagerGroups(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing manager groups security info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerGroupsId">Manager groups Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetManagerSecurities(System.String)">
            <summary>
            Get the manager symbol securities rights by Id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="managerSecuritiesId">Manager symbol securities Id</param>
            <returns>Current manager symbol securities rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetManagerSecurities(System.Int16)">
            <summary>
            Get all managers symbol securities rights for the given manager from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>List of the managers symbol securities rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllManagerSecurities">
            <summary>
            Get all managers symbol securities rights from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the managers symbol securities rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestManagerSecuritiesById(System.String)">
            <summary>
            Request manager symbol securities info by Id directly from Trading Platform.
            </summary>
            <param name="managerSecuritiesId">Manager securities Id</param>
            <returns>Manager securities info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateManagerSecurities(TickTrader.BusinessObjects.Requests.ManagerSecuritiesNewRequest)">
            <summary>
            Create new manager symbol securities info.
            </summary>
            <param name="managerSecuritiesNewRequest">New manager securities request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyManagerSecurities(TickTrader.BusinessObjects.Requests.ManagerSecuritiesModifyRequest)">
            <summary>
            Modify existing manager symbol securities info.
            </summary>
            <param name="managerSecuritiesModifyRequest">Modify manager securities request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteManagerSecurities(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing manager symbol securities info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerSecuritiesId">Manager securities Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateManagerTwoFactorAuthKey(System.Nullable{System.Int32},System.Int16)">
            <summary>
            Create 2FA for manager
            </summary>
            <param name="configVersion"></param>
            <param name="managerId">Manager Id</param>
            <returns>2FA key Uri</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteManagerTwoFactorAuthKey(System.Nullable{System.Int32},System.Int16)">
            <summary>
            Delete 2FA for manager
            </summary>
            <param name="configVersion"></param>
            <param name="managerId">Manager Id</param>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetOrderById(System.Int64)">
            <summary>
            Get order by Id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="orderId">orderId</param>
            <returns>Current order or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetOrdersForAccount(System.Int64)">
            <summary>
            Get all orders for the given account in the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="accountLogin">accountLogin</param>
            <returns>List of account orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetOrdersForRange(System.Int32)">
            <summary>
            Get all orders for the given range in the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="rangeId">rangeId</param>
            <returns>List of account orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetOrdersForSymbol(System.String)">
            <summary>
            Get all orders with the given symbol in the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="symbol">symbol</param>
            <returns>List of account orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllOrders">
            <summary>
            Get all orders from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of all orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestOrderById(System.Int64)">
            <summary>
            Request order by Id directly from Trading Platform.
            </summary>
            <param name="orderId">Order Id</param>
            <returns>Order info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestOrdersByAccountId(System.Int64)">
            <summary>
            Request orders info for the given account Id.
            </summary>
            <param name="accountLogin">Account Login</param>
            <returns>List of order infos</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllOrders">
            <summary>
            Request all orders directly from Trading Platform.
            </summary>
            <returns>List of orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllOrdersFilter(System.String)">
            <summary>
            Request filtered orders directly from Trading Platform.
            </summary>
            <param name="orderFilter">Orders filter (groups, logins, orders)</param>
            <returns>List of orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllOrdersFilterList(System.Collections.Generic.List{System.String})">
            <summary>
            Request filtered orders directly from Trading Platform.
            </summary>
            <param name="orderFilter">Orders filter (groups, logins, orders)</param>
            <returns>List of orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestTradeById(System.Int64)">
            <summary>
            Request order / position by Id directly from Trading Platform.
            </summary>
            <param name="tradeId">Order / position Id</param>
            <returns>Order / position info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.OpenOrder(TickTrader.BusinessObjects.Requests.OpenOrderRequest)">
            <summary>
            Open new order (market, limit or stop).
            </summary>
            <param name="openOrderRequest">Open order request</param>
            <returns>Info of successfully opened order or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyOrder(TickTrader.BusinessObjects.Requests.OrderReplaceRequest)">
            <summary>
            Modify existing order.
            </summary>
            <param name="modifyOrderRequest">Modify order request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ActivateOrder(TickTrader.BusinessObjects.Requests.ActivateOrderRequest)">
            <summary>
            Activate pending order (limit or stop).
            </summary>
            <param name="activateOrderRequest">Activate order request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CancelOrder(TickTrader.BusinessObjects.Requests.CancelOrderRequest)">
            <summary>
            Cancel existing order.
            </summary>
            <param name="cancelOrderRequest">Cancel order request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ClosePosition(TickTrader.BusinessObjects.Requests.ClosePositionRequest)">
            <summary>
            Close existing position.
            </summary>
            <param name="closePositionRequest">Close position request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CancelAll(System.Int64,System.Boolean)">
            <summary>
            Cancel all orders for the account with the given account login.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="stopoutFlag">Stopout flag</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CloseAll(System.Int64,System.Boolean)">
            <summary>
            Close all orders for the account with the given account login.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="stopoutFlag">Stopout flag</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyPosition(TickTrader.BusinessObjects.Requests.ModifyPositionRequest)">
            <summary>
            Modify existing Net Position.
            </summary>
            <param name="request">Modify Net Position request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ValidateMargin(TickTrader.BusinessObjects.Requests.ValidateMarginRequest)">
            <summary>
            Validate margin for a new order.
            </summary>
            <param name="validateMarginRequest">Validate margin request</param>
            <returns>Validate margin report or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ValidateMarginActivate(TickTrader.BusinessObjects.Requests.ValidateMarginActivateRequest)">
            <summary>
            Validate activate margin for a new order.
            </summary>
            <param name="validateMarginActivateRequest">Validate activate margin request</param>
            <returns>Validate activate margin report or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetPositionById(System.Int64)">
            <summary>
            Get position by Id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="positionId">positionId</param>
            <returns>Current position or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetPositionsForAccount(System.Int64)">
            <summary>
            Get all positions for the given net account in the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="accountLogin">accountLogin</param>
            <returns>List of net account positions or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllPositions">
            <summary>
            Get all positions from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of all positions or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestPositionById(System.Int64)">
            <summary>
            Request position by Id directly from Trading Platform.
            </summary>
            <param name="positionId">Position Id</param>
            <returns>Position info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestPositionsByAccountId(System.Int64)">
            <summary>
            Request positions info for the given net account Id.
            </summary>
            <param name="accountLogin">Account Login</param>
            <returns>List of position infos</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetPositionsForSymbol(System.String)">
            <summary>
            Get all positions with the given symbol in the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="symbol">symbol</param>
            <returns>List of net account positions or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllPositions">
            <summary>
            Request all positions directly from Trading Platform.
            </summary>
            <returns>List of positions or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllPositionsFilter(System.String)">
            <summary>
            Request filtered positions directly from Trading Platform.
            </summary>
            <param name="positionFilter">Position filter (logins, positions)</param>
            <returns>List of positions or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllPositionsFilterList(System.Collections.Generic.List{System.String})">
            <summary>
            Request filtered positions directly from Trading Platform.
            </summary>
            <param name="positionFilter">Position filter (logins, positions)</param>
            <returns>List of positions or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetTradeSummary(System.String)">
            <summary>
            Get the current trade summary for the given symbol from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="symbol">Symbol</param>
            <returns>Current trade summary for the given symbol or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllTradeSummaries">
            <summary>
            Get the current trade summaries for all symbols from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the trade summaries or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.QueryJournal(TickTrader.BusinessObjects.Requests.JournalSearchRequest)">
            <summary>
            Query journal entries.
            </summary>
            <param name="request">Journal request</param>
            <returns>Journal report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.QueryJournalByTransactionId(System.String)">
            <summary>
            Query journal entries by transaction Id.
            </summary>
            <param name="transactionId">Transaction Id</param>
            <returns>Journal report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.QueryTradeHistory(System.Int64,TickTrader.BusinessObjects.Requests.TradeHistoryRequest)">
            <summary>
            Query trade history.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="request">Trade history request</param>
            <returns>Trade history report with history entries collection</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.QueryTradeHistoryOverall(TickTrader.BusinessObjects.Requests.TradeHistoryOverallRequest)">
            <summary>
            Query overall trade history.
            </summary>
            <param name="request">Trade history overall request</param>
            <returns>Trade history report with overal history entries collection</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetTradeReport(System.String)">
            <summary>
            Get trade report by Id.
            </summary>
            <param name="reportId">Trade report Id</param>
            <returns>Trade report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateTradeReport(TickTrader.BusinessObjects.TradeReport)">
            <summary>
            Create trade report.
            </summary>
            <param name="report">Trade report to create</param>
            <returns>Created trade report Id</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyTradeReport(TickTrader.BusinessObjects.TradeReport)">
            <summary>
            Modify trade report.
            </summary>
            <param name="report">Trade report to modify</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteTradeReport(System.String)">
            <summary>
            Delete trade report by Id.
            </summary>
            <param name="reportId">Trade report Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.QueryDailyAccountsSnapshot(TickTrader.BusinessObjects.Requests.DailyAccountsSnapshotRequest)">
            <summary>
            Query daily accounts snapshot.
            </summary>
            <param name="request">Daily accounts snapshot request</param>
            <returns>Daily accounts snapshot report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetSplit(System.Int64)">
            <summary>
            Get split by id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="splitId">splitId</param>
            <returns>Current Split configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllSplits">
            <summary>
            Get all splits from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current splits configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllSplits">
            <summary>
            Get all splits from the Trading Platform.
            </summary>
            <returns>List of the current splits configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestSplit(System.Int64)">
            <summary>
            Request split info by id.
            </summary>
            <param name="splitId">eventId</param>
            <returns>split info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateSplit(TickTrader.BusinessObjects.Requests.SplitNewRequest)">
            <summary>
            Create new Split.
            </summary>
            <param name="splitNewRequest">New Split request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifySplit(TickTrader.BusinessObjects.Requests.SplitModifyRequest)">
            <summary>
            Modify existing Split.
            </summary>
            <param name="splitModifyRequest">Modify Split request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteSplit(System.Int64)">
            <summary>
            Delete existing Split.
            </summary>
            <param name="splitId">splitId</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetDividend(System.Int64)">
            <summary>
            Get dividend by id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="dividendId">dividendId</param>
            <returns>Current Dividend configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllDividends">
            <summary>
            Get all dividends from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current dividends configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllDividends">
            <summary>
            Get all dividends from the Trading Platform.
            </summary>
            <returns>List of the current dividends configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestDividend(System.Int64)">
            <summary>
            Request dividend info by id.
            </summary>
            <param name="dividendId">eventId</param>
            <returns>dividend info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.CreateDividend(TickTrader.BusinessObjects.Requests.DividendNewRequest)">
            <summary>
            Create new Dividend.
            </summary>
            <param name="dividendNewRequest">New Dividend request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModifyDividend(TickTrader.BusinessObjects.Requests.DividendModifyRequest)">
            <summary>
            Modify existing Dividend.
            </summary>
            <param name="dividendModifyRequest">Modify Dividend request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteDividend(System.Int64)">
            <summary>
            Delete existing Dividend.
            </summary>
            <param name="dividendId">dividendId</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetMergerAndAcquisition(System.Guid)">
            <summary>
            Get mergerAndAcquisition by id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="mergerAndAcquisitionId">mergerAndAcquisitionId</param>
            <returns>Current MergerAndAcquisition configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllMergersAndAcquisitions">
            <summary>
            Get all mergerAndAcquisitions from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current mergerAndAcquisitions configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestAllMergersAndAcquisitions">
            <summary>
            Get all mergerAndAcquisitions from the Trading Platform.
            </summary>
            <returns>List of the current mergerAndAcquisitions configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestMergerAndAcquisition(System.Guid)">
            <summary>
            Request mergerAndAcquisition info by id.
            </summary>
            <param name="mergerAndAcquisitionId">eventId</param>
            <returns>mergerAndAcquisition info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DeleteMergerAndAcquisition(System.Guid)">
            <summary>
            Delete existing MergerAndAcquisition.
            </summary>
            <param name="id">mergerAndAcquisitionId</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveAccount(System.Int64,System.Boolean)">
            <summary>
            Archive accoutn by Id.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="force">Force archivation even if account has opened orders, positions, assets</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveRestoreAccount(System.Int64,System.Boolean)">
            <summary>
            Restore archived account by Id.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="restoreTrades">Restore opened trades (orders, positions) if preset</param>
            <returns>Restored account info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveDeleteAccount(System.Int64)">
            <summary>
            Delete account from archive.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveGetAccountById(System.Int64)">
            <summary>
            Request account from archive by its Id.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>Account info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveGetAllAccounts">
            <summary>
            Request all accounts from archive.
            </summary>
            <returns>List of account info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveGetLogin(System.String)">
            <summary>
            Request login info by user name from archive.
            </summary>
            <param name="username">User name</param>
            <returns>Login info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveGetLoginsByAccountId(System.Int64)">
            <summary>
            Request all login info by account login from archive.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>List of login info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveGetWebApiToken(System.String)">
            <summary>
            Request Web API token by Id from archive.
            </summary>
            <param name="webApiId">Web API token Id</param>
            <returns>Web API token</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveGetWebApiTokensByAccountId(System.Int64)">
            <summary>
            Request all Web API tokens by account login from archive.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>List of Web API tokens</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveGetOrderById(System.Int64)">
            <summary>
            Request order from archive by its Id.
            </summary>
            <param name="orderId">Order Id</param>
            <returns>Order</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveGetOrdersByAccountId(System.Int64)">
            <summary>
            Request orders for the given account from archive.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveGetAllOrders">
            <summary>
            Request all orders from archive.
            </summary>
            <returns>List of orders</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveQueryTradeHistory(System.Int64,TickTrader.BusinessObjects.Requests.TradeHistoryRequest)">
            <summary>
            Request trade history for the given account from archive.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="request">Trade history request</param>
            <returns>Trade history report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ArchiveQueryTradeHistoryOverall(TickTrader.BusinessObjects.Requests.TradeHistoryOverallRequest)">
            <summary>
            Request overall trade history for the given account from archive.
            </summary>
            <param name="request">Trade history overall request</param>
            <returns>Trade history overall report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.PerformRollover(TickTrader.BusinessObjects.Requests.RolloverRequest)">
            <summary>
            Perform a rollover operation.
            </summary>
            <param name="rolloverRequest">Rollover request</param>
            <returns>Successful status</returns>
        </member>
        <member name="F:TickTrader.Manager.Model.TickTraderManagerModel._isPumpingDropping">
            <summary>
            Drop session is in progress
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.DropSessions(TickTrader.BusinessObjects.Requests.DropSessionsRequest)">
            <summary>
            Drop sessions operation.
            </summary>
            <param name="dropSessionsRequest">Drop sessions request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RefreshOnlineSessions">
            <summary>
            Refresh online sessions
            </summary>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestOnlineSessions">
            <summary>
            Request online sessions
            </summary>
            <returns>Online sesions list</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Model.TickTraderManagerModel.RefreshAndRequestOnlineSessions(System.TimeSpan)" -->
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.RequestBanList(TickTrader.BusinessObjects.Security.BanListType)">
            <summary>
            Request ban list
            </summary>
            <param name="banListType"> Account type(Manager, Client, WebApi, etc.)</param>
            <returns>Ban list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ClearBanListRecords(TickTrader.BusinessObjects.Security.BanListType,System.Collections.Generic.List{TickTrader.BusinessObjects.Security.BanListRecord})">
            <summary>
            Request ban list
            </summary>
            <param name="banListType"> Account type(Manager, Client, WebApi, etc.)</param>
            <param name="banListRecords"> List of records to delete</param>
            <returns>Ban list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetTradeConfiguration">
            <summary>
            Get trade configuration
            </summary>
            <returns>Trade configuration</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.SetTradeConfiguration(TickTrader.BusinessObjects.Requests.SetTradeConfigurationRequest)">
            <summary>
            Set trade configuration
            </summary>
            <param name="request">New trade configuration</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ServerTime">
            <summary>
            Get the current server time.
            </summary>
            <returns>Returned the current server time</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ServerTimeUtc">
            <summary>
            Get the current server time in UTC.
            </summary>
            <returns>Returned the current server time in UTC</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.SendEmail(System.String,System.String)">
            <summary>
            Send Email to administrators of the Trading Platform.
            </summary>
            <param name="subject">Email subject</param>
            <param name="body">Email body</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.SendSms(System.String)">
            <summary>
            Send SMS to administrators of the Trading Platform.
            </summary>
            <param name="message">SMS message</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModelNow">
            <summary>
            Get the current model time
            </summary>
            <returns>Current model time</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ServerToModel(System.Int32)">
            <summary>
            Convert server time hour to model time.
            </summary>
            <param name="serverHour">Server time hour to convert</param>
            <returns>Model time hour</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ServerToModel(System.DateTime)">
            <summary>
            Convert server time to model time.
            </summary>
            <param name="serverTime">Server time to convert</param>
            <returns>Model time</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModelToServer(System.Int32)">
            <summary>
            Convert model time hour to server time.
            </summary>
            <param name="modelHour">Model time hour to convert</param>
            <returns>Server time hour</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.ModelToServer(System.DateTime)">
            <summary>
            Convert model time to server time.
            </summary>
            <param name="modelTime">Model time to convert</param>
            <returns>Server time</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkOperations(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.Request})">
            <summary>
            Perform bulk operations
            </summary>
            <param name="bulkRequests">List of bulk request</param>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkCreateCurrencyType(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyTypeNewRequest})">
            <summary>
            Perform bulk create currency types
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkModifyCurrencyType(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyTypeModifyRequest})">
            <summary>
            Perform bulk modify currency types
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkCreateCurrency(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyNewRequest})">
            <summary>
            Perform bulk create currencies
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkModifyCurrency(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyModifyRequest})">
            <summary>
            Perform bulk modify currencies
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkDeleteCurrency(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyDeleteRequest})">
            <summary>
            Perform bulk delete currencies
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkCreateSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SecurityNewRequest})">
            <summary>
            Perform bulk create securities
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkModifySecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SecurityModifyRequest})">
            <summary>
            Perform bulk modify securities
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkCreateSchedule(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.ScheduleNewRequest})">
            <summary>
            Perform bulk create schedules
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkModifySchedule(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.ScheduleModifyRequest})">
            <summary>
            Perform bulk modify schedules
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkCreateSymbol(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SymbolNewRequest})">
            <summary>
            Create new symbols.
            </summary>
            <param name="symbolNewRequests">New symbol requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkCreateGroup(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupNewRequest})">
            <summary>
            Create new groups.
            </summary>
            <param name="groupNewRequests">New group requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkCreateGroupSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupSecurityNewRequest})">
            <summary>
            Create new group securities.
            </summary>
            <param name="groupSecurityNewRequests">New group security requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkModifySymbol(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SymbolModifyRequest})">
            <summary>
            Modify symbols.
            </summary>
            <param name="symbolModifyRequests">Modify symbol requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkDeleteSymbol(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SymbolDeleteRequest})">
            <summary>
            Delete symbols.
            </summary>
            <param name="symbolDeleteRequests">Delete symbol requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkModifyGroup(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupModifyRequest})">
            <summary>
            Modify Group.
            </summary>
            <param name="groupModifyRequests">Modify group requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkModifyGroupSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupSecurityModifyRequest})">
            <summary>
            Modify group securities.
            </summary>
            <param name="groupSecurityModifyRequests">Modify group security requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkDeleteGroupSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupSecurityDeleteRequest})">
            <summary>
            Delete group securities.
            </summary>
            <param name="groupSecurityDeleteRequests">Delete group security requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.BulkDeleteSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SecurityDeleteRequest})">
            <summary>
            Delete securities.
            </summary>
            <param name="securityDeleteRequests">Delete security requests</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.QHTransferFileDownnloadToStream(System.String,System.IO.Stream,System.Action{System.Int64})">
            <summary>
            Request filtered orders directly from Trading Platform.
            </summary>
            <param name="orderFilter">Orders filter (groups, logins, orders)</param>
            <returns>List of orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.QHTransferFileUploadFromStream(System.String,System.IO.Stream,System.Action{System.Int64})">
            <summary>
            Request filtered orders directly from Trading Platform.
            </summary>
            <param name="orderFilter">Orders filter (groups, logins, orders)</param>
            <returns>List of orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.QHImportFromStream(System.String,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.StoragePeriodicityLevel,System.IO.Stream,System.Action{System.Int64})">
            <summary>
            Import Quote History from stream.
            </summary>
            <param name="sourceStream">Stream for import</param>
            <returns>List of orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetQHModifyEventById(System.Guid)">
            <summary>
            Get QHModify event by Id
            </summary>
            <param name="eventId">QHModifyEvent Id</param>
            <returns>QHModifyEvent</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.TickTraderManagerModel.GetAllQHModifyEvents(System.DateTime)">
            <summary>
            Get all QHModify events registred after timestamp
            </summary>
            <returns>QHModifyEvents list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SetupModelDeviceId(System.String)">
            <summary>
            Setup model Device ID
            </summary>
            <param name="deviceId">Device ID</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SetupModelAppSessionId(System.String)">
            <summary>
            Setup model application session ID
            </summary>
            <param name="appSessionId">Application session ID</param>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.ModelBehavior">
            <summary>
            Get Tick Trader manager model behavior
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SetupModelBehavior(TickTrader.Manager.Model.ModelBehavior)">
            <summary>
            Setup model behavior.
            </summary>
            <param name="modelBehavior">Model model behavior</param>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.ModelTime">
            <summary>
            Get Current Set Model's Time
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SetupModelTime(TickTrader.Manager.Model.ModelTime)">
            <summary>
            Setup model time representation.
            </summary>
            <param name="modelTime">Model time representation</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SetupModelErrorHandling(TickTrader.Manager.Model.ModelErrorHandling)">
            <summary>
            Setup model error handling strategy.
            </summary>
            <param name="modelErrorHandling">Model error handling strategy</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SetupManagerCachePath(System.String)">
            <summary>
            Setup manager cache location
            </summary>
            <param name="managerCachePath">Path where the cache is located</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.Connect(System.String,System.Int64,System.String)">
            <summary>
            Connect to the Trading Platform using the given address, login and password.
            </summary>
            <param name="server">Trading Platform address</param>
            <param name="login">Manager login</param>
            <param name="password">Manager password</param>
            <returns>Connect result</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SetupTwoFactorPasscode(System.String)">
            <summary>
            Connect to the Trading Platform using the given address, login, password and two-factor passcode.
            </summary>
            <param name="passcode">One-time passcode</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.Disconnect(System.Boolean)">
            <summary>
            Disconnect manager from the Trading Platform. 
            </summary>
            <returns>Disconnect result</returns> 
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.IsConnected">
            <summary>
            Is current manager is connected to the Trading Platform?
            </summary>
            <returns>Connection state bool flag</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetModelState(TickTrader.BusinessObjects.EventArguments.Module)">
            <summary>
            Return Model State
            </summary>
            <param name="module">Module state for request</param>
            <returns>Module State</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.Ping">
            <summary>
            Ping Trading Platform. Informs platform that manager is connected. 
            Should be called one time in minute. For pumping mode calling ping 
            is not necessary.
            </summary>
            <returns>Ping operation result</returns>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.ModelStateChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.ModelConnected">
            <summary>
            Event is raised when the manager model is connected to the Trading Platform.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.ModelDisconnected">
            <summary>
            Event is raised when the manager model is disconnected from the Trading Platform.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.ModelError">
            <summary>
            Event is raised when some error occurred in manager model.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.ModelWarning">
            <summary>
            Event is raised when some warning occurred in manager model.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.ProtocolSpec">
            <summary>
            Get the current manager protocol specification.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.ServerAddress">
            <summary>
            Get the current Trading Platform address.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.ManagerLogin">
            <summary>
            Get the current manager login.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.ManagerSessionId">
            <summary>
            Get the current manager session ID.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:TickTrader.Manager.Model.ITickTraderManagerModel.ManagerInfoAndRights" -->
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.ConfigVersion">
            <summary>
            Get current configuration version of the Trading Platform. Property returns -1 in case of configuration snapshot is not received.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.AccountRangesCount">
            <summary>
            Get account ranges count in the Trading Platform. Property returns -1 in case of some errors.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.MonitoringCache">
            <summary>
            Get the current instance of the monitoring cache.
            Cache will be empty until EnableMonitoring(true)
            method is called.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.MonitoringStarting">
            <summary>
            Event is raised when the monitoring of the Trading Platform is starting.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.MonitoringStarted">
            <summary>
            Event is raised when the monitoring of the Trading Platform is started.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.MonitoringStopping">
            <summary>
            Event is raised when the monitoring of the Trading Platform is stopping.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.MonitoringStopped">
            <summary>
            Event is raised when the monitoring of the Trading Platform is stopped.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.MonitoringStatesUpdated">
            <summary>
            Event is raised when the monitoring states of the Trading Platform were updated.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.IsMonitoringEnabled">
            <summary>
            Get the current monitoring state.
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.EnableMonitoring(System.Boolean)">
            <summary>
            Enable/Disable retrieving monitoring information from the Trading Platform and update
            monitoring cache accordingly.
            Security: manager should have admin rights to retrieve monitoring information from the Trading Platform.
            </summary>
            <param name="enable">Enable/Disable flag</param>
            <returns>Operation completion result</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetMonitoringEvents(System.String,System.String,System.DateTime,System.Nullable{System.DateTime},TickTrader.BusinessObjects.TimestampIdKey@,System.Int32)">
            <summary>
            Get monitoring events of the Trading Platform starting from the given date.
            Monitoring events can be retrieved for all machines and modules of the Trading 
            Platform or for specific ones. Monitoring events returned with paging.
            Security: manager should have admin rights to retrieve monitoring information from the Trading Platform.
            </summary>
            <param name="machine">Machine name (can be null for all machines)</param>
            <param name="module">Module name (can be null for all modules)</param>
            <param name="fromDate">From date</param>
            <param name="toDate">To date (can be null for the max avaliable date)</param>
            <param name="key">From Id (can be -1 for the first avaliable Id)</param>
            <param name="size">Page size</param>
            <returns>Snapshot list of monitoring events</returns>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingStarting">
            <summary>
            Event is raised when the pumping is starting.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingStarted">
            <summary>
            Event is raised when the pumping is started.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllConfiguration">
            <summary>
            Event is raised when the pumping received all configuration update.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllFeedSources">
            <summary>
            Event is raised when the pumping received all feed sources.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllCurrencyTypes">
            <summary>
            Event is raised when the pumping received all currencyTypes.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllCurrency">
            <summary>
            Event is raised when the pumping received all currencies.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllSymbolSecurity">
            <summary>
            Event is raised when the pumping received all symbol securities.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllSymbolConfig">
            <summary>
            Event is raised when the pumping received all symbol configurations.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllSymbolTick">
            <summary>
            Event is raised when the pumping received all symbol ticks.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllDomains">
            <summary>
            Event is raised when the pumping received all domains.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllGroups">
            <summary>
            Event is raised when the pumping received all groups.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllGroupSecurity">
            <summary>
            Event is raised when the pumping received all group securities.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllSubscriptions">
            <summary>
            Event is raised when the pumping received all subscriptions.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllManagers">
            <summary>
            Event is raised when the pumping received all managers.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllAccounts">
            <summary>
            Event is raised when the pumping received all accounts.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllPositions">
            <summary>
            Event is raised when the pumping received all positions.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllOrders">
            <summary>
            Event is raised when the pumping received all orders.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllSplits">
            <summary>
            Event is raised when the pumping received all stock events.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllDividends">
            <summary>
            Event is raised when the pumping received all stock events.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllMergersAndAcquisitions">
            <summary>
            Event is raised when the pumping received all stock events.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAllScheduledTasks">
            <summary>
            Event is raised when the pumping received all stock events.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateOrdersActivation">
            <summary>
            Event is raised when the pumping received activation notifications for some orders.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingPing">
            <summary>
            Event is raised when the pumping pings.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingStopping">
            <summary>
            Event is raised when the pumping is stopping.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingStopped">
            <summary>
            Event is raised when the pumping is stopped.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateManagerRights">
            <summary>
            Event is raised when the manager rights are updated.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateFeedSource">
            <summary>
            Event is raised when the pumping received update of particular feed source.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateCurrencyType">
            <summary>
            Event is raised when the pumping received update of particular currency type.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateCurrency">
            <summary>
            Event is raised when the pumping received update of particular currency.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateSymbolSecurity">
            <summary>
            Event is raised when the pumping received update of particular symbol security.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateSymbolConfig">
            <summary>
            Event is raised when the pumping received update of particular symbol configuration.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateSymbolTick">
            <summary>
            Event is raised when the pumping received update of particular symbol tick.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateDomain">
            <summary>
            Event is raised when the pumping received update of particular domain.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateGroup">
            <summary>
            Event is raised when the pumping received update of particular group.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateGroupSecurity">
            <summary>
            Event is raised when the pumping received update of particular group security.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateSubscription">
            <summary>
            Event is raised when the pumping received update of particular suscription.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateManager">
            <summary>
            Event is raised when the pumping received update of particular manager.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateAccount">
            <summary>
            Event is raised when the pumping received update of particular account.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdatePosition">
            <summary>
            Event is raised when the pumping received update of particular position.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateOrder">
            <summary>
            Event is raised when the pumping received update of particular order.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateOrderActivation">
            <summary>
            Event is raised when the pumping received update of particular order activation.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingAccountMaringCall">
            <summary>
            Event is raised when the pumping received update of margin call on particular account.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingAccountMaringCallRevocation">
            <summary>
            Event is raised when the pumping received update of margin call revocation on particular account.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingAccountStopout">
            <summary>
            Event is raised when the pumping received update of stopout on particular account.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateSplit">
            <summary>
            Event is raised when the pumping received update of particular stock event.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateDividend">
            <summary>
            Event is raised when the pumping received update of particular stock event.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingUpdateMergerAndAcquisition">
            <summary>
            Event is raised when the pumping received update of particular stock event.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.PumpingFlags">
            <summary>
            Pumping Flags. Used while Start Pumping
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.DepthOfBook">
            <summary>
            Deep Of the Book. Used while Start Pumping
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.IsPumpingEnabled">
            <summary>
            Get the current pumping state.
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.EnablePumping(TickTrader.BusinessObjects.PumpingFlag,System.Int32)">
            <summary>
            Enable/Disable retrieving pumping updates from the Trading Platform.
            </summary>
            <param name="flags"> Publing flags </param>
            <param name="depthOfBook"> Deep of the book </param>
            <returns>Operation completion result</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DisablePumping(System.Boolean)">
            <summary>
            Disable pumping
            </summary>
            <param name="force">Force kill flag</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.WaitForPumping(System.Nullable{System.Int32})">
            <summary>
            Wait for pumping started.
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.DealingStarting">
            <summary>
            Event is raised when the dealing is starting.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.DealingStarted">
            <summary>
            Event is raised when the dealing is started.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.DealingStopping">
            <summary>
            Event is raised when the dealing is stopping.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.DealingStopped">
            <summary>
            Event is raised when the dealing is stopped.
            </summary>
        </member>
        <member name="E:TickTrader.Manager.Model.ITickTraderManagerModel.DealingRequest">
            <summary>
            Event is raised when the dealer received new dealer request.
            </summary>
        </member>
        <member name="P:TickTrader.Manager.Model.ITickTraderManagerModel.IsDealingEnabled">
            <summary>
            Get the current dealing state.
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.EnableDealing(System.Boolean)">
            <summary>
            Enable/Disable dealer mode for the current manager.
            </summary>
            <param name="enable">Enable/Disable flag</param>
            <returns>Operation completion result</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SendDealerResponse(TickTrader.BusinessObjects.DealerResponse)">
            <summary>
            Send dealer response.
            Works only in dealing mode! 
            </summary>
            <param name="response">Dealer response</param>
            <returns>Operation completion result</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetFeedSource(System.String)">
            <summary>
            Get the current feed source info from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="feedSource">Feed source</param>
            <returns>Current feed source info or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllFeedSources">
            <summary>
            Get the current feed source info for all feed sources from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the current feed sources or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestFeedSource(System.String)">
            <summary>
            Request feed source info by name.
            </summary>
            <param name="feedSource">Feed source name</param>
            <returns>Feed source info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateFeedSource(TickTrader.BusinessObjects.Requests.FeedSourceNewRequest)">
            <summary>
            Create new feed source.
            </summary>
            <param name="feedSourceNewRequest">New feed source request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyFeedSource(TickTrader.BusinessObjects.Requests.FeedSourceModifyRequest)">
            <summary>
            Modify existing feed source.
            </summary>
            <param name="feedSourceModifyRequest">Modify feed source request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteFeedSource(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing feed source.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="feedSource">Feed source name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllCurrencyTypes">
            <summary>
            Request currency type list.
            </summary>
            <returns>Currency type list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateCurrencyType(TickTrader.BusinessObjects.Requests.CurrencyTypeNewRequest)">
            <summary>
            Create new currency type.
            </summary>
            <param name="request">New currency request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyCurrencyType(TickTrader.BusinessObjects.Requests.CurrencyTypeModifyRequest)">
            <summary>
            Modify existing currency type.
            </summary>
            <param name="request">Modify currency request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteCurrencyType(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing currency type.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="currencyType">Currency name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetCurrency(System.String)">
            <summary>
            Get the current currency from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="currency">Currency</param>
            <returns>Current currency info or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllCurrencies">
            <summary>
            Get the current currency info for all currencies from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the current currencies or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestCurrency(System.String)">
            <summary>
            Request currency info by name.
            </summary>
            <param name="currency">Currency name</param>
            <returns>Currency info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllCurrencies">
            <summary>
            Request currency list.
            </summary>
            <returns>Currency list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateCurrency(TickTrader.BusinessObjects.Requests.CurrencyNewRequest)">
            <summary>
            Create new currency.
            </summary>
            <param name="currencyNewRequest">New currency request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyCurrency(TickTrader.BusinessObjects.Requests.CurrencyModifyRequest)">
            <summary>
            Modify existing currency.
            </summary>
            <param name="currencyModifyRequest">Modify currency request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteCurrency(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing currency.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="currency">Currency name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyCurrencySortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set sort order for multiple currencies
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="currencySortOrders">A list of currencies names and their sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetSymbolSecurity(System.String)">
            <summary>
            Get the current symbol security from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="security">Symbol security</param>
            <returns>Current symbol security info or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllSymbolsSecurities">
            <summary>
            Get the current symbol security info for all currencies from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the current symbol securities or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestSymbolSecurity(System.String)">
            <summary>
            Request symbol security info by name.
            </summary>
            <param name="security">Symbol security name</param>
            <returns>Symbol security info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllSymbolSecurities">
            <summary>
            Request symbol security list.
            </summary>
            <returns>Symbol security list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateSymbolSecurity(TickTrader.BusinessObjects.Requests.SecurityNewRequest)">
            <summary>
            Create new symbol security.
            </summary>
            <param name="securityNewRequest">New symbol security request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifySymbolSecurity(TickTrader.BusinessObjects.Requests.SecurityModifyRequest)">
            <summary>
            Modify existing symbol security.
            </summary>
            <param name="securityModifyRequest">Modify symbol security request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteSymbolSecurity(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing symbol security.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="security">Symbol security name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifySecuritySortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set sort order for multiple securities
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="currencySortOrders">A list of currencies names and their sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetSymbolConfig(System.String)">
            <summary>
            Get the current symbol configuration from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="symbol">Symbol</param>
            <returns>Current symbol configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllSymbolsConfigs">
            <summary>
            Get the current symbols configurations for all symbols from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the current symbols configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestSymbol(System.String)">
            <summary>
            Request symbol info by name.
            </summary>
            <param name="symbol">Symbol name</param>
            <returns>Symbol info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllSymbols">
            <summary>
            Request symbol list.
            </summary>
            <returns>Symbol list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateSymbol(TickTrader.BusinessObjects.Requests.SymbolNewRequest)">
            <summary>
            Create new symbol.
            </summary>
            <param name="symbolNewRequest">New symbol request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifySymbol(TickTrader.BusinessObjects.Requests.SymbolModifyRequest)">
            <summary>
            Modify existing symbol.
            </summary>
            <param name="symbolModifyRequest">Modify symbol request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteSymbol(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing symbol.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="symbol">Symbol name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RefreshSymbols">
            <summary>
            Refresh all symbols. Works only in meta like behavior mode.
            </summary>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifySymbolsSortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set sort order for multiple symbols
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="symbolSortOrders">A list of symbol names and their sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetSymbolTick(System.String)">
            <summary>
            Get the current symbol tick from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="symbol">Symbol</param>
            <returns>Current symbol tick or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllSymbolsTicks">
            <summary>
            Get the current symbols ticks for all symbols from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the current symbols ticks or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestSymbolTick(System.String)">
            <summary>
            Request the current symbol tick directly from the Trading Platform.
            </summary>
            <param name="symbol">Symbol</param>
            <returns>Current symbol tick or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllSymbolsTicks">
            <summary>
            Request the current symbols ticks for all symbols directly from the Trading Platform.
            </summary>
            <returns>List of the current symbols ticks or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SendSymbolTick(TickTrader.Common.Business.FeedTick)">
            <summary>
            Send single symbol tick to the Trading Platform.
            </summary>
            <param name="tick">Symbol tick</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SendSymbolTicks(System.Collections.Generic.List{TickTrader.Common.Business.FeedTick})">
            <summary>
            Send list of symbol ticks to the Trading Platform.
            </summary>
            <param name="ticks">List of symbol ticks</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteSymbolTicks(System.String,TickTrader.BusinessObjects.FeedTickId,TickTrader.BusinessObjects.FeedTickId)">
            <summary>
            Delete specified symbol ticks in specified time interval
            </summary>
            <param name="symbol">Ticks will be deleted from this symbol history</param>
            <param name="from">Start Id of the interval for deleting</param>
            <param name="to">End Id of the interval for deleting</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteSymbolHistory(System.String,TickTrader.BusinessObjects.FeedTickId,TickTrader.BusinessObjects.FeedTickId)">
            <summary>
            Delete specified symbol history in specified time interval
            </summary>
            <param name="symbol">All history will be deleted for this symbol</param>
            <param name="from">Start Id of the interval for deleting</param>
            <param name="to">End Id of the interval for deleting</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.InsertSymbolTicks(System.String,System.Collections.Generic.List{TickTrader.BusinessObjects.TickValue})">
            <summary>
            Insert symbol ticks
            </summary>
            <param name="symbol">Ticks will be inserted from this symbol history</param>
            <param name="ticks">List of symbol ticks</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.InsertM1Bars(System.String,System.Collections.Generic.List{TickTrader.Common.Business.HistoryBar},TickTrader.Common.Business.FxPriceType)">
            <summary>
            Insert symbol M1 bars
            </summary>
            <param name="symbol">Bars will be inserted to this symbol history</param>
            <param name="bars">List of symbol ticks</param>
            <param name="priceType">Type of bars (asks or bids)</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.Upstream(System.String,System.DateTime,System.DateTime,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.UpstreamTypes)">
            <summary>
            Upstream history from ticks for specified symbol and time interval
            </summary>
            <param name="symbol">History will be upstreamed from this symbol history</param>
            <param name="from">Start Id of the interval for upstreaming</param>
            <param name="to">End Id of the interval for upstreaming</param>
            <param name="type">Type of Upstreaming update</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestLevel2(System.String,System.Int32)">
            <summary>
            Request the current symbol level2 tick directly from the Trading Platform.
            </summary>
            <param name="symbol">Symbol</param>
            <param name="depth">book's depth</param>
            <returns>Current symbol tick or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllLevel2(System.Int32)">
            <summary>
            Request the current symbols level2 ticks for all symbols directly from the Trading Platform.
            </summary>
            <param name="depth">book's depth</param>
            <returns>List of the current symbols ticks or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.Level2Subscribe(System.String[],System.Int32)">
            <summary>
            Subscribe to symbols level2
            </summary>
            <param name="symbols">list of symbols</param>
            <param name="depth">book's depth</param>
            <returns>true if success</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.Level2Unsubscribe(System.String[])">
            <summary>
            Unsubscribe from symbols level2
            </summary>
            <param name="symbols">list of symbols</param>
            <returns>true if success</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetDomain(System.String)">
            <summary>
            Get the current domain configuration from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="domain">Domain</param>
            <returns>Current domain configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllDomains">
            <summary>
            Get the current domains configurations for all domains from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the current domains configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestDomain(System.String)">
            <summary>
            Request domain info by name.
            </summary>
            <param name="domain">Domain name</param>
            <returns>Domain info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllDomains">
            <summary>
            Get the current domains configurations for all domains from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the current domains configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateDomain(TickTrader.BusinessObjects.Requests.DomainNewRequest)">
            <summary>
            Create new domain.
            </summary>
            <param name="domainNewRequest">New domain request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyDomain(TickTrader.BusinessObjects.Requests.DomainModifyRequest)">
            <summary>
            Modify existing domain.
            </summary>
            <param name="domainModifyRequest">Modify domain request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteDomain(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing domain.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="domain">Domain name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetGroup(System.String)">
            <summary>
            Get the current group configuration from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="group">Group</param>
            <returns>Current group configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllGroups">
            <summary>
            Get the current groups configurations for all groups from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the current groups configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestGroup(System.String)">
            <summary>
            Request group info by name.
            </summary>
            <param name="group">Group name</param>
            <returns>Group info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllGroups">
            <summary>
            Get the current groups configurations for all groups from the Trading Platform.
            </summary>
            <returns>List of the current groups configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateGroup(TickTrader.BusinessObjects.Requests.GroupNewRequest)">
            <summary>
            Create new group.
            </summary>
            <param name="groupNewRequest">New group request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyGroup(TickTrader.BusinessObjects.Requests.GroupModifyRequest)">
            <summary>
            Modify existing group.
            </summary>
            <param name="groupModifyRequest">Modify group request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteGroup(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing group.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="group">Group name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetSubscription(System.String)">
            <summary>
            Get the current subscriptions configuration from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="subscription">Subscription</param>
            <returns>Current subscriptions configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllSubscriptions">
            <summary>
            Get the current subscriptions configurations for all subscriptions from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the current subscriptions configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestSubscription(System.String)">
            <summary>
            Request subscription info by name.
            </summary>
            <param name="subscription">Subscription name</param>
            <returns>Subscription info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllSubscriptions">
            <summary>
            Get the current subscriptions configurations for all subscriptions from the Trading Platform pumping.
            </summary>
            <returns>List of the current subscriptions configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateSubscription(TickTrader.BusinessObjects.Requests.SubscriptionNewRequest)">
            <summary>
            Create new subscription.
            </summary>
            <param name="subscriptionNewRequest">New subscription request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifySubscription(TickTrader.BusinessObjects.Requests.SubscriptionModifyRequest)">
            <summary>
            Modify existing subscription.
            </summary>
            <param name="subscriptionModifyRequest">Modify subscription request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteSubscription(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing subscription.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="subscription">Subscription name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetGroupSecurity(System.String)">
            <summary>
            Get the current group security by Id from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="groupSecurityId">Group security Id</param>
            <returns>Current group security or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllGroupSecurities">
            <summary>
            Get the current group securities for all groups from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the current group securities or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestGroupSecurity(System.String)">
            <summary>
            Request group security info by Id.
            </summary>
            <param name="groupSecurityId">Group security Id</param>
            <returns>Group security info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllGroupSecurities">
            <summary>
            Get the current groups configurations for all groups from the Trading Platform pumping.
            </summary>
            <returns>List of the current groups configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateGroupSecurity(TickTrader.BusinessObjects.Requests.GroupSecurityNewRequest)">
            <summary>
            Create new group security.
            </summary>
            <param name="groupSecurityNewRequest">New group security request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyGroupSecurity(TickTrader.BusinessObjects.Requests.GroupSecurityModifyRequest)">
            <summary>
            Modify existing group security.
            </summary>
            <param name="groupSecurityModifyRequest">Modify group security request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteGroupSecurity(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing group security.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="groupSecurityId">Group security Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyGroupSecuritySortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set sort order for multiple group securities
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="groupSecuritySortOrders">A list of group security names and their sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAccountById(System.Int64)">
            <summary>
            Get account by Id from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>Current account or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAccountsForRange(System.Int32)">
            <summary>
            Get all accounts for the given range in the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="rangeId">rangeId</param>
            <returns>List of accounts or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllAccounts">
            <summary>
            Get all accounts from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of all accounts or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllAccountLogins">
            <summary>
            Get all accounts logins from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of all accounts logins or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAccountById(System.Int64)">
            <summary>
            Request account by Id directly from Trading Platform.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>Account info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllAccounts">
            <summary>
            Request all accounts directly from Trading Platform.
            </summary>
            <returns>List of accounts or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllAccountLogins">
            <summary>
            Request all accounts logins directly from Trading Platform.
            </summary>
            <returns>List of accounts logins or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllAccountsFilter(System.String)">
            <summary>
            Request filtered accounts directly from Trading Platform.
            </summary>
            <param name="accountFilter">Accounts filter (groups, logins)</param>
            <returns>List of accounts or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllAccountsFilterList(System.Collections.Generic.List{System.String})">
            <summary>
            Request filtered accounts directly from Trading Platform.
            </summary>
            <param name="accountFilter">Accounts filter (groups, logins)</param>
            <returns>List of accounts or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateAccount(TickTrader.BusinessObjects.Requests.AccountNewRequest)">
            <summary>
            Create new account.
            </summary>
            <param name="accountNewRequest">New account request</param>
            <returns>Info of successfully created account or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyAccount(TickTrader.BusinessObjects.Requests.AccountModifyRequest)">
            <summary>
            Modify existing account.
            </summary>
            <param name="accountModifyRequest">Modify account request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteAccount(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Delete existing account.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="closeOrders">Close market orders and cancel pending orders</param>
            <param name="deleteTradeHistory">Delete trade history for account</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyAccountBalance(TickTrader.BusinessObjects.Requests.AccountBalanceRequest)">
            <summary>
            Modify account balance. Deposit/withdrawal account balance. (Deprecated. Does not support Cash accounts.)
            </summary>
            <param name="accountBalanceRequest">Account balance request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DepositWithdrawal(TickTrader.BusinessObjects.Requests.DepositWithdrawalRequest)">
            <summary>
            Deposit (or withdraw) money on account. Replaces ModifyAccountBalance method. Supports Cash accounts.
            </summary>
            <param name="request">Deposit request</param>
            <returns>Operation report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.TransferMoney(TickTrader.BusinessObjects.Requests.TransferMoneyRequest)">
            <summary>
            Transfer money on two accounts
            </summary>
            <param name="request">Deposit request</param>
            <returns>Operation report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyAccountCredit(TickTrader.BusinessObjects.Requests.AccountCreditRequest)">
            <summary>
            Modify account credit. Credit in/out account balance.
            </summary>
            <param name="accountCreditRequest">Account credit request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ValidateAccount(System.Int64,System.String)">
            <summary>
            Validate account.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="password">Account password</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ValidateReadonlyAccount(System.Int64,System.String)">
            <summary>
            Validate readonly account.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="password">Account password</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ValidateLogin(System.String,System.String)">
            <summary>
            Validate login.
            </summary>
            <param name="username">Username</param>
            <param name="password">Login password</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateAccountTwoFactorAuthKey(System.Int64)">
            <summary>
            Create 2FA for account
            </summary>
            <param name="accountLogin">Account Id</param>
            <returns>2FA key Uri</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteAccountTwoFactorAuthKey(System.Int64)">
            <summary>
            Delete 2FA for account
            </summary>
            <param name="accountLogin">Account Id</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ValidateAccountTwoFactorAuthKey(System.Int64,System.String)">
            <summary>
            Validate 2FA for account
            </summary>
            <param name="accountLogin">Account Id</param>
            <param name="otp">One-time password</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestLogin(System.String)">
            <summary>
            Request login by username directly from Trading Platform.
            </summary>
            <param name="username">Username</param>
            <returns>Login info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestLoginsByAccountId(System.Int64)">
            <summary>
            Request logins by account login directly from Trading Platform.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>List of login info for Account</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateLogin(TickTrader.BusinessObjects.Requests.LoginNewRequest)">
            <summary>
            Create new login.
            </summary>
            <param name="loginNewRequest">New login request</param>
            <returns>Info of successfully created login or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyLogin(TickTrader.BusinessObjects.Requests.LoginModifyRequest)">
            <summary>
            Modify existing login.
            </summary>
            <param name="loginModifyRequest">Modify login request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteLogin(System.String)">
            <summary>
            Delete existing login.
            </summary>
            <param name="username">Username</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestWebApiToken(System.String)">
            <summary>
            Request Web API token by Id directly from Trading Platform.
            </summary>
            <param name="webApiId">Web API token Id</param>
            <returns>Web API token</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestWebApiTokensByAccountId(System.Int64)">
            <summary>
            Request all Web API tokens by account login directly from Trading Platform.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>List of all Web API tokens for Account</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateWebApiToken(TickTrader.BusinessObjects.Requests.WebApiTokenNewRequest)">
            <summary>
            Create new Web API token.
            </summary>
            <param name="webApiNewTokenRequest">New Web API token request</param>
            <returns>Info of successfully created Web API token or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyWebApiToken(TickTrader.BusinessObjects.Requests.WebApiTokenModifyRequest)">
            <summary>
            Modify existing Web API token.
            </summary>
            <param name="webApiModifyTokenRequest">Modify Web API token request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteWebApiToken(System.String)">
            <summary>
            Delete existing Web API token.
            </summary>
            <param name="webApiId">Web API token Id</param>
            <returns>Successful status</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Model.ITickTraderManagerModel.ValidateWebApiToken(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Model.ITickTraderManagerModel.ResetWebApiTokenSecret(System.String)" -->
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAccessListRecord(System.String)">
            <summary>
            Request access list record by name.
            </summary>
            <param name="record">Access list record name</param>
            <returns>Access list record</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAccessList">
            <summary>
            Request full access list.
            </summary>
            <returns>Access list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateAccessListRecord(TickTrader.BusinessObjects.Requests.AccessListNewRequest)">
            <summary>
            Create new access list record.
            </summary>
            <param name="accessListNewRequest">New access list record request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyAccessListRecord(TickTrader.BusinessObjects.Requests.AccessListModifyRequest)">
            <summary>
            Modify existing access list record.
            </summary>
            <param name="accessListModifyRequest">Modify access list record request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteAccessListRecord(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing access list record.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="record">Access list record name</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyAccessListSortOrder(System.Nullable{System.Int32},System.Collections.Generic.List{TickTrader.BusinessObjects.EntitySortOrder})">
            <summary>
            Set the order of access list records.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="accessListSortOrders">Access list records sort order</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ValidateAccess(System.String,System.String,TickTrader.BusinessObjects.Security.AccessProtocols)">
            <summary>
            Validate access with access list by the given login parameters.
            </summary>
            <param name="username">User name</param>
            <param name="ipAddress">IP address</param>
            <param name="protocol">Protocol (manager/dealer/fix/webapi/websocket)</param>
            <returns>Access list record</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestThrottling(System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Request throttling info for the given protocol.
            </summary>
            <param name="protocol">Protocol</param>
            <returns>Throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllThrottling">
            <summary>
            Request all throttling info.
            </summary>
            <returns>Throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ChangeThrottling(TickTrader.BusinessObjects.Requests.ThrottlingChangeRequest)">
            <summary>
            Change existing protocol throttling.
            </summary>
            <param name="throttlingChangeRequest">Change throttling request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteThrottling(System.Nullable{System.Int32},System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Delete existing protocol throttling.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="protocol">Protocol</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ChangeThrottlingMethod(System.Nullable{System.Int32},System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod},System.Int32)">
            <summary>
            Change throttling method value.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <param name="rps">Requests per second</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteThrottlingMethod(System.Nullable{System.Int32},System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod})">
            <summary>
            Delete throttling method value.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ResolveAccountThrottling(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Resolve account throttling info for the given protocol.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <returns>Account throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ResolveAllAccountThrottling(System.Int64)">
            <summary>
            Resolve all account throttling info.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>Account throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAccountThrottling(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Request account throttling info for the given protocol.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <returns>Account throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllAccountThrottling(System.Int64)">
            <summary>
            Request all account throttling info.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>Account throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ChangeAccountThrottling(System.Int64,TickTrader.BusinessObjects.Requests.ThrottlingChangeRequest)">
            <summary>
            Change existing account throttling.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="throttlingChangeRequest">Change throttling request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteAccountThrottling(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Delete existing account throttling.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ChangeAccountThrottlingMethod(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod},System.Int32)">
            <summary>
            Change account throttling method value.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <param name="rps">Requests per second</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteAccountThrottlingMethod(System.Int64,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod})">
            <summary>
            Delete account throttling method value.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ResolveManagerThrottling(System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Resolve manager throttling info for the given protocol.
            </summary>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <returns>Manager throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ResolveAllManagerThrottling(System.Int16)">
            <summary>
            Resolve all manager throttling info.
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>Manager throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestManagerThrottling(System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Request manager throttling info for the given protocol.
            </summary>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <returns>Manager throttling info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllManagerThrottling(System.Int16)">
            <summary>
            Request all manager throttling info.
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>Manager throttling info list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ChangeManagerThrottling(System.Int16,TickTrader.BusinessObjects.Requests.ThrottlingChangeRequest)">
            <summary>
            Change existing manager throttling.
            </summary>
            <param name="managerId">Manager Id</param>
            <param name="throttlingChangeRequest">Change throttling request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteManagerThrottling(System.Nullable{System.Int32},System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol})">
            <summary>
            Delete existing manager throttling.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ChangeManagerThrottlingMethod(System.Nullable{System.Int32},System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod},System.Int32)">
            <summary>
            Change manager throttling method value.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <param name="rps">Requests per second</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteManagerThrottlingMethod(System.Nullable{System.Int32},System.Int16,System.WEnum{TickTrader.BusinessObjects.ThrottlingProtocol},System.WEnum{TickTrader.BusinessObjects.ThrottlingMethod})">
            <summary>
            Delete manager throttling method value.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerId">Manager Id</param>
            <param name="protocol">Protocol</param>
            <param name="method">Method</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetManagerById(System.Int16)">
            <summary>
            Get manager by Id from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>Current manager or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetMangerByLogin(System.Int64)">
            <summary>
            Get manager by account login from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="login">Account login</param>
            <returns>Current manager or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllManagers">
            <summary>
            Get all manager's accounts from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of all accounts or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllManagers">
            <summary>
            Request all managers info directly from Trading Platform.
            </summary>
            <returns>List of managers info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestManagerById(System.Int16)">
            <summary>
            Request manager info by Id directly from Trading Platform.
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>Manager info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestManagerByLogin(System.Int64)">
            <summary>
            Request manager info by account Id directly from Trading Platform.
            </summary>
            <param name="login">Account login</param>
            <returns>Manager info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateManager(TickTrader.BusinessObjects.Requests.ManagerNewRequest)">
            <summary>
            Create new manager.
            </summary>
            <param name="managerNewRequest">New manager request</param>
            <returns>Info of successfully created manager or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyManager(TickTrader.BusinessObjects.Requests.ManagerModifyRequest)">
            <summary>
            Modify existing manager.
            </summary>
            <param name="managerModifyRequest">Modify manager request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteManager(System.Nullable{System.Int32},System.Int16)">
            <summary>
            Delete existing manager.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerId">Manager Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetManagerDomains(System.String)">
            <summary>
            Get the manager domains rights by Id from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="managerDomainsId">Manager domains Id</param>
            <returns>Current manager domains rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetManagerDomains(System.Int16)">
            <summary>
            Get all managers domains rights for the given manager from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>List of the managers domains rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllManagerDomains">
            <summary>
            Get all managers domains rights from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the managers domains rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestManagerDomainsById(System.String)">
            <summary>
            Request manager domains info by Id directly from Trading Platform.
            </summary>
            <param name="managerDomainsId">Manager domains Id</param>
            <returns>Manager domains info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateManagerDomains(TickTrader.BusinessObjects.Requests.ManagerDomainsNewRequest)">
            <summary>
            Create new manager domains security info.
            </summary>
            <param name="managerDomainsNewRequest">New manager domains request</param>
            <returns>New manager domains Id or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyManagerDomains(TickTrader.BusinessObjects.Requests.ManagerDomainsModifyRequest)">
            <summary>
            Modify existing manager domains security info.
            </summary>
            <param name="managerDomainsModifyRequest">Modify manager domains request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteManagerDomains(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing manager domains security info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerDomainsId">Manager domains Id</param>/// 
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetManagerGroups(System.String)">
            <summary>
            Get the manager groups rights by Id from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="managerGroupsId">Manager groups Id</param>
            <returns>Current manager groups rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetManagerGroups(System.Int16)">
            <summary>
            Get all managers groups rights for the given manager from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>List of the managers groups rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllManagerGroups">
            <summary>
            Get all managers groups rights from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the managers groups rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestManagerGroupsById(System.String)">
            <summary>
            Request manager groups info by Id directly from Trading Platform.
            </summary>
            <param name="managerGroupsId">Manager groups Id</param>
            <returns>Manager groups info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateManagerGroups(TickTrader.BusinessObjects.Requests.ManagerGroupsNewRequest)">
            <summary>
            Create new manager groups security info.
            </summary>
            <param name="managerGroupsNewRequest">New manager groups request</param>
            <returns>New manager groups Id or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyManagerGroups(TickTrader.BusinessObjects.Requests.ManagerGroupsModifyRequest)">
            <summary>
            Modify existing manager groups security info.
            </summary>
            <param name="managerGroupsModifyRequest">Modify manager groups request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteManagerGroups(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing manager groups security info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerGroupsId">Manager groups Id</param>/// 
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetManagerSecurities(System.String)">
            <summary>
            Get the manager symbol securities rights by Id from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="managerSecuritiesId">Manager symbol securities Id</param>
            <returns>Current manager symbol securities rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetManagerSecurities(System.Int16)">
            <summary>
            Get all managers symbol securities rights for the given manager from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>List of the managers symbol securities rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllManagerSecurities">
            <summary>
            Get all managers symbol securities rights from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the managers symbol securities rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestManagerSecuritiesById(System.String)">
            <summary>
            Request manager symbol securities info by Id directly from Trading Platform.
            </summary>
            <param name="managerSecuritiesId">Manager securities Id</param>
            <returns>Manager securities info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestManagerSecurities(System.Int16)">
            <summary>
            Request all managers symbol security infos for the given manager from the Trading Platform.
            </summary>
            <param name="managerId">Manager Id</param>
            <returns>List of the managers symbol securities rights or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateManagerSecurities(TickTrader.BusinessObjects.Requests.ManagerSecuritiesNewRequest)">
            <summary>
            Create new manager symbol securities info.
            </summary>
            <param name="managerSecuritiesNewRequest">New manager securities request</param>
            <returns>New manager securities Id or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyManagerSecurities(TickTrader.BusinessObjects.Requests.ManagerSecuritiesModifyRequest)">
            <summary>
            Modify existing manager symbol securities info.
            </summary>
            <param name="managerSecuritiesModifyRequest">Modify manager securities request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteManagerSecurities(System.Nullable{System.Int32},System.String)">
            <summary>
            Delete existing manager symbol securities info.
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="managerSecuritiesId">Manager securities Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ValidateManager(System.Int64,System.String)">
            <summary>
            Validate manager.
            </summary>
            <param name="managerLogin">Manager login</param>
            <param name="password">Manager password</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SetNewPassword(System.String)">
            <summary>
            Set new password if needed.
            </summary>
            <param name="password">Password</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateManagerTwoFactorAuthKey(System.Nullable{System.Int32},System.Int16)">
            <summary>
            Create 2FA for manager
            </summary>
            <param name="configVersion"></param>
            <param name="managerId">Manager Id</param>
            <returns>2FA key Uri</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteManagerTwoFactorAuthKey(System.Nullable{System.Int32},System.Int16)">
            <summary>
            Delete 2FA for manager
            </summary>
            <param name="configVersion"></param>
            <param name="managerId">Manager Id</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetOrderById(System.Int64)">
            <summary>
            Get order by Id from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="orderId">orderId</param>
            <returns>Current order or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetOrdersForAccount(System.Int64)">
            <summary>
            Get all orders for the given account in the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="accountLogin">accountLogin</param>
            <returns>List of account orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetOrdersForRange(System.Int32)">
            <summary>
            Get all orders for the given range in the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="rangeId">rangeId</param>
            <returns>List of orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetOrdersForSymbol(System.String)">
            <summary>
            Get all orders with the given symbol in the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="symbol">symbol</param>
            <returns>List of account orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllOrders">
            <summary>
            Get all orders from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of all orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestOrderById(System.Int64)">
            <summary>
            Request order by Id directly from Trading Platform.
            </summary>
            <param name="orderId">Order Id</param>
            <returns>Order info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestOrdersByAccountId(System.Int64)">
            <summary>
            Request orders info for the given account Id.
            </summary>
            <param name="accountLogin">Account Login</param>
            <returns>List of order infos</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllOrders">
            <summary>
            Request all orders directly from Trading Platform.
            </summary>
            <returns>List of orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllOrdersFilter(System.String)">
            <summary>
            Request filtered orders directly from Trading Platform.
            </summary>
            <param name="orderFilter">Order filter (groups, logins, orders)</param>
            <returns>List of orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllOrdersFilterList(System.Collections.Generic.List{System.String})">
            <summary>
            Request filtered orders directly from Trading Platform.
            </summary>
            <param name="orderFilter">Order filter (groups, logins, orders)</param>
            <returns>List of orders or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestTradeById(System.Int64)">
            <summary>
            Request order / position by Id directly from Trading Platform.
            </summary>
            <param name="tradeId">Order / position Id</param>
            <returns>Order / position info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.OpenOrder(TickTrader.BusinessObjects.Requests.OpenOrderRequest)">
            <summary>
            Open new order (market, limit or stop).
            </summary>
            <param name="openOrderRequest">Open order request</param>
            <returns>Info of successfully opened order or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyOrder(TickTrader.BusinessObjects.Requests.OrderReplaceRequest)">
            <summary>
            Modify existing order.
            </summary>
            <param name="modifyOrderRequest">Modify order request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ActivateOrder(TickTrader.BusinessObjects.Requests.ActivateOrderRequest)">
            <summary>
            Activate pending order (limit or stop).
            </summary>
            <param name="activateOrderRequest">Activate order request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CancelOrder(TickTrader.BusinessObjects.Requests.CancelOrderRequest)">
            <summary>
            Cancel existing order.
            </summary>
            <param name="cancelOrderRequest">Cancel order request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ClosePosition(TickTrader.BusinessObjects.Requests.ClosePositionRequest)">
            <summary>
            Close existing position.
            </summary>
            <param name="closePositionRequest">Close position request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CancelAll(System.Int64,System.Boolean)">
            <summary>
            Cancel all orders for the account with the given account login.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="stopoutFlag">Stopout flag</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CloseAll(System.Int64,System.Boolean)">
            <summary>
            Close all orders for the account with the given account login.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="stopoutFlag">Stopout flag</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyPosition(TickTrader.BusinessObjects.Requests.ModifyPositionRequest)">
            <summary>
            Modify existing Net Position.
            </summary>
            <param name="request">Modify Net Position request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ValidateMargin(TickTrader.BusinessObjects.Requests.ValidateMarginRequest)">
            <summary>
            Validate margin for a new order.
            </summary>
            <param name="validateMarginRequest">Validate margin request</param>
            <returns>Validate margin report or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ValidateMarginActivate(TickTrader.BusinessObjects.Requests.ValidateMarginActivateRequest)">
            <summary>
            Validate activate margin for a new order.
            </summary>
            <param name="validateMarginActivateRequest">Validate activate margin request</param>
            <returns>Validate activate margin report or null if failed</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.LockOrder(TickTrader.BusinessObjects.Requests.ExecutionLockRequest)">
            <summary>
            Lock order for execution for a cpecified timeout in seconds. Any related order will be locked as well.
            </summary>
            <param name="request">Execution lock request</param>
            <returns>Execution lock report with list of orders were locked and expiration time.</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetPositionById(System.Int64)">
            <summary>
            Get position by Id from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="positionId">positionId</param>
            <returns>Current position or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetPositionsForAccount(System.Int64)">
            <summary>
            Get all positions for the given net account in the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="accountLogin">accountLogin</param>
            <returns>List of net account positions or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetPositionsForSymbol(System.String)">
            <summary>
            Get all positions with the given symbol in the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="symbol">symbol</param>
            <returns>List of net account positions or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllPositions">
            <summary>
            Get all positions from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of all positions or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestPositionById(System.Int64)">
            <summary>
            Request position by Id directly from Trading Platform.
            </summary>
            <param name="positionId">Position Id</param>
            <returns>Position info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestPositionsByAccountId(System.Int64)">
            <summary>
            Request positions info for the given net account Id.
            </summary>
            <param name="accountLogin">Account Login</param>
            <returns>List of position infos</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllPositions">
            <summary>
            Request all positions directly from Trading Platform.
            </summary>
            <returns>List of positions or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllPositionsFilter(System.String)">
            <summary>
            Request filtered positions directly from Trading Platform.
            </summary>
            <param name="positionFilter">Position filter (logins, positions)</param>
            <returns>List of positions or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllPositionsFilterList(System.Collections.Generic.List{System.String})">
            <summary>
            Request filtered positions directly from Trading Platform.
            </summary>
            <param name="positionFilter">Position filter (logins, positions)</param>
            <returns>List of positions or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetTradeSummary(System.String)">
            <summary>
            Get the current trade summary for the given symbol from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <param name="symbol">Symbol</param>
            <returns>Current trade summary for the given symbol or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllTradeSummaries">
            <summary>
            Get the current trade summaries for all symbols from the Trading Platform pumping.
            Works only in pumping mode! 
            </summary>
            <returns>List of the trade summaries or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.QueryJournal(TickTrader.BusinessObjects.Requests.JournalSearchRequest)">
            <summary>
            Query journal entries.
            </summary>
            <param name="request">Journal request</param>
            <returns>Journal report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.QueryJournalByTransactionId(System.String)">
            <summary>
            Query journal entries by transaction Id.
            </summary>
            <param name="transactionId">Transaction Id</param>
            <returns>Journal entries collection</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetTransactionTypesFilter">
            <summary>
            Returns Journal Transaction Types Filter currently is used by TTS
            </summary>
            <returns>Journal Transaction Types</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DropSessions(TickTrader.BusinessObjects.Requests.DropSessionsRequest)">
            <summary>
            Drop sessions operation.
            </summary>
            <param name="dropSessionsRequest">Drop sessions request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RefreshOnlineSessions">
            <summary>
            Refresh online sessions
            </summary>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestOnlineSessions">
            <summary>
            Request online sessions
            </summary>
            <returns>Online sesions list</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TickTrader.Manager.Model.ITickTraderManagerModel.RefreshAndRequestOnlineSessions(System.TimeSpan)" -->
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestBanList(TickTrader.BusinessObjects.Security.BanListType)">
            <summary>
            Request ban list
            </summary>
            <param name="banListType"> Account type(Manager, Client, WebApi, etc.)</param>
            <returns>Ban list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ClearBanListRecords(TickTrader.BusinessObjects.Security.BanListType,System.Collections.Generic.List{TickTrader.BusinessObjects.Security.BanListRecord})">
            <summary>
            Request ban list
            </summary>
            <param name="banListType"> Account type(Manager, Client, WebApi, etc.)</param>
            <param name="banListRecords"> List of records to delete</param>
            <returns>Ban list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.QueryTradeHistory(System.Int64,TickTrader.BusinessObjects.Requests.TradeHistoryRequest)">
            <summary>
            Query trade history.
            </summary>
            <param name="accountLogin">Account login</param>
            <param name="request">Trade history request</param>
            <returns>Trade history report with history entries collection</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.QueryTradeHistoryOverall(TickTrader.BusinessObjects.Requests.TradeHistoryOverallRequest)">
            <summary>
            Query overall trade history.
            </summary>
            <param name="request">Trade history overall request</param>
            <returns>Trade history overal report with history entries collection</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetTradeReport(System.String)">
            <summary>
            Get trade report by Id.
            </summary>
            <param name="reportId">Trade report Id</param>
            <returns>Trade report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateTradeReport(TickTrader.BusinessObjects.TradeReport)">
            <summary>
            Create trade report.
            </summary>
            <param name="report">Trade report to create</param>
            <returns>Created trade report Id</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyTradeReport(TickTrader.BusinessObjects.TradeReport)">
            <summary>
            Modify trade report.
            </summary>
            <param name="report">Trade report to modify</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteTradeReport(System.String)">
            <summary>
            Delete trade report by Id.
            </summary>
            <param name="reportId">Trade report Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.QueryDailyAccountsSnapshot(TickTrader.BusinessObjects.Requests.DailyAccountsSnapshotRequest)">
            <summary>
            Query daily accounts snapshot.
            </summary>
            <param name="request">Daily accounts snapshot request</param>
            <returns>Daily accounts snapshot report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetSplit(System.Int64)">
            <summary>
            Get split by id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="splitId">splitId</param>
            <returns>Current Split configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllSplits">
            <summary>
            Get all splits from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current splits configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllSplits">
            <summary>
            Get all splits from the Trading Platform.
            </summary>
            <returns>List of the current splits configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestSplit(System.Int64)">
            <summary>
            Request split info by id.
            </summary>
            <param name="splitId">eventId</param>
            <returns>split info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateSplit(TickTrader.BusinessObjects.Requests.SplitNewRequest)">
            <summary>
            Create new Split.
            </summary>
            <param name="splitNewRequest">New Split request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifySplit(TickTrader.BusinessObjects.Requests.SplitModifyRequest)">
            <summary>
            Modify existing Split.
            </summary>
            <param name="splitModifyRequest">Modify Split request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteSplit(System.Int64)">
            <summary>
            Delete existing Split.
            </summary>
            <param name="splitId">splitId</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ExecuteSplit(System.Int64)">
            <summary>
            Execute existing Split.
            </summary>
            <param name="splitId">splitId</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RollbackSplit(System.Int64)">
            <summary>
            Rollback existing Split.
            </summary>
            <param name="splitId">splitId</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetDividend(System.Int64)">
            <summary>
            Get Dividend by id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="dividendId">dividendId</param>
            <returns>Current Dividend configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllDividends">
            <summary>
            Get all Dividends from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current Dividends configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllDividends">
            <summary>
            Get all Dividends from the Trading Platform.
            </summary>
            <returns>List of the current Dividends configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestDividend(System.Int64)">
            <summary>
            Request Dividend info by id.
            </summary>
            <param name="DividendId">eventId</param>
            <returns>Dividend info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateDividend(TickTrader.BusinessObjects.Requests.DividendNewRequest)">
            <summary>
            Create new Dividend.
            </summary>
            <param name="DividendNewRequest">New Dividend request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifyDividend(TickTrader.BusinessObjects.Requests.DividendModifyRequest)">
            <summary>
            Modify existing Dividend.
            </summary>
            <param name="DividendModifyRequest">Modify Dividend request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteDividend(System.Int64)">
            <summary>
            Delete existing Dividend.
            </summary>
            <param name="DividendId">DividendId</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetMergerAndAcquisition(System.Guid)">
            <summary>
            Get mergerAndAcquisition by id from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <param name="mergerAndAcquisitionId">mergerAndAcquisitionId</param>
            <returns>Current MergerAndAcquisition configuration or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllMergersAndAcquisitions">
            <summary>
            Get all mergerAndAcquisitions from the Trading Platform pumping.
            Works only in pumping mode!
            </summary>
            <returns>List of the current mergerAndAcquisitions configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllMergersAndAcquisitions">
            <summary>
            Get all mergerAndAcquisitions from the Trading Platform.
            </summary>
            <returns>List of the current mergerAndAcquisitions configurations or null</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestMergerAndAcquisition(System.Guid)">
            <summary>
            Request mergerAndAcquisition info by id.
            </summary>
            <param name="mergerAndAcquisitionId">eventId</param>
            <returns>mergerAndAcquisition info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteMergerAndAcquisition(System.Guid)">
            <summary>
            Delete existing MergerAndAcquisition.
            </summary>
            <param name="id">mergerAndAcquisitionId</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveAccount(System.Int64,System.Boolean)">
            <summary>
            Archive accoutn by Id.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="force">Force archivation even if account has opened orders, positions, assets</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveRestoreAccount(System.Int64,System.Boolean)">
            <summary>
            Restore archived account by Id.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="restoreTrades">Restore opened trades (orders, positions) if preset</param>
            <returns>Restored account info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveDeleteAccount(System.Int64)">
            <summary>
            Delete account from archive.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveGetAccountById(System.Int64)">
            <summary>
            Request account from archive by its Id.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>Account info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveGetAllAccounts">
            <summary>
            Request all accounts from archive.
            </summary>
            <returns>List of account info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveGetLogin(System.String)">
            <summary>
            Request login info by user name from archive.
            </summary>
            <param name="username">User name</param>
            <returns>Login info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveGetLoginsByAccountId(System.Int64)">
            <summary>
            Request all login info by account login from archive.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>List of login info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveGetWebApiToken(System.String)">
            <summary>
            Request Web API token by Id from archive.
            </summary>
            <param name="webApiId">Web API token Id</param>
            <returns>Web API token</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveGetWebApiTokensByAccountId(System.Int64)">
            <summary>
            Request all Web API tokens by account login from archive.
            </summary>
            <param name="accountLogin">Account login</param>
            <returns>List of Web API tokens</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveGetOrderById(System.Int64)">
            <summary>
            Request order from archive by its Id.
            </summary>
            <param name="orderId">Order Id</param>
            <returns>Order</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveGetOrdersByAccountId(System.Int64)">
            <summary>
            Request orders for the given account from archive.
            </summary>
            <param name="accountId">Account Id</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveGetAllOrders">
            <summary>
            Request all orders from archive.
            </summary>
            <returns>List of orders</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveQueryTradeHistory(System.Int64,TickTrader.BusinessObjects.Requests.TradeHistoryRequest)">
            <summary>
            Request trade history for the given account from archive.
            </summary>
            <param name="accountId">Account Id</param>
            <param name="request">Trade history request</param>
            <returns>Trade history report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ArchiveQueryTradeHistoryOverall(TickTrader.BusinessObjects.Requests.TradeHistoryOverallRequest)">
            <summary>
            Request overall trade history for the given account from archive.
            </summary>
            <param name="request">Trade history overall request</param>
            <returns>Trade history overall report</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.PerformRollover(TickTrader.BusinessObjects.Requests.RolloverRequest)">
            <summary>
            Perform a rollover operation.
            </summary>
            <param name="rolloverRequest">Rollover request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetTradeConfiguration">
            <summary>
            Get trade configuration
            </summary>
            <returns>Trade configuration</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SetTradeConfiguration(TickTrader.BusinessObjects.Requests.SetTradeConfigurationRequest)">
            <summary>
            Set trade configuration
            </summary>
            <param name="config">New trade configuration</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.WaitForConfigUpdated(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Wait for configuration updated.
            </summary>
            <param name="initialConfigVersion">Initial configuration version.</param>
            <param name="millisecondsTimeout">Timeout in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ServerTime">
            <summary>
            Get the current server time.
            </summary>
            <returns>Returned the current server time</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ServerTimeUtc">
            <summary>
            Get the current server time in UTC.
            </summary>
            <returns>Returned the current server time in UTC</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetTimeZonesNames">
            <summary>
            Get server time zones (key=TimeZoneId, value=TimeZoneName)
            </summary>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestAllSchedules">
            <summary>
            Get all schedules
            </summary>
            <returns>Schedules list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestSchedule(System.String)">
            <summary>
            Get schedule info by name
            </summary>
            <param name="schedule">Name of schedule</param>
            <returns>Schedule info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateSchedule(TickTrader.BusinessObjects.Requests.ScheduleNewRequest)">
            <summary>
            Create new schedule info
            </summary>
            <param name="request">New schedule request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModifySchedule(TickTrader.BusinessObjects.Requests.ScheduleModifyRequest)">
            <summary>
            Modify schedule info
            </summary>
            <param name="request">Modify schedule request</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteSchedule(System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Delete schedule by name
            </summary>
            <param name="configVersion">Configuration version</param>
            <param name="schedule">Name of schedule</param>
            <param name="force">If true schedule will be removed in all bound schedules otherwise OperationFault exception.</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestModuleVersions">
            <summary>
            Request module versions list.
            </summary>
            <returns>Module versions list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SendEmail(System.String,System.String)">
            <summary>
            Send Email to administrators of the Trading Platform.
            </summary>
            <param name="subject">Email subject</param>
            <param name="body">Email body</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SendSms(System.String)">
            <summary>
            Send SMS to administrators of the Trading Platform.
            </summary>
            <param name="message">SMS message</param>
            <returns>Successful status</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.TextCommand(System.String)">
            <summary>
            Executes a text command on server.
            </summary>
            <param name="userInputStr">User command.</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BreakTextCommand">
            <summary>
            Breaks (cancels) currently executing text command.
            </summary>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModelNow">
            <summary>
            Get the current model time
            </summary>
            <returns>Current model time</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ServerToModel(System.Int32)">
            <summary>
            Convert server time hour to model time.
            </summary>
            <param name="serverHour">Server time hour to convert</param>
            <returns>Model time hour</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ServerToModel(System.DateTime)">
            <summary>
            Convert server time to model time.
            </summary>
            <param name="serverTime">Server time to convert</param>
            <returns>Model time</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModelToServer(System.Int32)">
            <summary>
            Convert model time hour to server time.
            </summary>
            <param name="modelHour">Model time hour to convert</param>
            <returns>Server time hour</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ModelToServer(System.DateTime)">
            <summary>
            Convert model time to server time.
            </summary>
            <param name="modelTime">Model time to convert</param>
            <returns>Server time</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkOperations(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.Request})">
            <summary>
            Perform bulk operations
            </summary>
            <param name="bulkRequests">List of bulk request</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkCreateCurrencyType(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyTypeNewRequest})">
            <summary>
            Perform bulk create currency types
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkModifyCurrencyType(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyTypeModifyRequest})">
            <summary>
            Perform bulk modify currency types
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkCreateCurrency(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyNewRequest})">
            <summary>
            Perform bulk create currencies
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkModifyCurrency(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyModifyRequest})">
            <summary>
            Perform bulk modify currencies
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkCreateSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SecurityNewRequest})">
            <summary>
            Perform bulk create securities
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkModifySecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SecurityModifyRequest})">
            <summary>
            Perform bulk modify securities
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkCreateSchedule(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.ScheduleNewRequest})">
            <summary>
            Perform bulk create schedules
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkModifySchedule(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.ScheduleModifyRequest})">
            <summary>
            Perform bulk modify schedules
            </summary>
            <param name="requests">List of requests</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkCreateSymbol(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SymbolNewRequest})">
            <summary>
            Perform bulk create symbols
            </summary>
            <param name="symbolNewRequests">List of requests</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkCreateGroup(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupNewRequest})">
            <summary>
            Perform bulk create groups
            </summary>
            <param name="groupNewRequests">List of requests</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkCreateGroupSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupSecurityNewRequest})">
            <summary>
            Perform bulk create group securities
            </summary>
            <param name="groupSecurityNewRequests">List of requests</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkModifySymbol(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SymbolModifyRequest})">
            <summary>
            Perform bulk modify symbols
            </summary>
            <param name="symbolModifyRequests">List of requests</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkModifyGroup(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupModifyRequest})">
            <summary>
            Perform bulk modify groups
            </summary>
            <param name="groupModifyRequests">List of requests</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkModifyGroupSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupSecurityModifyRequest})">
            <summary>
            Perform bulk modify group securities
            </summary>
            <param name="groupSecurityModifyRequests">List of requests</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkDeleteGroupSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.GroupSecurityDeleteRequest})">
            <summary>
            Perform bulk delete group securities
            </summary>
            <param name="groupSecurityDeleteRequests">List of requests</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkDeleteSecurity(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SecurityDeleteRequest})">
            <summary>
            Perform bulk delete securities
            </summary>
            <param name="securityDeleteRequests">List of requests</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkDeleteSymbol(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.SymbolDeleteRequest})">
            <summary>
            Perform bulk delete symbols
            </summary>
            <param name="symbolDeleteRequests">List of requests</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.BulkDeleteCurrency(System.Collections.Generic.List{TickTrader.BusinessObjects.Requests.CurrencyDeleteRequest})">
            <summary>
            Perform bulk delete currencies
            </summary>
            <param name="currencyDeleteRequests">List of requests</param>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.InsertSymbolTicksAsyncWithJournal(System.String,System.Collections.Generic.List{TickTrader.BusinessObjects.TickValue})">
            <summary>
            Insert symbol ticks
            </summary>
            <param name="symbol">Ticks will be inserted from this symbol history</param>
            <param name="ticks">List of symbol ticks</param>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.UpstreamAsyncWithJournal(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.UpstreamTypes)">
            <summary>
            Upstream history from ticks for specified symbol and time interval
            </summary>
            <param name="symbol">History will be upstreamed from this symbol history</param>
            <param name="from">Start Id of the interval for upstreaming</param>
            <param name="to">End Id of the interval for upstreaming</param>       
            <param name="type">Type of Upstreaming update</param>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ExportFromStorageAsyncWithJournal(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.StoragePeriodicityLevel)">
            <summary>
            Export quote history from storage
            </summary>
            <param name="symbol">History will be exported from this symbol history</param>
            <param name="from">Start Id of the interval for exporting</param>
            <param name="to">End Id of the interval for exporting</param>
            <param name="storagePeriodicityLevel">History periodicity level for operation</param>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.ApproximateHistorySizeAsyncWithJournal(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.StoragePeriodicityLevel)">
            <summary>
            Get approximate size of quote history from storage
            </summary>
            <param name="symbol">Size will be approximated for this symbol history</param>
            <param name="from">Start Id of the interval for approximation</param>
            <param name="to">End Id of the interval for approximation</param>
            <param name="storagePeriodicityLevel">History periodicity level for operation</param>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteFromStorageAsyncWithJournal(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.StoragePeriodicityLevel)">
            <summary>
            Delete quote history from storage
            </summary>
            <param name="symbol">History will be deleted from this symbol history</param>
            <param name="from">Start Id of the interval for deleting</param>
            <param name="to">End Id of the interval for deleting</param>
            <param name="storagePeriodicityLevel">History periodicity level for operation</param>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CompactStorageAsyncWithJournal">
            <summary>
            Compact quote history storage
            </summary>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.QHImportFromTransferFileAsyncWithJournal(System.String,System.String,TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.StoragePeriodicityLevel)">
            <summary>
            Import quote history to storage from export folder
            </summary>
            <param name="fileName">History will be imported from this file</param>
            <param name="symbol">History will be imported to this symbol history</param>
            <param name="periodicityLevel">History periodicity level for operation</param>
            <returns>History task id</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.QHImportFromTransferFilesAsyncWithJournal(System.Collections.Generic.List{TickTrader.BusinessObjects.QuoteHistory.Engine.QuoteHistoryTask.ImportFromTransferFileProperties})">
            <summary>
            Import quote history to storage from export folder
            </summary>
            <param name="importProperties">History will be imported from this file</param>
            <returns>History task id with journal token</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetHistoryTaskInfo(System.Int32)">
            <summary>
            Get history task info for specified task id
            </summary>
            <param name="id">Task id</param>
            <returns>History task info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RequestHistoryTaskCancel(System.Int32)">
            <summary>
            Request history task cancel
            </summary>
            <param name="id">Task id</param>
            <returns>History task info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllScheduledTasks">
            <summary>
            Get all scheduled tasks
            </summary>
            <returns>Schedules tasks list</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetScheduledTask(System.Guid)">
            <summary>
            Get scheduled task by ID
            </summary>
            <param name="taskId">Scheduled task ID</param>
            <returns>Scheduled task info</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CreateScheduledTask(TickTrader.BusinessObjects.IScheduledTaskInfo)">
            <summary>
            Create new scheduled task 
            </summary>
            <param name="taskInfo">ScheduledTaskInfo</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.UpdateScheduledTask(TickTrader.BusinessObjects.IScheduledTaskInfo)">
            <summary>
            Update scheduled task 
            </summary>
            <param name="taskInfo">ScheduledTaskInfo</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.DeleteScheduledTask(System.Guid)">
            <summary>
            Delete scheduled task by ID
            </summary>
            <param name="taskId">Scheduled task Id</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.CancelScheduledTask(System.Guid)">
            <summary>
            Get scheduled task by ID
            </summary>
            <param name="taskId">Scheduled task Id</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.RunScheduledTask(System.Guid)">
            <summary>
            Run scheduled task by ID
            </summary>
            <param name="taskId">Scheduled task Id</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.SetTaskPasswords(System.Guid,System.String)">
            <summary>
            Change passwords in scheduled task
            </summary>
            <param name="taskId">Scheduled task Id</param>
            <param name="passwords">Json with pairs where key is fieldName of Task, value is password</param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetQHModifyEventById(System.Guid)">
            <summary>
            Get QHModify event by Id
            </summary>
            <param name="eventId">QHModifyEvent Id</param>
            <returns>QHModifyEvent</returns>
        </member>
        <member name="M:TickTrader.Manager.Model.ITickTraderManagerModel.GetAllQHModifyEvents(System.DateTime)">
            <summary>
            Get all QHModify events registred after timestamp
            </summary>
            <returns>QHModifyEvents list</returns>
        </member>
    </members>
</doc>
